                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6121 (Nov 17 2015) (CYGWIN)
                              4 ; This file was generated Sat Jan 27 13:25:12 2018
                              5 ;--------------------------------------------------------
                              6 	.module rmh
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _IRCON2_P2IF
                             13 	.globl _IRCON2_UTX0IF
                             14 	.globl _IRCON2_UTX1IF
                             15 	.globl _IRCON2_P1IF
                             16 	.globl _IRCON2_WDTIF
                             17 	.globl _CY
                             18 	.globl _AC
                             19 	.globl _F0
                             20 	.globl _RS1
                             21 	.globl _RS0
                             22 	.globl _OV
                             23 	.globl _F1
                             24 	.globl _P
                             25 	.globl _IRCON_DMAIF
                             26 	.globl _IRCON_T1IF
                             27 	.globl _IRCON_T2IF
                             28 	.globl _IRCON_T3IF
                             29 	.globl _IRCON_T4IF
                             30 	.globl _IRCON_P0IF
                             31 	.globl _IRCON_STIF
                             32 	.globl _IEN1_DMAIE
                             33 	.globl _IEN1_T1IE
                             34 	.globl _IEN1_T2IE
                             35 	.globl _IEN1_T3IE
                             36 	.globl _IEN1_T4IE
                             37 	.globl _IEN1_P0IE
                             38 	.globl _IEN0_RFERRIE
                             39 	.globl _IEN0_ADCIE
                             40 	.globl _IEN0_URX0IE
                             41 	.globl _IEN0_URX1IE
                             42 	.globl _IEN0_ENCIE
                             43 	.globl _IEN0_STIE
                             44 	.globl _IEN0_EA
                             45 	.globl _EA
                             46 	.globl _P2_4
                             47 	.globl _P2_3
                             48 	.globl _P2_2
                             49 	.globl _P2_1
                             50 	.globl _P2_0
                             51 	.globl _S0CON_ENCIF_0
                             52 	.globl _S0CON_ENCIF_1
                             53 	.globl _P1_7
                             54 	.globl _P1_6
                             55 	.globl _P1_5
                             56 	.globl _P1_4
                             57 	.globl _P1_3
                             58 	.globl _P1_2
                             59 	.globl _P1_1
                             60 	.globl _P1_0
                             61 	.globl _TCON_IT0
                             62 	.globl _TCON_RFERRIF
                             63 	.globl _TCON_IT1
                             64 	.globl _TCON_URX0IF
                             65 	.globl _TCON_ADCIF
                             66 	.globl _TCON_URX1IF
                             67 	.globl _P0_0
                             68 	.globl _P0_1
                             69 	.globl _P0_2
                             70 	.globl _P0_3
                             71 	.globl _P0_4
                             72 	.globl _P0_5
                             73 	.globl _P0_6
                             74 	.globl _P0_7
                             75 	.globl _P2DIR
                             76 	.globl _P1DIR
                             77 	.globl _P0DIR
                             78 	.globl _U1GCR
                             79 	.globl _U1UCR
                             80 	.globl _U1BAUD
                             81 	.globl _U1BUF
                             82 	.globl _U1CSR
                             83 	.globl _P2INP
                             84 	.globl _P1INP
                             85 	.globl _P2SEL
                             86 	.globl _P1SEL
                             87 	.globl _P0SEL
                             88 	.globl _ADCCFG
                             89 	.globl _PERCFG
                             90 	.globl _B
                             91 	.globl _T4CC1
                             92 	.globl _T4CCTL1
                             93 	.globl _T4CC0
                             94 	.globl _T4CCTL0
                             95 	.globl _T4CTL
                             96 	.globl _T4CNT
                             97 	.globl _RFIF
                             98 	.globl _IRCON2
                             99 	.globl _T1CCTL2
                            100 	.globl _T1CCTL1
                            101 	.globl _T1CCTL0
                            102 	.globl _T1CTL
                            103 	.globl _T1CNTH
                            104 	.globl _T1CNTL
                            105 	.globl _RFST
                            106 	.globl _ACC
                            107 	.globl _T1CC2H
                            108 	.globl _T1CC2L
                            109 	.globl _T1CC1H
                            110 	.globl _T1CC1L
                            111 	.globl _T1CC0H
                            112 	.globl _T1CC0L
                            113 	.globl _RFD
                            114 	.globl _TIMIF
                            115 	.globl _DMAREQ
                            116 	.globl _DMAARM
                            117 	.globl _DMA0CFGH
                            118 	.globl _DMA0CFGL
                            119 	.globl _DMA1CFGH
                            120 	.globl _DMA1CFGL
                            121 	.globl _DMAIRQ
                            122 	.globl _PSW
                            123 	.globl _T3CC1
                            124 	.globl _T3CCTL1
                            125 	.globl _T3CC0
                            126 	.globl _T3CCTL0
                            127 	.globl _T3CTL
                            128 	.globl _T3CNT
                            129 	.globl _WDCTL
                            130 	.globl _T2CON
                            131 	.globl _MEMCTR
                            132 	.globl _CLKCON
                            133 	.globl _U0GCR
                            134 	.globl _U0UCR
                            135 	.globl _T2CNF
                            136 	.globl _U0BAUD
                            137 	.globl _U0BUF
                            138 	.globl _IRCON
                            139 	.globl _SLEEP
                            140 	.globl _RNDH
                            141 	.globl _RNDL
                            142 	.globl _ADCH
                            143 	.globl _ADCL
                            144 	.globl _IP1
                            145 	.globl _IEN1
                            146 	.globl _RCCTL
                            147 	.globl _ADCCON3
                            148 	.globl _ADCCON2
                            149 	.globl _ADCCON1
                            150 	.globl _ENCCS
                            151 	.globl _ENCDO
                            152 	.globl _ENCDI
                            153 	.globl _FWDATA
                            154 	.globl _FCTL
                            155 	.globl _FADDRH
                            156 	.globl _FADDRL
                            157 	.globl _FWT
                            158 	.globl _IP0
                            159 	.globl _IEN0
                            160 	.globl _IE
                            161 	.globl _T2THD
                            162 	.globl _T2TLD
                            163 	.globl _T2CAPHPH
                            164 	.globl _T2CAPLPL
                            165 	.globl _T2OF2
                            166 	.globl _T2OF1
                            167 	.globl _T2OF0
                            168 	.globl _P2
                            169 	.globl _PSBANK
                            170 	.globl _FMAP
                            171 	.globl _T2PEROF2
                            172 	.globl _T2PEROF1
                            173 	.globl _T2PEROF0
                            174 	.globl _S1CON
                            175 	.globl _IEN2
                            176 	.globl _HSRC
                            177 	.globl _S0CON
                            178 	.globl _ST2
                            179 	.globl _ST1
                            180 	.globl _ST0
                            181 	.globl _T2CMP
                            182 	.globl __XPAGE
                            183 	.globl _DPS
                            184 	.globl _RFIM
                            185 	.globl _P1
                            186 	.globl _P0INP
                            187 	.globl _P1IEN
                            188 	.globl _PICTL
                            189 	.globl _P2IFG
                            190 	.globl _P1IFG
                            191 	.globl _P0IFG
                            192 	.globl _TCON
                            193 	.globl _PCON
                            194 	.globl _U0CSR
                            195 	.globl _DPH1
                            196 	.globl _DPL1
                            197 	.globl _DPH0
                            198 	.globl _DPL0
                            199 	.globl _SP
                            200 	.globl _P0
                            201 	.globl _ADC_SHADOW
                            202 	.globl _U1BUF_SHADOW
                            203 	.globl _RFD_SHADOW
                            204 	.globl _U0BUF_SHADOW
                            205 	.globl _RFSTATUS
                            206 	.globl _CHIPID
                            207 	.globl _CHVER
                            208 	.globl _FSMTC1
                            209 	.globl _RXFIFOCNT
                            210 	.globl _IOCFG3
                            211 	.globl _IOCFG2
                            212 	.globl _IOCFG1
                            213 	.globl _IOCFG0
                            214 	.globl _SHORTADDRL
                            215 	.globl _SHORTADDRH
                            216 	.globl _PANIDL
                            217 	.globl _PANIDH
                            218 	.globl _IEEE_ADDR7
                            219 	.globl _IEEE_ADDR6
                            220 	.globl _IEEE_ADDR5
                            221 	.globl _IEEE_ADDR4
                            222 	.globl _IEEE_ADDR3
                            223 	.globl _IEEE_ADDR2
                            224 	.globl _IEEE_ADDR1
                            225 	.globl _IEEE_ADDR0
                            226 	.globl _DACTSTL
                            227 	.globl _DACTSTH
                            228 	.globl _ADCTSTL
                            229 	.globl _ADCTSTH
                            230 	.globl _FSMSTATE
                            231 	.globl _AGCCTRLL
                            232 	.globl _AGCCTRLH
                            233 	.globl _MANORL
                            234 	.globl _MANORH
                            235 	.globl _MANANDL
                            236 	.globl _MANANDH
                            237 	.globl _FSMTCL
                            238 	.globl _FSMTCH
                            239 	.globl _RFPWR
                            240 	.globl _CSPT
                            241 	.globl _CSPCTRL
                            242 	.globl _CSPZ
                            243 	.globl _CSPY
                            244 	.globl _CSPX
                            245 	.globl _FSCTRLL
                            246 	.globl _FSCTRLH
                            247 	.globl _RXCTRL1L
                            248 	.globl _RXCTRL1H
                            249 	.globl _RXCTRL0L
                            250 	.globl _RXCTRL0H
                            251 	.globl _TXCTRLL
                            252 	.globl _TXCTRLH
                            253 	.globl _SYNCWORDL
                            254 	.globl _SYNCWORDH
                            255 	.globl _RSSIL
                            256 	.globl _RSSIH
                            257 	.globl _MDMCTRL1L
                            258 	.globl _MDMCTRL1H
                            259 	.globl _MDMCTRL0L
                            260 	.globl _MDMCTRL0H
                            261 	.globl _rmh_open
                            262 	.globl _rmh_close
                            263 	.globl _rmh_send
                            264 ;--------------------------------------------------------
                            265 ; special function registers
                            266 ;--------------------------------------------------------
                            267 	.area RSEG    (ABS,DATA)
   0000                     268 	.org 0x0000
                    0080    269 _P0	=	0x0080
                    0081    270 _SP	=	0x0081
                    0082    271 _DPL0	=	0x0082
                    0083    272 _DPH0	=	0x0083
                    0084    273 _DPL1	=	0x0084
                    0085    274 _DPH1	=	0x0085
                    0086    275 _U0CSR	=	0x0086
                    0087    276 _PCON	=	0x0087
                    0088    277 _TCON	=	0x0088
                    0089    278 _P0IFG	=	0x0089
                    008A    279 _P1IFG	=	0x008a
                    008B    280 _P2IFG	=	0x008b
                    008C    281 _PICTL	=	0x008c
                    008D    282 _P1IEN	=	0x008d
                    008F    283 _P0INP	=	0x008f
                    0090    284 _P1	=	0x0090
                    0091    285 _RFIM	=	0x0091
                    0092    286 _DPS	=	0x0092
                    0093    287 __XPAGE	=	0x0093
                    0094    288 _T2CMP	=	0x0094
                    0095    289 _ST0	=	0x0095
                    0096    290 _ST1	=	0x0096
                    0097    291 _ST2	=	0x0097
                    0098    292 _S0CON	=	0x0098
                    0099    293 _HSRC	=	0x0099
                    009A    294 _IEN2	=	0x009a
                    009B    295 _S1CON	=	0x009b
                    009C    296 _T2PEROF0	=	0x009c
                    009D    297 _T2PEROF1	=	0x009d
                    009E    298 _T2PEROF2	=	0x009e
                    009F    299 _FMAP	=	0x009f
                    009F    300 _PSBANK	=	0x009f
                    00A0    301 _P2	=	0x00a0
                    00A1    302 _T2OF0	=	0x00a1
                    00A2    303 _T2OF1	=	0x00a2
                    00A3    304 _T2OF2	=	0x00a3
                    00A4    305 _T2CAPLPL	=	0x00a4
                    00A5    306 _T2CAPHPH	=	0x00a5
                    00A6    307 _T2TLD	=	0x00a6
                    00A7    308 _T2THD	=	0x00a7
                    00A8    309 _IE	=	0x00a8
                    00A8    310 _IEN0	=	0x00a8
                    00A9    311 _IP0	=	0x00a9
                    00AB    312 _FWT	=	0x00ab
                    00AC    313 _FADDRL	=	0x00ac
                    00AD    314 _FADDRH	=	0x00ad
                    00AE    315 _FCTL	=	0x00ae
                    00AF    316 _FWDATA	=	0x00af
                    00B1    317 _ENCDI	=	0x00b1
                    00B2    318 _ENCDO	=	0x00b2
                    00B3    319 _ENCCS	=	0x00b3
                    00B4    320 _ADCCON1	=	0x00b4
                    00B5    321 _ADCCON2	=	0x00b5
                    00B6    322 _ADCCON3	=	0x00b6
                    00B7    323 _RCCTL	=	0x00b7
                    00B8    324 _IEN1	=	0x00b8
                    00B9    325 _IP1	=	0x00b9
                    00BA    326 _ADCL	=	0x00ba
                    00BB    327 _ADCH	=	0x00bb
                    00BC    328 _RNDL	=	0x00bc
                    00BD    329 _RNDH	=	0x00bd
                    00BE    330 _SLEEP	=	0x00be
                    00C0    331 _IRCON	=	0x00c0
                    00C1    332 _U0BUF	=	0x00c1
                    00C2    333 _U0BAUD	=	0x00c2
                    00C3    334 _T2CNF	=	0x00c3
                    00C4    335 _U0UCR	=	0x00c4
                    00C5    336 _U0GCR	=	0x00c5
                    00C6    337 _CLKCON	=	0x00c6
                    00C7    338 _MEMCTR	=	0x00c7
                    00C8    339 _T2CON	=	0x00c8
                    00C9    340 _WDCTL	=	0x00c9
                    00CA    341 _T3CNT	=	0x00ca
                    00CB    342 _T3CTL	=	0x00cb
                    00CC    343 _T3CCTL0	=	0x00cc
                    00CD    344 _T3CC0	=	0x00cd
                    00CE    345 _T3CCTL1	=	0x00ce
                    00CF    346 _T3CC1	=	0x00cf
                    00D0    347 _PSW	=	0x00d0
                    00D1    348 _DMAIRQ	=	0x00d1
                    00D2    349 _DMA1CFGL	=	0x00d2
                    00D3    350 _DMA1CFGH	=	0x00d3
                    00D4    351 _DMA0CFGL	=	0x00d4
                    00D5    352 _DMA0CFGH	=	0x00d5
                    00D6    353 _DMAARM	=	0x00d6
                    00D7    354 _DMAREQ	=	0x00d7
                    00D8    355 _TIMIF	=	0x00d8
                    00D9    356 _RFD	=	0x00d9
                    00DA    357 _T1CC0L	=	0x00da
                    00DB    358 _T1CC0H	=	0x00db
                    00DC    359 _T1CC1L	=	0x00dc
                    00DD    360 _T1CC1H	=	0x00dd
                    00DE    361 _T1CC2L	=	0x00de
                    00DF    362 _T1CC2H	=	0x00df
                    00E0    363 _ACC	=	0x00e0
                    00E1    364 _RFST	=	0x00e1
                    00E2    365 _T1CNTL	=	0x00e2
                    00E3    366 _T1CNTH	=	0x00e3
                    00E4    367 _T1CTL	=	0x00e4
                    00E5    368 _T1CCTL0	=	0x00e5
                    00E6    369 _T1CCTL1	=	0x00e6
                    00E7    370 _T1CCTL2	=	0x00e7
                    00E8    371 _IRCON2	=	0x00e8
                    00E9    372 _RFIF	=	0x00e9
                    00EA    373 _T4CNT	=	0x00ea
                    00EB    374 _T4CTL	=	0x00eb
                    00EC    375 _T4CCTL0	=	0x00ec
                    00ED    376 _T4CC0	=	0x00ed
                    00EE    377 _T4CCTL1	=	0x00ee
                    00EF    378 _T4CC1	=	0x00ef
                    00F0    379 _B	=	0x00f0
                    00F1    380 _PERCFG	=	0x00f1
                    00F2    381 _ADCCFG	=	0x00f2
                    00F3    382 _P0SEL	=	0x00f3
                    00F4    383 _P1SEL	=	0x00f4
                    00F5    384 _P2SEL	=	0x00f5
                    00F6    385 _P1INP	=	0x00f6
                    00F7    386 _P2INP	=	0x00f7
                    00F8    387 _U1CSR	=	0x00f8
                    00F9    388 _U1BUF	=	0x00f9
                    00FA    389 _U1BAUD	=	0x00fa
                    00FB    390 _U1UCR	=	0x00fb
                    00FC    391 _U1GCR	=	0x00fc
                    00FD    392 _P0DIR	=	0x00fd
                    00FE    393 _P1DIR	=	0x00fe
                    00FF    394 _P2DIR	=	0x00ff
                            395 ;--------------------------------------------------------
                            396 ; special function bits
                            397 ;--------------------------------------------------------
                            398 	.area RSEG    (ABS,DATA)
   0000                     399 	.org 0x0000
                    0087    400 _P0_7	=	0x0087
                    0086    401 _P0_6	=	0x0086
                    0085    402 _P0_5	=	0x0085
                    0084    403 _P0_4	=	0x0084
                    0083    404 _P0_3	=	0x0083
                    0082    405 _P0_2	=	0x0082
                    0081    406 _P0_1	=	0x0081
                    0080    407 _P0_0	=	0x0080
                    008F    408 _TCON_URX1IF	=	0x008f
                    008D    409 _TCON_ADCIF	=	0x008d
                    008B    410 _TCON_URX0IF	=	0x008b
                    008A    411 _TCON_IT1	=	0x008a
                    0089    412 _TCON_RFERRIF	=	0x0089
                    0088    413 _TCON_IT0	=	0x0088
                    0090    414 _P1_0	=	0x0090
                    0091    415 _P1_1	=	0x0091
                    0092    416 _P1_2	=	0x0092
                    0093    417 _P1_3	=	0x0093
                    0094    418 _P1_4	=	0x0094
                    0095    419 _P1_5	=	0x0095
                    0096    420 _P1_6	=	0x0096
                    0097    421 _P1_7	=	0x0097
                    0099    422 _S0CON_ENCIF_1	=	0x0099
                    0098    423 _S0CON_ENCIF_0	=	0x0098
                    00A0    424 _P2_0	=	0x00a0
                    00A1    425 _P2_1	=	0x00a1
                    00A2    426 _P2_2	=	0x00a2
                    00A3    427 _P2_3	=	0x00a3
                    00A4    428 _P2_4	=	0x00a4
                    00AF    429 _EA	=	0x00af
                    00AF    430 _IEN0_EA	=	0x00af
                    00AD    431 _IEN0_STIE	=	0x00ad
                    00AC    432 _IEN0_ENCIE	=	0x00ac
                    00AB    433 _IEN0_URX1IE	=	0x00ab
                    00AA    434 _IEN0_URX0IE	=	0x00aa
                    00A9    435 _IEN0_ADCIE	=	0x00a9
                    00A8    436 _IEN0_RFERRIE	=	0x00a8
                    00BD    437 _IEN1_P0IE	=	0x00bd
                    00BC    438 _IEN1_T4IE	=	0x00bc
                    00BB    439 _IEN1_T3IE	=	0x00bb
                    00BA    440 _IEN1_T2IE	=	0x00ba
                    00B9    441 _IEN1_T1IE	=	0x00b9
                    00B8    442 _IEN1_DMAIE	=	0x00b8
                    00C7    443 _IRCON_STIF	=	0x00c7
                    00C5    444 _IRCON_P0IF	=	0x00c5
                    00C4    445 _IRCON_T4IF	=	0x00c4
                    00C3    446 _IRCON_T3IF	=	0x00c3
                    00C2    447 _IRCON_T2IF	=	0x00c2
                    00C1    448 _IRCON_T1IF	=	0x00c1
                    00C0    449 _IRCON_DMAIF	=	0x00c0
                    00D0    450 _P	=	0x00d0
                    00D1    451 _F1	=	0x00d1
                    00D2    452 _OV	=	0x00d2
                    00D3    453 _RS0	=	0x00d3
                    00D4    454 _RS1	=	0x00d4
                    00D5    455 _F0	=	0x00d5
                    00D6    456 _AC	=	0x00d6
                    00D7    457 _CY	=	0x00d7
                    00EC    458 _IRCON2_WDTIF	=	0x00ec
                    00EB    459 _IRCON2_P1IF	=	0x00eb
                    00EA    460 _IRCON2_UTX1IF	=	0x00ea
                    00E9    461 _IRCON2_UTX0IF	=	0x00e9
                    00E8    462 _IRCON2_P2IF	=	0x00e8
                            463 ;--------------------------------------------------------
                            464 ; overlayable register banks
                            465 ;--------------------------------------------------------
                            466 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     467 	.ds 8
                            468 ;--------------------------------------------------------
                            469 ; internal ram data
                            470 ;--------------------------------------------------------
                            471 	.area DSEG    (DATA)
                            472 ;--------------------------------------------------------
                            473 ; overlayable items in internal ram 
                            474 ;--------------------------------------------------------
                            475 	.area OSEG    (OVR,DATA)
                            476 ;--------------------------------------------------------
                            477 ; indirectly addressable internal ram data
                            478 ;--------------------------------------------------------
                            479 	.area ISEG    (DATA)
                            480 ;--------------------------------------------------------
                            481 ; absolute internal ram data
                            482 ;--------------------------------------------------------
                            483 	.area IABS    (ABS,DATA)
                            484 	.area IABS    (ABS,DATA)
                            485 ;--------------------------------------------------------
                            486 ; bit data
                            487 ;--------------------------------------------------------
                            488 	.area BSEG    (BIT)
                            489 ;--------------------------------------------------------
                            490 ; paged external ram data
                            491 ;--------------------------------------------------------
                            492 	.area PSEG    (PAG,XDATA)
                            493 ;--------------------------------------------------------
                            494 ; external ram data
                            495 ;--------------------------------------------------------
                            496 	.area XSEG    (XDATA)
                    DF02    497 _MDMCTRL0H	=	0xdf02
                    DF03    498 _MDMCTRL0L	=	0xdf03
                    DF04    499 _MDMCTRL1H	=	0xdf04
                    DF05    500 _MDMCTRL1L	=	0xdf05
                    DF06    501 _RSSIH	=	0xdf06
                    DF07    502 _RSSIL	=	0xdf07
                    DF08    503 _SYNCWORDH	=	0xdf08
                    DF09    504 _SYNCWORDL	=	0xdf09
                    DF0A    505 _TXCTRLH	=	0xdf0a
                    DF0B    506 _TXCTRLL	=	0xdf0b
                    DF0C    507 _RXCTRL0H	=	0xdf0c
                    DF0D    508 _RXCTRL0L	=	0xdf0d
                    DF0E    509 _RXCTRL1H	=	0xdf0e
                    DF0F    510 _RXCTRL1L	=	0xdf0f
                    DF10    511 _FSCTRLH	=	0xdf10
                    DF11    512 _FSCTRLL	=	0xdf11
                    DF12    513 _CSPX	=	0xdf12
                    DF13    514 _CSPY	=	0xdf13
                    DF14    515 _CSPZ	=	0xdf14
                    DF15    516 _CSPCTRL	=	0xdf15
                    DF16    517 _CSPT	=	0xdf16
                    DF17    518 _RFPWR	=	0xdf17
                    DF20    519 _FSMTCH	=	0xdf20
                    DF21    520 _FSMTCL	=	0xdf21
                    DF22    521 _MANANDH	=	0xdf22
                    DF23    522 _MANANDL	=	0xdf23
                    DF24    523 _MANORH	=	0xdf24
                    DF25    524 _MANORL	=	0xdf25
                    DF26    525 _AGCCTRLH	=	0xdf26
                    DF27    526 _AGCCTRLL	=	0xdf27
                    DF39    527 _FSMSTATE	=	0xdf39
                    DF3A    528 _ADCTSTH	=	0xdf3a
                    DF3B    529 _ADCTSTL	=	0xdf3b
                    DF3C    530 _DACTSTH	=	0xdf3c
                    DF3D    531 _DACTSTL	=	0xdf3d
                    DF43    532 _IEEE_ADDR0	=	0xdf43
                    DF44    533 _IEEE_ADDR1	=	0xdf44
                    DF45    534 _IEEE_ADDR2	=	0xdf45
                    DF46    535 _IEEE_ADDR3	=	0xdf46
                    DF47    536 _IEEE_ADDR4	=	0xdf47
                    DF48    537 _IEEE_ADDR5	=	0xdf48
                    DF49    538 _IEEE_ADDR6	=	0xdf49
                    DF4A    539 _IEEE_ADDR7	=	0xdf4a
                    DF4B    540 _PANIDH	=	0xdf4b
                    DF4C    541 _PANIDL	=	0xdf4c
                    DF4D    542 _SHORTADDRH	=	0xdf4d
                    DF4E    543 _SHORTADDRL	=	0xdf4e
                    DF4F    544 _IOCFG0	=	0xdf4f
                    DF50    545 _IOCFG1	=	0xdf50
                    DF51    546 _IOCFG2	=	0xdf51
                    DF52    547 _IOCFG3	=	0xdf52
                    DF53    548 _RXFIFOCNT	=	0xdf53
                    DF54    549 _FSMTC1	=	0xdf54
                    DF60    550 _CHVER	=	0xdf60
                    DF61    551 _CHIPID	=	0xdf61
                    DF62    552 _RFSTATUS	=	0xdf62
                    DFC1    553 _U0BUF_SHADOW	=	0xdfc1
                    DFD9    554 _RFD_SHADOW	=	0xdfd9
                    DFF9    555 _U1BUF_SHADOW	=	0xdff9
                    DFBA    556 _ADC_SHADOW	=	0xdfba
                            557 ;--------------------------------------------------------
                            558 ; absolute external ram data
                            559 ;--------------------------------------------------------
                            560 	.area XABS    (ABS,XDATA)
                            561 ;--------------------------------------------------------
                            562 ; external initialized ram data
                            563 ;--------------------------------------------------------
                            564 	.area XISEG   (XDATA)
                            565 	.area HOME    (CODE)
                            566 	.area GSINIT0 (CODE)
                            567 	.area GSINIT1 (CODE)
                            568 	.area GSINIT2 (CODE)
                            569 	.area GSINIT3 (CODE)
                            570 	.area GSINIT4 (CODE)
                            571 	.area GSINIT5 (CODE)
                            572 	.area GSINIT  (CODE)
                            573 	.area GSFINAL (CODE)
                            574 	.area CSEG    (CODE)
                            575 ;--------------------------------------------------------
                            576 ; global & static initialisations
                            577 ;--------------------------------------------------------
                            578 	.area HOME    (CODE)
                            579 	.area GSINIT  (CODE)
                            580 	.area GSFINAL (CODE)
                            581 	.area GSINIT  (CODE)
                            582 ;--------------------------------------------------------
                            583 ; Home
                            584 ;--------------------------------------------------------
                            585 	.area HOME    (CODE)
                            586 	.area HOME    (CODE)
                            587 ;--------------------------------------------------------
                            588 ; code
                            589 ;--------------------------------------------------------
                            590 	.area CSEG    (CODE)
                            591 ;------------------------------------------------------------
                            592 ;Allocation info for local variables in function 'received'
                            593 ;------------------------------------------------------------
                            594 ;from                      Allocated to stack - offset -5
                            595 ;seqno                     Allocated to stack - offset -6
                            596 ;uc                        Allocated to stack - offset 1
                            597 ;c                         Allocated to stack - offset 4
                            598 ;msg                       Allocated to stack - offset 7
                            599 ;nexthop                   Allocated to stack - offset 10
                            600 ;sloc0                     Allocated to stack - offset 13
                            601 ;sloc1                     Allocated to stack - offset 15
                            602 ;------------------------------------------------------------
                            603 ;	../../../core/net/rime/rmh.c:67: received(struct runicast_conn *uc, const rimeaddr_t *from, uint8_t seqno)
                            604 ;	-----------------------------------------
                            605 ;	 function received
                            606 ;	-----------------------------------------
   0000                     607 _received:
                    0002    608 	ar2 = 0x02
                    0003    609 	ar3 = 0x03
                    0004    610 	ar4 = 0x04
                    0005    611 	ar5 = 0x05
                    0006    612 	ar6 = 0x06
                    0007    613 	ar7 = 0x07
                    0000    614 	ar0 = 0x00
                    0001    615 	ar1 = 0x01
   0000 C0*00               616 	push	_bp
   0002 85 81*00            617 	mov	_bp,sp
   0005 C0 82               618 	push	dpl
   0007 C0 83               619 	push	dph
   0009 C0 F0               620 	push	b
   000B E5 81               621 	mov	a,sp
   000D 24 0C               622 	add	a,#0x0c
   000F F5 81               623 	mov	sp,a
                            624 ;	../../../core/net/rime/rmh.c:69: struct rmh_conn *c = (struct rmh_conn *)uc;
   0011 A8*00               625 	mov	r0,_bp
   0013 08                  626 	inc	r0
   0014 E5*00               627 	mov	a,_bp
   0016 24 04               628 	add	a,#0x04
   0018 F9                  629 	mov	r1,a
   0019 E6                  630 	mov	a,@r0
   001A F7                  631 	mov	@r1,a
   001B 08                  632 	inc	r0
   001C 09                  633 	inc	r1
   001D E6                  634 	mov	a,@r0
   001E F7                  635 	mov	@r1,a
   001F 08                  636 	inc	r0
   0020 09                  637 	inc	r1
   0021 E6                  638 	mov	a,@r0
   0022 F7                  639 	mov	@r1,a
                            640 ;	../../../core/net/rime/rmh.c:70: struct data_hdr *msg = packetbuf_dataptr();
   0023 12s00r00            641 	lcall	_packetbuf_dataptr
   0026 AA 82               642 	mov	r2,dpl
   0028 AB 83               643 	mov	r3,dph
   002A AC F0               644 	mov	r4,b
   002C E5*00               645 	mov	a,_bp
   002E 24 07               646 	add	a,#0x07
   0030 F8                  647 	mov	r0,a
   0031 A6 02               648 	mov	@r0,ar2
   0033 08                  649 	inc	r0
   0034 A6 03               650 	mov	@r0,ar3
   0036 08                  651 	inc	r0
   0037 A6 04               652 	mov	@r0,ar4
                            653 ;	../../../core/net/rime/rmh.c:78: if(rimeaddr_cmp(&msg->dest, &rimeaddr_node_addr)) {
   0039 74r00               654 	mov	a,#_rimeaddr_node_addr
   003B C0 E0               655 	push	acc
   003D 74s00               656 	mov	a,#(_rimeaddr_node_addr >> 8)
   003F C0 E0               657 	push	acc
   0041 E4                  658 	clr	a
   0042 C0 E0               659 	push	acc
   0044 E5*00               660 	mov	a,_bp
   0046 24 07               661 	add	a,#0x07
   0048 F8                  662 	mov	r0,a
   0049 86 82               663 	mov	dpl,@r0
   004B 08                  664 	inc	r0
   004C 86 83               665 	mov	dph,@r0
   004E 08                  666 	inc	r0
   004F 86 F0               667 	mov	b,@r0
   0051 12s00r00            668 	lcall	_rimeaddr_cmp
   0054 AA 82               669 	mov	r2,dpl
   0056 AB 83               670 	mov	r3,dph
   0058 15 81               671 	dec	sp
   005A 15 81               672 	dec	sp
   005C 15 81               673 	dec	sp
   005E EA                  674 	mov	a,r2
   005F 4B                  675 	orl	a,r3
   0060 70 03               676 	jnz	00116$
   0062 02s00rFD            677 	ljmp	00108$
   0065                     678 00116$:
                            679 ;	../../../core/net/rime/rmh.c:80: packetbuf_hdrreduce(sizeof(struct data_hdr));
   0065 90 00 06            680 	mov	dptr,#0x0006
   0068 12s00r00            681 	lcall	_packetbuf_hdrreduce
                            682 ;	../../../core/net/rime/rmh.c:81: if(c->cb->recv) {
   006B A8*00               683 	mov	r0,_bp
   006D 08                  684 	inc	r0
   006E 74 36               685 	mov	a,#0x36
   0070 26                  686 	add	a,@r0
   0071 FA                  687 	mov	r2,a
   0072 E4                  688 	clr	a
   0073 08                  689 	inc	r0
   0074 36                  690 	addc	a,@r0
   0075 FB                  691 	mov	r3,a
   0076 08                  692 	inc	r0
   0077 86 04               693 	mov	ar4,@r0
   0079 8A 82               694 	mov	dpl,r2
   007B 8B 83               695 	mov	dph,r3
   007D 8C F0               696 	mov	b,r4
   007F 12s00r00            697 	lcall	__gptrget
   0082 FA                  698 	mov	r2,a
   0083 A3                  699 	inc	dptr
   0084 12s00r00            700 	lcall	__gptrget
   0087 FB                  701 	mov	r3,a
   0088 A3                  702 	inc	dptr
   0089 12s00r00            703 	lcall	__gptrget
   008C FC                  704 	mov	r4,a
   008D 8A 82               705 	mov	dpl,r2
   008F 8B 83               706 	mov	dph,r3
   0091 8C F0               707 	mov	b,r4
   0093 12s00r00            708 	lcall	__gptrget
   0096 FA                  709 	mov	r2,a
   0097 A3                  710 	inc	dptr
   0098 12s00r00            711 	lcall	__gptrget
   009B FB                  712 	mov	r3,a
   009C 4A                  713 	orl	a,r2
   009D 70 03               714 	jnz	00117$
   009F 02s02r45            715 	ljmp	00110$
   00A2                     716 00117$:
                            717 ;	../../../core/net/rime/rmh.c:82: c->cb->recv(c, &msg->originator, msg->hops);
   00A2 E5*00               718 	mov	a,_bp
   00A4 24 07               719 	add	a,#0x07
   00A6 F8                  720 	mov	r0,a
   00A7 74 04               721 	mov	a,#0x04
   00A9 26                  722 	add	a,@r0
   00AA FC                  723 	mov	r4,a
   00AB E4                  724 	clr	a
   00AC 08                  725 	inc	r0
   00AD 36                  726 	addc	a,@r0
   00AE FD                  727 	mov	r5,a
   00AF 08                  728 	inc	r0
   00B0 86 06               729 	mov	ar6,@r0
   00B2 8C 82               730 	mov	dpl,r4
   00B4 8D 83               731 	mov	dph,r5
   00B6 8E F0               732 	mov	b,r6
   00B8 12s00r00            733 	lcall	__gptrget
   00BB FC                  734 	mov	r4,a
   00BC E5*00               735 	mov	a,_bp
   00BE 24 07               736 	add	a,#0x07
   00C0 F8                  737 	mov	r0,a
   00C1 74 02               738 	mov	a,#0x02
   00C3 26                  739 	add	a,@r0
   00C4 FD                  740 	mov	r5,a
   00C5 E4                  741 	clr	a
   00C6 08                  742 	inc	r0
   00C7 36                  743 	addc	a,@r0
   00C8 FE                  744 	mov	r6,a
   00C9 08                  745 	inc	r0
   00CA 86 07               746 	mov	ar7,@r0
   00CC C0 02               747 	push	ar2
   00CE C0 03               748 	push	ar3
   00D0 C0 04               749 	push	ar4
   00D2 C0 05               750 	push	ar5
   00D4 C0 06               751 	push	ar6
   00D6 C0 07               752 	push	ar7
   00D8 74rF0               753 	mov	a,#00118$
   00DA C0 E0               754 	push	acc
   00DC 74s00               755 	mov	a,#(00118$ >> 8)
   00DE C0 E0               756 	push	acc
   00E0 C0 02               757 	push	ar2
   00E2 C0 03               758 	push	ar3
   00E4 A8*00               759 	mov	r0,_bp
   00E6 08                  760 	inc	r0
   00E7 86 82               761 	mov	dpl,@r0
   00E9 08                  762 	inc	r0
   00EA 86 83               763 	mov	dph,@r0
   00EC 08                  764 	inc	r0
   00ED 86 F0               765 	mov	b,@r0
   00EF 22                  766 	ret
   00F0                     767 00118$:
   00F0 E5 81               768 	mov	a,sp
   00F2 24 FC               769 	add	a,#0xfc
   00F4 F5 81               770 	mov	sp,a
   00F6 D0 03               771 	pop	ar3
   00F8 D0 02               772 	pop	ar2
   00FA 02s02r45            773 	ljmp	00110$
   00FD                     774 00108$:
                            775 ;	../../../core/net/rime/rmh.c:85: nexthop = NULL;
   00FD E5*00               776 	mov	a,_bp
   00FF 24 0A               777 	add	a,#0x0a
   0101 F8                  778 	mov	r0,a
   0102 E4                  779 	clr	a
   0103 F6                  780 	mov	@r0,a
   0104 08                  781 	inc	r0
   0105 F6                  782 	mov	@r0,a
   0106 08                  783 	inc	r0
   0107 76 00               784 	mov	@r0,#0x00
                            785 ;	../../../core/net/rime/rmh.c:86: if(c->cb->forward) {
   0109 A8*00               786 	mov	r0,_bp
   010B 08                  787 	inc	r0
   010C 74 36               788 	mov	a,#0x36
   010E 26                  789 	add	a,@r0
   010F FD                  790 	mov	r5,a
   0110 E4                  791 	clr	a
   0111 08                  792 	inc	r0
   0112 36                  793 	addc	a,@r0
   0113 FE                  794 	mov	r6,a
   0114 08                  795 	inc	r0
   0115 86 07               796 	mov	ar7,@r0
   0117 8D 82               797 	mov	dpl,r5
   0119 8E 83               798 	mov	dph,r6
   011B 8F F0               799 	mov	b,r7
   011D 12s00r00            800 	lcall	__gptrget
   0120 FD                  801 	mov	r5,a
   0121 A3                  802 	inc	dptr
   0122 12s00r00            803 	lcall	__gptrget
   0125 FE                  804 	mov	r6,a
   0126 A3                  805 	inc	dptr
   0127 12s00r00            806 	lcall	__gptrget
   012A FF                  807 	mov	r7,a
   012B 74 02               808 	mov	a,#0x02
   012D 2D                  809 	add	a,r5
   012E FD                  810 	mov	r5,a
   012F E4                  811 	clr	a
   0130 3E                  812 	addc	a,r6
   0131 FE                  813 	mov	r6,a
   0132 8D 82               814 	mov	dpl,r5
   0134 8E 83               815 	mov	dph,r6
   0136 8F F0               816 	mov	b,r7
   0138 12s00r00            817 	lcall	__gptrget
   013B FA                  818 	mov	r2,a
   013C A3                  819 	inc	dptr
   013D 12s00r00            820 	lcall	__gptrget
   0140 FB                  821 	mov	r3,a
   0141 4A                  822 	orl	a,r2
   0142 70 03               823 	jnz	00119$
   0144 02s01rD2            824 	ljmp	00104$
   0147                     825 00119$:
                            826 ;	../../../core/net/rime/rmh.c:88: &msg->dest, from, msg->hops);
   0147 E5*00               827 	mov	a,_bp
   0149 24 07               828 	add	a,#0x07
   014B F8                  829 	mov	r0,a
   014C 74 04               830 	mov	a,#0x04
   014E 26                  831 	add	a,@r0
   014F FF                  832 	mov	r7,a
   0150 E4                  833 	clr	a
   0151 08                  834 	inc	r0
   0152 36                  835 	addc	a,@r0
   0153 FD                  836 	mov	r5,a
   0154 08                  837 	inc	r0
   0155 86 06               838 	mov	ar6,@r0
   0157 8F 82               839 	mov	dpl,r7
   0159 8D 83               840 	mov	dph,r5
   015B 8E F0               841 	mov	b,r6
   015D 12s00r00            842 	lcall	__gptrget
   0160 FC                  843 	mov	r4,a
                            844 ;	../../../core/net/rime/rmh.c:87: nexthop = c->cb->forward(c, &msg->originator,
   0161 E5*00               845 	mov	a,_bp
   0163 24 07               846 	add	a,#0x07
   0165 F8                  847 	mov	r0,a
   0166 74 02               848 	mov	a,#0x02
   0168 26                  849 	add	a,@r0
   0169 FD                  850 	mov	r5,a
   016A E4                  851 	clr	a
   016B 08                  852 	inc	r0
   016C 36                  853 	addc	a,@r0
   016D FE                  854 	mov	r6,a
   016E 08                  855 	inc	r0
   016F 86 07               856 	mov	ar7,@r0
   0171 C0 02               857 	push	ar2
   0173 C0 03               858 	push	ar3
   0175 C0 04               859 	push	ar4
   0177 E5*00               860 	mov	a,_bp
   0179 24 FB               861 	add	a,#0xfb
   017B F8                  862 	mov	r0,a
   017C E6                  863 	mov	a,@r0
   017D C0 E0               864 	push	acc
   017F 08                  865 	inc	r0
   0180 E6                  866 	mov	a,@r0
   0181 C0 E0               867 	push	acc
   0183 08                  868 	inc	r0
   0184 E6                  869 	mov	a,@r0
   0185 C0 E0               870 	push	acc
   0187 E5*00               871 	mov	a,_bp
   0189 24 07               872 	add	a,#0x07
   018B F8                  873 	mov	r0,a
   018C E6                  874 	mov	a,@r0
   018D C0 E0               875 	push	acc
   018F 08                  876 	inc	r0
   0190 E6                  877 	mov	a,@r0
   0191 C0 E0               878 	push	acc
   0193 08                  879 	inc	r0
   0194 E6                  880 	mov	a,@r0
   0195 C0 E0               881 	push	acc
   0197 C0 05               882 	push	ar5
   0199 C0 06               883 	push	ar6
   019B C0 07               884 	push	ar7
   019D 74rB5               885 	mov	a,#00120$
   019F C0 E0               886 	push	acc
   01A1 74s01               887 	mov	a,#(00120$ >> 8)
   01A3 C0 E0               888 	push	acc
   01A5 C0 02               889 	push	ar2
   01A7 C0 03               890 	push	ar3
   01A9 A8*00               891 	mov	r0,_bp
   01AB 08                  892 	inc	r0
   01AC 86 82               893 	mov	dpl,@r0
   01AE 08                  894 	inc	r0
   01AF 86 83               895 	mov	dph,@r0
   01B1 08                  896 	inc	r0
   01B2 86 F0               897 	mov	b,@r0
   01B4 22                  898 	ret
   01B5                     899 00120$:
   01B5 AD 82               900 	mov	r5,dpl
   01B7 AE 83               901 	mov	r6,dph
   01B9 AF F0               902 	mov	r7,b
   01BB E5 81               903 	mov	a,sp
   01BD 24 F6               904 	add	a,#0xf6
   01BF F5 81               905 	mov	sp,a
   01C1 D0 03               906 	pop	ar3
   01C3 D0 02               907 	pop	ar2
   01C5 E5*00               908 	mov	a,_bp
   01C7 24 0A               909 	add	a,#0x0a
   01C9 F8                  910 	mov	r0,a
   01CA A6 05               911 	mov	@r0,ar5
   01CC 08                  912 	inc	r0
   01CD A6 06               913 	mov	@r0,ar6
   01CF 08                  914 	inc	r0
   01D0 A6 07               915 	mov	@r0,ar7
   01D2                     916 00104$:
                            917 ;	../../../core/net/rime/rmh.c:90: if(nexthop) {
   01D2 E5*00               918 	mov	a,_bp
   01D4 24 0A               919 	add	a,#0x0a
   01D6 F8                  920 	mov	r0,a
   01D7 E6                  921 	mov	a,@r0
   01D8 08                  922 	inc	r0
   01D9 46                  923 	orl	a,@r0
   01DA 08                  924 	inc	r0
   01DB 46                  925 	orl	a,@r0
   01DC 60 67               926 	jz	00110$
                            927 ;	../../../core/net/rime/rmh.c:92: msg->hops++;
   01DE E5*00               928 	mov	a,_bp
   01E0 24 07               929 	add	a,#0x07
   01E2 F8                  930 	mov	r0,a
   01E3 74 04               931 	mov	a,#0x04
   01E5 26                  932 	add	a,@r0
   01E6 FD                  933 	mov	r5,a
   01E7 E4                  934 	clr	a
   01E8 08                  935 	inc	r0
   01E9 36                  936 	addc	a,@r0
   01EA FE                  937 	mov	r6,a
   01EB 08                  938 	inc	r0
   01EC 86 07               939 	mov	ar7,@r0
   01EE 8D 82               940 	mov	dpl,r5
   01F0 8E 83               941 	mov	dph,r6
   01F2 8F F0               942 	mov	b,r7
   01F4 12s00r00            943 	lcall	__gptrget
   01F7 FA                  944 	mov	r2,a
   01F8 0A                  945 	inc	r2
   01F9 8D 82               946 	mov	dpl,r5
   01FB 8E 83               947 	mov	dph,r6
   01FD 8F F0               948 	mov	b,r7
   01FF EA                  949 	mov	a,r2
   0200 12s00r00            950 	lcall	__gptrput
                            951 ;	../../../core/net/rime/rmh.c:93: runicast_send(&c->c, nexthop, c->num_rexmit);
   0203 E5*00               952 	mov	a,_bp
   0205 24 04               953 	add	a,#0x04
   0207 F8                  954 	mov	r0,a
   0208 74 39               955 	mov	a,#0x39
   020A 26                  956 	add	a,@r0
   020B FA                  957 	mov	r2,a
   020C E4                  958 	clr	a
   020D 08                  959 	inc	r0
   020E 36                  960 	addc	a,@r0
   020F FB                  961 	mov	r3,a
   0210 08                  962 	inc	r0
   0211 86 04               963 	mov	ar4,@r0
   0213 8A 82               964 	mov	dpl,r2
   0215 8B 83               965 	mov	dph,r3
   0217 8C F0               966 	mov	b,r4
   0219 12s00r00            967 	lcall	__gptrget
   021C FA                  968 	mov	r2,a
   021D C0 02               969 	push	ar2
   021F E5*00               970 	mov	a,_bp
   0221 24 0A               971 	add	a,#0x0a
   0223 F8                  972 	mov	r0,a
   0224 E6                  973 	mov	a,@r0
   0225 C0 E0               974 	push	acc
   0227 08                  975 	inc	r0
   0228 E6                  976 	mov	a,@r0
   0229 C0 E0               977 	push	acc
   022B 08                  978 	inc	r0
   022C E6                  979 	mov	a,@r0
   022D C0 E0               980 	push	acc
   022F E5*00               981 	mov	a,_bp
   0231 24 04               982 	add	a,#0x04
   0233 F8                  983 	mov	r0,a
   0234 86 82               984 	mov	dpl,@r0
   0236 08                  985 	inc	r0
   0237 86 83               986 	mov	dph,@r0
   0239 08                  987 	inc	r0
   023A 86 F0               988 	mov	b,@r0
   023C 12s00r00            989 	lcall	_runicast_send
   023F E5 81               990 	mov	a,sp
   0241 24 FC               991 	add	a,#0xfc
   0243 F5 81               992 	mov	sp,a
   0245                     993 00110$:
   0245 85*00 81            994 	mov	sp,_bp
   0248 D0*00               995 	pop	_bp
   024A 22                  996 	ret
                            997 ;------------------------------------------------------------
                            998 ;Allocation info for local variables in function 'sent'
                            999 ;------------------------------------------------------------
                           1000 ;to                        Allocated to stack - offset -5
                           1001 ;retransmissions           Allocated to stack - offset -6
                           1002 ;c                         Allocated to registers 
                           1003 ;------------------------------------------------------------
                           1004 ;	../../../core/net/rime/rmh.c:99: sent(struct runicast_conn *c, const rimeaddr_t *to, uint8_t retransmissions)
                           1005 ;	-----------------------------------------
                           1006 ;	 function sent
                           1007 ;	-----------------------------------------
   024B                    1008 _sent:
   024B C0*00              1009 	push	_bp
   024D 85 81*00           1010 	mov	_bp,sp
                           1011 ;	../../../core/net/rime/rmh.c:102: }
   0250 D0*00              1012 	pop	_bp
   0252 22                 1013 	ret
                           1014 ;------------------------------------------------------------
                           1015 ;Allocation info for local variables in function 'timedout'
                           1016 ;------------------------------------------------------------
                           1017 ;to                        Allocated to stack - offset -5
                           1018 ;retransmissions           Allocated to stack - offset -6
                           1019 ;c                         Allocated to registers 
                           1020 ;------------------------------------------------------------
                           1021 ;	../../../core/net/rime/rmh.c:105: timedout(struct runicast_conn *c, const rimeaddr_t *to, uint8_t retransmissions)
                           1022 ;	-----------------------------------------
                           1023 ;	 function timedout
                           1024 ;	-----------------------------------------
   0253                    1025 _timedout:
   0253 C0*00              1026 	push	_bp
   0255 85 81*00           1027 	mov	_bp,sp
                           1028 ;	../../../core/net/rime/rmh.c:108: }
   0258 D0*00              1029 	pop	_bp
   025A 22                 1030 	ret
                           1031 ;------------------------------------------------------------
                           1032 ;Allocation info for local variables in function 'rmh_open'
                           1033 ;------------------------------------------------------------
                           1034 ;channel                   Allocated to stack - offset -4
                           1035 ;callbacks                 Allocated to stack - offset -7
                           1036 ;c                         Allocated to registers r2 r3 r4 
                           1037 ;------------------------------------------------------------
                           1038 ;	../../../core/net/rime/rmh.c:115: rmh_open(struct rmh_conn *c, uint16_t channel,
                           1039 ;	-----------------------------------------
                           1040 ;	 function rmh_open
                           1041 ;	-----------------------------------------
   025B                    1042 _rmh_open:
   025B C0*00              1043 	push	_bp
   025D 85 81*00           1044 	mov	_bp,sp
   0260 AA 82              1045 	mov	r2,dpl
   0262 AB 83              1046 	mov	r3,dph
   0264 AC F0              1047 	mov	r4,b
                           1048 ;	../../../core/net/rime/rmh.c:118: runicast_open(&c->c, channel, &data_callbacks);
   0266 C0 02              1049 	push	ar2
   0268 C0 03              1050 	push	ar3
   026A C0 04              1051 	push	ar4
   026C 74r00              1052 	mov	a,#_data_callbacks
   026E C0 E0              1053 	push	acc
   0270 74s00              1054 	mov	a,#(_data_callbacks >> 8)
   0272 C0 E0              1055 	push	acc
   0274 74 80              1056 	mov	a,#0x80
   0276 C0 E0              1057 	push	acc
   0278 E5*00              1058 	mov	a,_bp
   027A 24 FC              1059 	add	a,#0xfc
   027C F8                 1060 	mov	r0,a
   027D E6                 1061 	mov	a,@r0
   027E C0 E0              1062 	push	acc
   0280 08                 1063 	inc	r0
   0281 E6                 1064 	mov	a,@r0
   0282 C0 E0              1065 	push	acc
   0284 8A 82              1066 	mov	dpl,r2
   0286 8B 83              1067 	mov	dph,r3
   0288 8C F0              1068 	mov	b,r4
   028A 12s00r00           1069 	lcall	_runicast_open
   028D E5 81              1070 	mov	a,sp
   028F 24 FB              1071 	add	a,#0xfb
   0291 F5 81              1072 	mov	sp,a
   0293 D0 04              1073 	pop	ar4
   0295 D0 03              1074 	pop	ar3
   0297 D0 02              1075 	pop	ar2
                           1076 ;	../../../core/net/rime/rmh.c:119: c->cb = callbacks;
   0299 74 36              1077 	mov	a,#0x36
   029B 2A                 1078 	add	a,r2
   029C FA                 1079 	mov	r2,a
   029D E4                 1080 	clr	a
   029E 3B                 1081 	addc	a,r3
   029F FB                 1082 	mov	r3,a
   02A0 8A 82              1083 	mov	dpl,r2
   02A2 8B 83              1084 	mov	dph,r3
   02A4 8C F0              1085 	mov	b,r4
   02A6 E5*00              1086 	mov	a,_bp
   02A8 24 F9              1087 	add	a,#0xf9
   02AA F8                 1088 	mov	r0,a
   02AB E6                 1089 	mov	a,@r0
   02AC 12s00r00           1090 	lcall	__gptrput
   02AF A3                 1091 	inc	dptr
   02B0 08                 1092 	inc	r0
   02B1 E6                 1093 	mov	a,@r0
   02B2 12s00r00           1094 	lcall	__gptrput
   02B5 A3                 1095 	inc	dptr
   02B6 08                 1096 	inc	r0
   02B7 E6                 1097 	mov	a,@r0
   02B8 12s00r00           1098 	lcall	__gptrput
   02BB D0*00              1099 	pop	_bp
   02BD 22                 1100 	ret
                           1101 ;------------------------------------------------------------
                           1102 ;Allocation info for local variables in function 'rmh_close'
                           1103 ;------------------------------------------------------------
                           1104 ;c                         Allocated to registers r2 r3 r4 
                           1105 ;------------------------------------------------------------
                           1106 ;	../../../core/net/rime/rmh.c:123: rmh_close(struct rmh_conn *c)
                           1107 ;	-----------------------------------------
                           1108 ;	 function rmh_close
                           1109 ;	-----------------------------------------
   02BE                    1110 _rmh_close:
                           1111 ;	../../../core/net/rime/rmh.c:125: runicast_close(&c->c);
   02BE 02s00r00           1112 	ljmp	_runicast_close
                           1113 ;------------------------------------------------------------
                           1114 ;Allocation info for local variables in function 'rmh_send'
                           1115 ;------------------------------------------------------------
                           1116 ;to                        Allocated to stack - offset -5
                           1117 ;num_rexmit                Allocated to stack - offset -6
                           1118 ;max_hops                  Allocated to stack - offset -7
                           1119 ;c                         Allocated to registers r2 r3 r4 
                           1120 ;nexthop                   Allocated to stack - offset 1
                           1121 ;hdr                       Allocated to stack - offset 4
                           1122 ;------------------------------------------------------------
                           1123 ;	../../../core/net/rime/rmh.c:129: rmh_send(struct rmh_conn *c, rimeaddr_t *to, uint8_t num_rexmit, uint8_t max_hops)
                           1124 ;	-----------------------------------------
                           1125 ;	 function rmh_send
                           1126 ;	-----------------------------------------
   02C1                    1127 _rmh_send:
   02C1 C0*00              1128 	push	_bp
   02C3 E5 81              1129 	mov	a,sp
   02C5 F5*00              1130 	mov	_bp,a
   02C7 24 06              1131 	add	a,#0x06
   02C9 F5 81              1132 	mov	sp,a
   02CB AA 82              1133 	mov	r2,dpl
   02CD AB 83              1134 	mov	r3,dph
   02CF AC F0              1135 	mov	r4,b
                           1136 ;	../../../core/net/rime/rmh.c:134: c->num_rexmit = num_rexmit;
   02D1 74 39              1137 	mov	a,#0x39
   02D3 2A                 1138 	add	a,r2
   02D4 FD                 1139 	mov	r5,a
   02D5 E4                 1140 	clr	a
   02D6 3B                 1141 	addc	a,r3
   02D7 FE                 1142 	mov	r6,a
   02D8 8C 07              1143 	mov	ar7,r4
   02DA 8D 82              1144 	mov	dpl,r5
   02DC 8E 83              1145 	mov	dph,r6
   02DE 8F F0              1146 	mov	b,r7
   02E0 E5*00              1147 	mov	a,_bp
   02E2 24 FA              1148 	add	a,#0xfa
   02E4 F8                 1149 	mov	r0,a
   02E5 E6                 1150 	mov	a,@r0
   02E6 12s00r00           1151 	lcall	__gptrput
                           1152 ;	../../../core/net/rime/rmh.c:136: if(c->cb->forward == NULL) {
   02E9 74 36              1153 	mov	a,#0x36
   02EB 2A                 1154 	add	a,r2
   02EC FD                 1155 	mov	r5,a
   02ED E4                 1156 	clr	a
   02EE 3B                 1157 	addc	a,r3
   02EF FE                 1158 	mov	r6,a
   02F0 8C 07              1159 	mov	ar7,r4
   02F2 8D 82              1160 	mov	dpl,r5
   02F4 8E 83              1161 	mov	dph,r6
   02F6 8F F0              1162 	mov	b,r7
   02F8 12s00r00           1163 	lcall	__gptrget
   02FB FD                 1164 	mov	r5,a
   02FC A3                 1165 	inc	dptr
   02FD 12s00r00           1166 	lcall	__gptrget
   0300 FE                 1167 	mov	r6,a
   0301 A3                 1168 	inc	dptr
   0302 12s00r00           1169 	lcall	__gptrget
   0305 FF                 1170 	mov	r7,a
   0306 74 02              1171 	mov	a,#0x02
   0308 2D                 1172 	add	a,r5
   0309 FD                 1173 	mov	r5,a
   030A E4                 1174 	clr	a
   030B 3E                 1175 	addc	a,r6
   030C FE                 1176 	mov	r6,a
   030D 8D 82              1177 	mov	dpl,r5
   030F 8E 83              1178 	mov	dph,r6
   0311 8F F0              1179 	mov	b,r7
   0313 12s00r00           1180 	lcall	__gptrget
   0316 FD                 1181 	mov	r5,a
   0317 A3                 1182 	inc	dptr
   0318 12s00r00           1183 	lcall	__gptrget
   031B FE                 1184 	mov	r6,a
   031C 4D                 1185 	orl	a,r5
   031D 70 06              1186 	jnz	00102$
                           1187 ;	../../../core/net/rime/rmh.c:137: return 0;
   031F 90 00 00           1188 	mov	dptr,#0x0000
   0322 02s04r82           1189 	ljmp	00108$
   0325                    1190 00102$:
                           1191 ;	../../../core/net/rime/rmh.c:140: nexthop = c->cb->forward(c, &rimeaddr_node_addr, to, NULL, 0);
   0325 C0 02              1192 	push	ar2
   0327 C0 03              1193 	push	ar3
   0329 C0 04              1194 	push	ar4
   032B E4                 1195 	clr	a
   032C C0 E0              1196 	push	acc
   032E E4                 1197 	clr	a
   032F C0 E0              1198 	push	acc
   0331 C0 E0              1199 	push	acc
   0333 C0 E0              1200 	push	acc
   0335 E5*00              1201 	mov	a,_bp
   0337 24 FB              1202 	add	a,#0xfb
   0339 F8                 1203 	mov	r0,a
   033A E6                 1204 	mov	a,@r0
   033B C0 E0              1205 	push	acc
   033D 08                 1206 	inc	r0
   033E E6                 1207 	mov	a,@r0
   033F C0 E0              1208 	push	acc
   0341 08                 1209 	inc	r0
   0342 E6                 1210 	mov	a,@r0
   0343 C0 E0              1211 	push	acc
   0345 74r00              1212 	mov	a,#_rimeaddr_node_addr
   0347 C0 E0              1213 	push	acc
   0349 74s00              1214 	mov	a,#(_rimeaddr_node_addr >> 8)
   034B C0 E0              1215 	push	acc
   034D E4                 1216 	clr	a
   034E C0 E0              1217 	push	acc
   0350 74r63              1218 	mov	a,#00114$
   0352 C0 E0              1219 	push	acc
   0354 74s03              1220 	mov	a,#(00114$ >> 8)
   0356 C0 E0              1221 	push	acc
   0358 C0 05              1222 	push	ar5
   035A C0 06              1223 	push	ar6
   035C 8A 82              1224 	mov	dpl,r2
   035E 8B 83              1225 	mov	dph,r3
   0360 8C F0              1226 	mov	b,r4
   0362 22                 1227 	ret
   0363                    1228 00114$:
   0363 AD 82              1229 	mov	r5,dpl
   0365 AE 83              1230 	mov	r6,dph
   0367 AF F0              1231 	mov	r7,b
   0369 E5 81              1232 	mov	a,sp
   036B 24 F6              1233 	add	a,#0xf6
   036D F5 81              1234 	mov	sp,a
   036F D0 04              1235 	pop	ar4
   0371 D0 03              1236 	pop	ar3
   0373 D0 02              1237 	pop	ar2
   0375 A8*00              1238 	mov	r0,_bp
   0377 08                 1239 	inc	r0
   0378 A6 05              1240 	mov	@r0,ar5
   037A 08                 1241 	inc	r0
   037B A6 06              1242 	mov	@r0,ar6
   037D 08                 1243 	inc	r0
   037E A6 07              1244 	mov	@r0,ar7
                           1245 ;	../../../core/net/rime/rmh.c:141: if(nexthop == NULL) {
   0380 A8*00              1246 	mov	r0,_bp
   0382 08                 1247 	inc	r0
   0383 E6                 1248 	mov	a,@r0
   0384 08                 1249 	inc	r0
   0385 46                 1250 	orl	a,@r0
   0386 08                 1251 	inc	r0
   0387 46                 1252 	orl	a,@r0
   0388 70 06              1253 	jnz	00106$
                           1254 ;	../../../core/net/rime/rmh.c:143: return 0;
   038A 90 00 00           1255 	mov	dptr,#0x0000
   038D 02s04r82           1256 	ljmp	00108$
   0390                    1257 00106$:
                           1258 ;	../../../core/net/rime/rmh.c:148: if(packetbuf_hdralloc(sizeof(struct data_hdr))) {
   0390 90 00 06           1259 	mov	dptr,#0x0006
   0393 C0 02              1260 	push	ar2
   0395 C0 03              1261 	push	ar3
   0397 C0 04              1262 	push	ar4
   0399 12s00r00           1263 	lcall	_packetbuf_hdralloc
   039C E5 82              1264 	mov	a,dpl
   039E 85 83 F0           1265 	mov	b,dph
   03A1 D0 04              1266 	pop	ar4
   03A3 D0 03              1267 	pop	ar3
   03A5 D0 02              1268 	pop	ar2
   03A7 45 F0              1269 	orl	a,b
   03A9 70 03              1270 	jnz	00116$
   03AB 02s04r7F           1271 	ljmp	00104$
   03AE                    1272 00116$:
                           1273 ;	../../../core/net/rime/rmh.c:149: hdr = packetbuf_hdrptr();
   03AE C0 02              1274 	push	ar2
   03B0 C0 03              1275 	push	ar3
   03B2 C0 04              1276 	push	ar4
   03B4 12s00r00           1277 	lcall	_packetbuf_hdrptr
   03B7 AD 82              1278 	mov	r5,dpl
   03B9 AE 83              1279 	mov	r6,dph
   03BB AF F0              1280 	mov	r7,b
   03BD E5*00              1281 	mov	a,_bp
   03BF 24 04              1282 	add	a,#0x04
   03C1 F8                 1283 	mov	r0,a
   03C2 A6 05              1284 	mov	@r0,ar5
   03C4 08                 1285 	inc	r0
   03C5 A6 06              1286 	mov	@r0,ar6
   03C7 08                 1287 	inc	r0
   03C8 A6 07              1288 	mov	@r0,ar7
                           1289 ;	../../../core/net/rime/rmh.c:150: rimeaddr_copy(&hdr->dest, to);
   03CA E5*00              1290 	mov	a,_bp
   03CC 24 FB              1291 	add	a,#0xfb
   03CE F8                 1292 	mov	r0,a
   03CF E6                 1293 	mov	a,@r0
   03D0 C0 E0              1294 	push	acc
   03D2 08                 1295 	inc	r0
   03D3 E6                 1296 	mov	a,@r0
   03D4 C0 E0              1297 	push	acc
   03D6 08                 1298 	inc	r0
   03D7 E6                 1299 	mov	a,@r0
   03D8 C0 E0              1300 	push	acc
   03DA E5*00              1301 	mov	a,_bp
   03DC 24 04              1302 	add	a,#0x04
   03DE F8                 1303 	mov	r0,a
   03DF 86 82              1304 	mov	dpl,@r0
   03E1 08                 1305 	inc	r0
   03E2 86 83              1306 	mov	dph,@r0
   03E4 08                 1307 	inc	r0
   03E5 86 F0              1308 	mov	b,@r0
   03E7 12s00r00           1309 	lcall	_rimeaddr_copy
   03EA 15 81              1310 	dec	sp
   03EC 15 81              1311 	dec	sp
   03EE 15 81              1312 	dec	sp
                           1313 ;	../../../core/net/rime/rmh.c:151: rimeaddr_copy(&hdr->originator, &rimeaddr_node_addr);
   03F0 E5*00              1314 	mov	a,_bp
   03F2 24 04              1315 	add	a,#0x04
   03F4 F8                 1316 	mov	r0,a
   03F5 74 02              1317 	mov	a,#0x02
   03F7 26                 1318 	add	a,@r0
   03F8 FD                 1319 	mov	r5,a
   03F9 E4                 1320 	clr	a
   03FA 08                 1321 	inc	r0
   03FB 36                 1322 	addc	a,@r0
   03FC FE                 1323 	mov	r6,a
   03FD 08                 1324 	inc	r0
   03FE 86 07              1325 	mov	ar7,@r0
   0400 74r00              1326 	mov	a,#_rimeaddr_node_addr
   0402 C0 E0              1327 	push	acc
   0404 74s00              1328 	mov	a,#(_rimeaddr_node_addr >> 8)
   0406 C0 E0              1329 	push	acc
   0408 E4                 1330 	clr	a
   0409 C0 E0              1331 	push	acc
   040B 8D 82              1332 	mov	dpl,r5
   040D 8E 83              1333 	mov	dph,r6
   040F 8F F0              1334 	mov	b,r7
   0411 12s00r00           1335 	lcall	_rimeaddr_copy
   0414 15 81              1336 	dec	sp
   0416 15 81              1337 	dec	sp
   0418 15 81              1338 	dec	sp
   041A D0 04              1339 	pop	ar4
   041C D0 03              1340 	pop	ar3
   041E D0 02              1341 	pop	ar2
                           1342 ;	../../../core/net/rime/rmh.c:152: hdr->hops = 1;
   0420 E5*00              1343 	mov	a,_bp
   0422 24 04              1344 	add	a,#0x04
   0424 F8                 1345 	mov	r0,a
   0425 74 04              1346 	mov	a,#0x04
   0427 26                 1347 	add	a,@r0
   0428 FD                 1348 	mov	r5,a
   0429 E4                 1349 	clr	a
   042A 08                 1350 	inc	r0
   042B 36                 1351 	addc	a,@r0
   042C FE                 1352 	mov	r6,a
   042D 08                 1353 	inc	r0
   042E 86 07              1354 	mov	ar7,@r0
   0430 8D 82              1355 	mov	dpl,r5
   0432 8E 83              1356 	mov	dph,r6
   0434 8F F0              1357 	mov	b,r7
   0436 74 01              1358 	mov	a,#0x01
   0438 12s00r00           1359 	lcall	__gptrput
                           1360 ;	../../../core/net/rime/rmh.c:153: hdr->max_rexmits = num_rexmit;
   043B E5*00              1361 	mov	a,_bp
   043D 24 04              1362 	add	a,#0x04
   043F F8                 1363 	mov	r0,a
   0440 74 05              1364 	mov	a,#0x05
   0442 26                 1365 	add	a,@r0
   0443 FD                 1366 	mov	r5,a
   0444 E4                 1367 	clr	a
   0445 08                 1368 	inc	r0
   0446 36                 1369 	addc	a,@r0
   0447 FE                 1370 	mov	r6,a
   0448 08                 1371 	inc	r0
   0449 86 07              1372 	mov	ar7,@r0
   044B 8D 82              1373 	mov	dpl,r5
   044D 8E 83              1374 	mov	dph,r6
   044F 8F F0              1375 	mov	b,r7
   0451 E5*00              1376 	mov	a,_bp
   0453 24 FA              1377 	add	a,#0xfa
   0455 F8                 1378 	mov	r0,a
   0456 E6                 1379 	mov	a,@r0
   0457 12s00r00           1380 	lcall	__gptrput
                           1381 ;	../../../core/net/rime/rmh.c:154: runicast_send(&c->c, nexthop, num_rexmit);
   045A E5*00              1382 	mov	a,_bp
   045C 24 FA              1383 	add	a,#0xfa
   045E F8                 1384 	mov	r0,a
   045F E6                 1385 	mov	a,@r0
   0460 C0 E0              1386 	push	acc
   0462 A8*00              1387 	mov	r0,_bp
   0464 08                 1388 	inc	r0
   0465 E6                 1389 	mov	a,@r0
   0466 C0 E0              1390 	push	acc
   0468 08                 1391 	inc	r0
   0469 E6                 1392 	mov	a,@r0
   046A C0 E0              1393 	push	acc
   046C 08                 1394 	inc	r0
   046D E6                 1395 	mov	a,@r0
   046E C0 E0              1396 	push	acc
   0470 8A 82              1397 	mov	dpl,r2
   0472 8B 83              1398 	mov	dph,r3
   0474 8C F0              1399 	mov	b,r4
   0476 12s00r00           1400 	lcall	_runicast_send
   0479 E5 81              1401 	mov	a,sp
   047B 24 FC              1402 	add	a,#0xfc
   047D F5 81              1403 	mov	sp,a
   047F                    1404 00104$:
                           1405 ;	../../../core/net/rime/rmh.c:156: return 1;
   047F 90 00 01           1406 	mov	dptr,#0x0001
   0482                    1407 00108$:
   0482 85*00 81           1408 	mov	sp,_bp
   0485 D0*00              1409 	pop	_bp
   0487 22                 1410 	ret
                           1411 	.area CSEG    (CODE)
                           1412 	.area CONST   (CODE)
   0000                    1413 _data_callbacks:
   0000r00s00              1414 	.byte _received,(_received >> 8)
   0002r4Bs02              1415 	.byte _sent,(_sent >> 8)
   0004r53s02              1416 	.byte _timedout,(_timedout >> 8)
                           1417 	.area XINIT   (CODE)
                           1418 	.area CABS    (ABS,CODE)
