                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6121 (Nov 17 2015) (CYGWIN)
                              4 ; This file was generated Sat Jan 27 13:25:33 2018
                              5 ;--------------------------------------------------------
                              6 	.module rudolph1
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _IRCON2_P2IF
                             13 	.globl _IRCON2_UTX0IF
                             14 	.globl _IRCON2_UTX1IF
                             15 	.globl _IRCON2_P1IF
                             16 	.globl _IRCON2_WDTIF
                             17 	.globl _CY
                             18 	.globl _AC
                             19 	.globl _F0
                             20 	.globl _RS1
                             21 	.globl _RS0
                             22 	.globl _OV
                             23 	.globl _F1
                             24 	.globl _P
                             25 	.globl _IRCON_DMAIF
                             26 	.globl _IRCON_T1IF
                             27 	.globl _IRCON_T2IF
                             28 	.globl _IRCON_T3IF
                             29 	.globl _IRCON_T4IF
                             30 	.globl _IRCON_P0IF
                             31 	.globl _IRCON_STIF
                             32 	.globl _IEN1_DMAIE
                             33 	.globl _IEN1_T1IE
                             34 	.globl _IEN1_T2IE
                             35 	.globl _IEN1_T3IE
                             36 	.globl _IEN1_T4IE
                             37 	.globl _IEN1_P0IE
                             38 	.globl _IEN0_RFERRIE
                             39 	.globl _IEN0_ADCIE
                             40 	.globl _IEN0_URX0IE
                             41 	.globl _IEN0_URX1IE
                             42 	.globl _IEN0_ENCIE
                             43 	.globl _IEN0_STIE
                             44 	.globl _IEN0_EA
                             45 	.globl _EA
                             46 	.globl _P2_4
                             47 	.globl _P2_3
                             48 	.globl _P2_2
                             49 	.globl _P2_1
                             50 	.globl _P2_0
                             51 	.globl _S0CON_ENCIF_0
                             52 	.globl _S0CON_ENCIF_1
                             53 	.globl _P1_7
                             54 	.globl _P1_6
                             55 	.globl _P1_5
                             56 	.globl _P1_4
                             57 	.globl _P1_3
                             58 	.globl _P1_2
                             59 	.globl _P1_1
                             60 	.globl _P1_0
                             61 	.globl _TCON_IT0
                             62 	.globl _TCON_RFERRIF
                             63 	.globl _TCON_IT1
                             64 	.globl _TCON_URX0IF
                             65 	.globl _TCON_ADCIF
                             66 	.globl _TCON_URX1IF
                             67 	.globl _P0_0
                             68 	.globl _P0_1
                             69 	.globl _P0_2
                             70 	.globl _P0_3
                             71 	.globl _P0_4
                             72 	.globl _P0_5
                             73 	.globl _P0_6
                             74 	.globl _P0_7
                             75 	.globl _P2DIR
                             76 	.globl _P1DIR
                             77 	.globl _P0DIR
                             78 	.globl _U1GCR
                             79 	.globl _U1UCR
                             80 	.globl _U1BAUD
                             81 	.globl _U1BUF
                             82 	.globl _U1CSR
                             83 	.globl _P2INP
                             84 	.globl _P1INP
                             85 	.globl _P2SEL
                             86 	.globl _P1SEL
                             87 	.globl _P0SEL
                             88 	.globl _ADCCFG
                             89 	.globl _PERCFG
                             90 	.globl _B
                             91 	.globl _T4CC1
                             92 	.globl _T4CCTL1
                             93 	.globl _T4CC0
                             94 	.globl _T4CCTL0
                             95 	.globl _T4CTL
                             96 	.globl _T4CNT
                             97 	.globl _RFIF
                             98 	.globl _IRCON2
                             99 	.globl _T1CCTL2
                            100 	.globl _T1CCTL1
                            101 	.globl _T1CCTL0
                            102 	.globl _T1CTL
                            103 	.globl _T1CNTH
                            104 	.globl _T1CNTL
                            105 	.globl _RFST
                            106 	.globl _ACC
                            107 	.globl _T1CC2H
                            108 	.globl _T1CC2L
                            109 	.globl _T1CC1H
                            110 	.globl _T1CC1L
                            111 	.globl _T1CC0H
                            112 	.globl _T1CC0L
                            113 	.globl _RFD
                            114 	.globl _TIMIF
                            115 	.globl _DMAREQ
                            116 	.globl _DMAARM
                            117 	.globl _DMA0CFGH
                            118 	.globl _DMA0CFGL
                            119 	.globl _DMA1CFGH
                            120 	.globl _DMA1CFGL
                            121 	.globl _DMAIRQ
                            122 	.globl _PSW
                            123 	.globl _T3CC1
                            124 	.globl _T3CCTL1
                            125 	.globl _T3CC0
                            126 	.globl _T3CCTL0
                            127 	.globl _T3CTL
                            128 	.globl _T3CNT
                            129 	.globl _WDCTL
                            130 	.globl _T2CON
                            131 	.globl _MEMCTR
                            132 	.globl _CLKCON
                            133 	.globl _U0GCR
                            134 	.globl _U0UCR
                            135 	.globl _T2CNF
                            136 	.globl _U0BAUD
                            137 	.globl _U0BUF
                            138 	.globl _IRCON
                            139 	.globl _SLEEP
                            140 	.globl _RNDH
                            141 	.globl _RNDL
                            142 	.globl _ADCH
                            143 	.globl _ADCL
                            144 	.globl _IP1
                            145 	.globl _IEN1
                            146 	.globl _RCCTL
                            147 	.globl _ADCCON3
                            148 	.globl _ADCCON2
                            149 	.globl _ADCCON1
                            150 	.globl _ENCCS
                            151 	.globl _ENCDO
                            152 	.globl _ENCDI
                            153 	.globl _FWDATA
                            154 	.globl _FCTL
                            155 	.globl _FADDRH
                            156 	.globl _FADDRL
                            157 	.globl _FWT
                            158 	.globl _IP0
                            159 	.globl _IEN0
                            160 	.globl _IE
                            161 	.globl _T2THD
                            162 	.globl _T2TLD
                            163 	.globl _T2CAPHPH
                            164 	.globl _T2CAPLPL
                            165 	.globl _T2OF2
                            166 	.globl _T2OF1
                            167 	.globl _T2OF0
                            168 	.globl _P2
                            169 	.globl _PSBANK
                            170 	.globl _FMAP
                            171 	.globl _T2PEROF2
                            172 	.globl _T2PEROF1
                            173 	.globl _T2PEROF0
                            174 	.globl _S1CON
                            175 	.globl _IEN2
                            176 	.globl _HSRC
                            177 	.globl _S0CON
                            178 	.globl _ST2
                            179 	.globl _ST1
                            180 	.globl _ST0
                            181 	.globl _T2CMP
                            182 	.globl __XPAGE
                            183 	.globl _DPS
                            184 	.globl _RFIM
                            185 	.globl _P1
                            186 	.globl _P0INP
                            187 	.globl _P1IEN
                            188 	.globl _PICTL
                            189 	.globl _P2IFG
                            190 	.globl _P1IFG
                            191 	.globl _P0IFG
                            192 	.globl _TCON
                            193 	.globl _PCON
                            194 	.globl _U0CSR
                            195 	.globl _DPH1
                            196 	.globl _DPL1
                            197 	.globl _DPH0
                            198 	.globl _DPL0
                            199 	.globl _SP
                            200 	.globl _P0
                            201 	.globl _ADC_SHADOW
                            202 	.globl _U1BUF_SHADOW
                            203 	.globl _RFD_SHADOW
                            204 	.globl _U0BUF_SHADOW
                            205 	.globl _RFSTATUS
                            206 	.globl _CHIPID
                            207 	.globl _CHVER
                            208 	.globl _FSMTC1
                            209 	.globl _RXFIFOCNT
                            210 	.globl _IOCFG3
                            211 	.globl _IOCFG2
                            212 	.globl _IOCFG1
                            213 	.globl _IOCFG0
                            214 	.globl _SHORTADDRL
                            215 	.globl _SHORTADDRH
                            216 	.globl _PANIDL
                            217 	.globl _PANIDH
                            218 	.globl _IEEE_ADDR7
                            219 	.globl _IEEE_ADDR6
                            220 	.globl _IEEE_ADDR5
                            221 	.globl _IEEE_ADDR4
                            222 	.globl _IEEE_ADDR3
                            223 	.globl _IEEE_ADDR2
                            224 	.globl _IEEE_ADDR1
                            225 	.globl _IEEE_ADDR0
                            226 	.globl _DACTSTL
                            227 	.globl _DACTSTH
                            228 	.globl _ADCTSTL
                            229 	.globl _ADCTSTH
                            230 	.globl _FSMSTATE
                            231 	.globl _AGCCTRLL
                            232 	.globl _AGCCTRLH
                            233 	.globl _MANORL
                            234 	.globl _MANORH
                            235 	.globl _MANANDL
                            236 	.globl _MANANDH
                            237 	.globl _FSMTCL
                            238 	.globl _FSMTCH
                            239 	.globl _RFPWR
                            240 	.globl _CSPT
                            241 	.globl _CSPCTRL
                            242 	.globl _CSPZ
                            243 	.globl _CSPY
                            244 	.globl _CSPX
                            245 	.globl _FSCTRLL
                            246 	.globl _FSCTRLH
                            247 	.globl _RXCTRL1L
                            248 	.globl _RXCTRL1H
                            249 	.globl _RXCTRL0L
                            250 	.globl _RXCTRL0H
                            251 	.globl _TXCTRLL
                            252 	.globl _TXCTRLH
                            253 	.globl _SYNCWORDL
                            254 	.globl _SYNCWORDH
                            255 	.globl _RSSIL
                            256 	.globl _RSSIH
                            257 	.globl _MDMCTRL1L
                            258 	.globl _MDMCTRL1H
                            259 	.globl _MDMCTRL0L
                            260 	.globl _MDMCTRL0H
                            261 	.globl _rudolph1_open
                            262 	.globl _rudolph1_close
                            263 	.globl _rudolph1_send
                            264 	.globl _rudolph1_stop
                            265 ;--------------------------------------------------------
                            266 ; special function registers
                            267 ;--------------------------------------------------------
                            268 	.area RSEG    (ABS,DATA)
   0000                     269 	.org 0x0000
                    0080    270 _P0	=	0x0080
                    0081    271 _SP	=	0x0081
                    0082    272 _DPL0	=	0x0082
                    0083    273 _DPH0	=	0x0083
                    0084    274 _DPL1	=	0x0084
                    0085    275 _DPH1	=	0x0085
                    0086    276 _U0CSR	=	0x0086
                    0087    277 _PCON	=	0x0087
                    0088    278 _TCON	=	0x0088
                    0089    279 _P0IFG	=	0x0089
                    008A    280 _P1IFG	=	0x008a
                    008B    281 _P2IFG	=	0x008b
                    008C    282 _PICTL	=	0x008c
                    008D    283 _P1IEN	=	0x008d
                    008F    284 _P0INP	=	0x008f
                    0090    285 _P1	=	0x0090
                    0091    286 _RFIM	=	0x0091
                    0092    287 _DPS	=	0x0092
                    0093    288 __XPAGE	=	0x0093
                    0094    289 _T2CMP	=	0x0094
                    0095    290 _ST0	=	0x0095
                    0096    291 _ST1	=	0x0096
                    0097    292 _ST2	=	0x0097
                    0098    293 _S0CON	=	0x0098
                    0099    294 _HSRC	=	0x0099
                    009A    295 _IEN2	=	0x009a
                    009B    296 _S1CON	=	0x009b
                    009C    297 _T2PEROF0	=	0x009c
                    009D    298 _T2PEROF1	=	0x009d
                    009E    299 _T2PEROF2	=	0x009e
                    009F    300 _FMAP	=	0x009f
                    009F    301 _PSBANK	=	0x009f
                    00A0    302 _P2	=	0x00a0
                    00A1    303 _T2OF0	=	0x00a1
                    00A2    304 _T2OF1	=	0x00a2
                    00A3    305 _T2OF2	=	0x00a3
                    00A4    306 _T2CAPLPL	=	0x00a4
                    00A5    307 _T2CAPHPH	=	0x00a5
                    00A6    308 _T2TLD	=	0x00a6
                    00A7    309 _T2THD	=	0x00a7
                    00A8    310 _IE	=	0x00a8
                    00A8    311 _IEN0	=	0x00a8
                    00A9    312 _IP0	=	0x00a9
                    00AB    313 _FWT	=	0x00ab
                    00AC    314 _FADDRL	=	0x00ac
                    00AD    315 _FADDRH	=	0x00ad
                    00AE    316 _FCTL	=	0x00ae
                    00AF    317 _FWDATA	=	0x00af
                    00B1    318 _ENCDI	=	0x00b1
                    00B2    319 _ENCDO	=	0x00b2
                    00B3    320 _ENCCS	=	0x00b3
                    00B4    321 _ADCCON1	=	0x00b4
                    00B5    322 _ADCCON2	=	0x00b5
                    00B6    323 _ADCCON3	=	0x00b6
                    00B7    324 _RCCTL	=	0x00b7
                    00B8    325 _IEN1	=	0x00b8
                    00B9    326 _IP1	=	0x00b9
                    00BA    327 _ADCL	=	0x00ba
                    00BB    328 _ADCH	=	0x00bb
                    00BC    329 _RNDL	=	0x00bc
                    00BD    330 _RNDH	=	0x00bd
                    00BE    331 _SLEEP	=	0x00be
                    00C0    332 _IRCON	=	0x00c0
                    00C1    333 _U0BUF	=	0x00c1
                    00C2    334 _U0BAUD	=	0x00c2
                    00C3    335 _T2CNF	=	0x00c3
                    00C4    336 _U0UCR	=	0x00c4
                    00C5    337 _U0GCR	=	0x00c5
                    00C6    338 _CLKCON	=	0x00c6
                    00C7    339 _MEMCTR	=	0x00c7
                    00C8    340 _T2CON	=	0x00c8
                    00C9    341 _WDCTL	=	0x00c9
                    00CA    342 _T3CNT	=	0x00ca
                    00CB    343 _T3CTL	=	0x00cb
                    00CC    344 _T3CCTL0	=	0x00cc
                    00CD    345 _T3CC0	=	0x00cd
                    00CE    346 _T3CCTL1	=	0x00ce
                    00CF    347 _T3CC1	=	0x00cf
                    00D0    348 _PSW	=	0x00d0
                    00D1    349 _DMAIRQ	=	0x00d1
                    00D2    350 _DMA1CFGL	=	0x00d2
                    00D3    351 _DMA1CFGH	=	0x00d3
                    00D4    352 _DMA0CFGL	=	0x00d4
                    00D5    353 _DMA0CFGH	=	0x00d5
                    00D6    354 _DMAARM	=	0x00d6
                    00D7    355 _DMAREQ	=	0x00d7
                    00D8    356 _TIMIF	=	0x00d8
                    00D9    357 _RFD	=	0x00d9
                    00DA    358 _T1CC0L	=	0x00da
                    00DB    359 _T1CC0H	=	0x00db
                    00DC    360 _T1CC1L	=	0x00dc
                    00DD    361 _T1CC1H	=	0x00dd
                    00DE    362 _T1CC2L	=	0x00de
                    00DF    363 _T1CC2H	=	0x00df
                    00E0    364 _ACC	=	0x00e0
                    00E1    365 _RFST	=	0x00e1
                    00E2    366 _T1CNTL	=	0x00e2
                    00E3    367 _T1CNTH	=	0x00e3
                    00E4    368 _T1CTL	=	0x00e4
                    00E5    369 _T1CCTL0	=	0x00e5
                    00E6    370 _T1CCTL1	=	0x00e6
                    00E7    371 _T1CCTL2	=	0x00e7
                    00E8    372 _IRCON2	=	0x00e8
                    00E9    373 _RFIF	=	0x00e9
                    00EA    374 _T4CNT	=	0x00ea
                    00EB    375 _T4CTL	=	0x00eb
                    00EC    376 _T4CCTL0	=	0x00ec
                    00ED    377 _T4CC0	=	0x00ed
                    00EE    378 _T4CCTL1	=	0x00ee
                    00EF    379 _T4CC1	=	0x00ef
                    00F0    380 _B	=	0x00f0
                    00F1    381 _PERCFG	=	0x00f1
                    00F2    382 _ADCCFG	=	0x00f2
                    00F3    383 _P0SEL	=	0x00f3
                    00F4    384 _P1SEL	=	0x00f4
                    00F5    385 _P2SEL	=	0x00f5
                    00F6    386 _P1INP	=	0x00f6
                    00F7    387 _P2INP	=	0x00f7
                    00F8    388 _U1CSR	=	0x00f8
                    00F9    389 _U1BUF	=	0x00f9
                    00FA    390 _U1BAUD	=	0x00fa
                    00FB    391 _U1UCR	=	0x00fb
                    00FC    392 _U1GCR	=	0x00fc
                    00FD    393 _P0DIR	=	0x00fd
                    00FE    394 _P1DIR	=	0x00fe
                    00FF    395 _P2DIR	=	0x00ff
                            396 ;--------------------------------------------------------
                            397 ; special function bits
                            398 ;--------------------------------------------------------
                            399 	.area RSEG    (ABS,DATA)
   0000                     400 	.org 0x0000
                    0087    401 _P0_7	=	0x0087
                    0086    402 _P0_6	=	0x0086
                    0085    403 _P0_5	=	0x0085
                    0084    404 _P0_4	=	0x0084
                    0083    405 _P0_3	=	0x0083
                    0082    406 _P0_2	=	0x0082
                    0081    407 _P0_1	=	0x0081
                    0080    408 _P0_0	=	0x0080
                    008F    409 _TCON_URX1IF	=	0x008f
                    008D    410 _TCON_ADCIF	=	0x008d
                    008B    411 _TCON_URX0IF	=	0x008b
                    008A    412 _TCON_IT1	=	0x008a
                    0089    413 _TCON_RFERRIF	=	0x0089
                    0088    414 _TCON_IT0	=	0x0088
                    0090    415 _P1_0	=	0x0090
                    0091    416 _P1_1	=	0x0091
                    0092    417 _P1_2	=	0x0092
                    0093    418 _P1_3	=	0x0093
                    0094    419 _P1_4	=	0x0094
                    0095    420 _P1_5	=	0x0095
                    0096    421 _P1_6	=	0x0096
                    0097    422 _P1_7	=	0x0097
                    0099    423 _S0CON_ENCIF_1	=	0x0099
                    0098    424 _S0CON_ENCIF_0	=	0x0098
                    00A0    425 _P2_0	=	0x00a0
                    00A1    426 _P2_1	=	0x00a1
                    00A2    427 _P2_2	=	0x00a2
                    00A3    428 _P2_3	=	0x00a3
                    00A4    429 _P2_4	=	0x00a4
                    00AF    430 _EA	=	0x00af
                    00AF    431 _IEN0_EA	=	0x00af
                    00AD    432 _IEN0_STIE	=	0x00ad
                    00AC    433 _IEN0_ENCIE	=	0x00ac
                    00AB    434 _IEN0_URX1IE	=	0x00ab
                    00AA    435 _IEN0_URX0IE	=	0x00aa
                    00A9    436 _IEN0_ADCIE	=	0x00a9
                    00A8    437 _IEN0_RFERRIE	=	0x00a8
                    00BD    438 _IEN1_P0IE	=	0x00bd
                    00BC    439 _IEN1_T4IE	=	0x00bc
                    00BB    440 _IEN1_T3IE	=	0x00bb
                    00BA    441 _IEN1_T2IE	=	0x00ba
                    00B9    442 _IEN1_T1IE	=	0x00b9
                    00B8    443 _IEN1_DMAIE	=	0x00b8
                    00C7    444 _IRCON_STIF	=	0x00c7
                    00C5    445 _IRCON_P0IF	=	0x00c5
                    00C4    446 _IRCON_T4IF	=	0x00c4
                    00C3    447 _IRCON_T3IF	=	0x00c3
                    00C2    448 _IRCON_T2IF	=	0x00c2
                    00C1    449 _IRCON_T1IF	=	0x00c1
                    00C0    450 _IRCON_DMAIF	=	0x00c0
                    00D0    451 _P	=	0x00d0
                    00D1    452 _F1	=	0x00d1
                    00D2    453 _OV	=	0x00d2
                    00D3    454 _RS0	=	0x00d3
                    00D4    455 _RS1	=	0x00d4
                    00D5    456 _F0	=	0x00d5
                    00D6    457 _AC	=	0x00d6
                    00D7    458 _CY	=	0x00d7
                    00EC    459 _IRCON2_WDTIF	=	0x00ec
                    00EB    460 _IRCON2_P1IF	=	0x00eb
                    00EA    461 _IRCON2_UTX1IF	=	0x00ea
                    00E9    462 _IRCON2_UTX0IF	=	0x00e9
                    00E8    463 _IRCON2_P2IF	=	0x00e8
                            464 ;--------------------------------------------------------
                            465 ; overlayable register banks
                            466 ;--------------------------------------------------------
                            467 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     468 	.ds 8
                            469 ;--------------------------------------------------------
                            470 ; internal ram data
                            471 ;--------------------------------------------------------
                            472 	.area DSEG    (DATA)
                            473 ;--------------------------------------------------------
                            474 ; overlayable items in internal ram 
                            475 ;--------------------------------------------------------
                            476 	.area OSEG    (OVR,DATA)
                            477 ;--------------------------------------------------------
                            478 ; indirectly addressable internal ram data
                            479 ;--------------------------------------------------------
                            480 	.area ISEG    (DATA)
                            481 ;--------------------------------------------------------
                            482 ; absolute internal ram data
                            483 ;--------------------------------------------------------
                            484 	.area IABS    (ABS,DATA)
                            485 	.area IABS    (ABS,DATA)
                            486 ;--------------------------------------------------------
                            487 ; bit data
                            488 ;--------------------------------------------------------
                            489 	.area BSEG    (BIT)
                            490 ;--------------------------------------------------------
                            491 ; paged external ram data
                            492 ;--------------------------------------------------------
                            493 	.area PSEG    (PAG,XDATA)
                            494 ;--------------------------------------------------------
                            495 ; external ram data
                            496 ;--------------------------------------------------------
                            497 	.area XSEG    (XDATA)
                    DF02    498 _MDMCTRL0H	=	0xdf02
                    DF03    499 _MDMCTRL0L	=	0xdf03
                    DF04    500 _MDMCTRL1H	=	0xdf04
                    DF05    501 _MDMCTRL1L	=	0xdf05
                    DF06    502 _RSSIH	=	0xdf06
                    DF07    503 _RSSIL	=	0xdf07
                    DF08    504 _SYNCWORDH	=	0xdf08
                    DF09    505 _SYNCWORDL	=	0xdf09
                    DF0A    506 _TXCTRLH	=	0xdf0a
                    DF0B    507 _TXCTRLL	=	0xdf0b
                    DF0C    508 _RXCTRL0H	=	0xdf0c
                    DF0D    509 _RXCTRL0L	=	0xdf0d
                    DF0E    510 _RXCTRL1H	=	0xdf0e
                    DF0F    511 _RXCTRL1L	=	0xdf0f
                    DF10    512 _FSCTRLH	=	0xdf10
                    DF11    513 _FSCTRLL	=	0xdf11
                    DF12    514 _CSPX	=	0xdf12
                    DF13    515 _CSPY	=	0xdf13
                    DF14    516 _CSPZ	=	0xdf14
                    DF15    517 _CSPCTRL	=	0xdf15
                    DF16    518 _CSPT	=	0xdf16
                    DF17    519 _RFPWR	=	0xdf17
                    DF20    520 _FSMTCH	=	0xdf20
                    DF21    521 _FSMTCL	=	0xdf21
                    DF22    522 _MANANDH	=	0xdf22
                    DF23    523 _MANANDL	=	0xdf23
                    DF24    524 _MANORH	=	0xdf24
                    DF25    525 _MANORL	=	0xdf25
                    DF26    526 _AGCCTRLH	=	0xdf26
                    DF27    527 _AGCCTRLL	=	0xdf27
                    DF39    528 _FSMSTATE	=	0xdf39
                    DF3A    529 _ADCTSTH	=	0xdf3a
                    DF3B    530 _ADCTSTL	=	0xdf3b
                    DF3C    531 _DACTSTH	=	0xdf3c
                    DF3D    532 _DACTSTL	=	0xdf3d
                    DF43    533 _IEEE_ADDR0	=	0xdf43
                    DF44    534 _IEEE_ADDR1	=	0xdf44
                    DF45    535 _IEEE_ADDR2	=	0xdf45
                    DF46    536 _IEEE_ADDR3	=	0xdf46
                    DF47    537 _IEEE_ADDR4	=	0xdf47
                    DF48    538 _IEEE_ADDR5	=	0xdf48
                    DF49    539 _IEEE_ADDR6	=	0xdf49
                    DF4A    540 _IEEE_ADDR7	=	0xdf4a
                    DF4B    541 _PANIDH	=	0xdf4b
                    DF4C    542 _PANIDL	=	0xdf4c
                    DF4D    543 _SHORTADDRH	=	0xdf4d
                    DF4E    544 _SHORTADDRL	=	0xdf4e
                    DF4F    545 _IOCFG0	=	0xdf4f
                    DF50    546 _IOCFG1	=	0xdf50
                    DF51    547 _IOCFG2	=	0xdf51
                    DF52    548 _IOCFG3	=	0xdf52
                    DF53    549 _RXFIFOCNT	=	0xdf53
                    DF54    550 _FSMTC1	=	0xdf54
                    DF60    551 _CHVER	=	0xdf60
                    DF61    552 _CHIPID	=	0xdf61
                    DF62    553 _RFSTATUS	=	0xdf62
                    DFC1    554 _U0BUF_SHADOW	=	0xdfc1
                    DFD9    555 _RFD_SHADOW	=	0xdfd9
                    DFF9    556 _U1BUF_SHADOW	=	0xdff9
                    DFBA    557 _ADC_SHADOW	=	0xdfba
                            558 ;--------------------------------------------------------
                            559 ; absolute external ram data
                            560 ;--------------------------------------------------------
                            561 	.area XABS    (ABS,XDATA)
                            562 ;--------------------------------------------------------
                            563 ; external initialized ram data
                            564 ;--------------------------------------------------------
                            565 	.area XISEG   (XDATA)
                            566 	.area HOME    (CODE)
                            567 	.area GSINIT0 (CODE)
                            568 	.area GSINIT1 (CODE)
                            569 	.area GSINIT2 (CODE)
                            570 	.area GSINIT3 (CODE)
                            571 	.area GSINIT4 (CODE)
                            572 	.area GSINIT5 (CODE)
                            573 	.area GSINIT  (CODE)
                            574 	.area GSFINAL (CODE)
                            575 	.area CSEG    (CODE)
                            576 ;--------------------------------------------------------
                            577 ; global & static initialisations
                            578 ;--------------------------------------------------------
                            579 	.area HOME    (CODE)
                            580 	.area GSINIT  (CODE)
                            581 	.area GSFINAL (CODE)
                            582 	.area GSINIT  (CODE)
                            583 ;--------------------------------------------------------
                            584 ; Home
                            585 ;--------------------------------------------------------
                            586 	.area HOME    (CODE)
                            587 	.area HOME    (CODE)
                            588 ;--------------------------------------------------------
                            589 ; code
                            590 ;--------------------------------------------------------
                            591 	.area CSEG    (CODE)
                            592 ;------------------------------------------------------------
                            593 ;Allocation info for local variables in function 'read_data'
                            594 ;------------------------------------------------------------
                            595 ;dataptr                   Allocated to stack - offset -5
                            596 ;chunk                     Allocated to stack - offset -7
                            597 ;c                         Allocated to stack - offset 1
                            598 ;len                       Allocated to registers r5 r6 
                            599 ;------------------------------------------------------------
                            600 ;	../../../core/net/rime/rudolph1.c:89: read_data(struct rudolph1_conn *c, uint8_t *dataptr, int chunk)
                            601 ;	-----------------------------------------
                            602 ;	 function read_data
                            603 ;	-----------------------------------------
   0000                     604 _read_data:
                    0002    605 	ar2 = 0x02
                    0003    606 	ar3 = 0x03
                    0004    607 	ar4 = 0x04
                    0005    608 	ar5 = 0x05
                    0006    609 	ar6 = 0x06
                    0007    610 	ar7 = 0x07
                    0000    611 	ar0 = 0x00
                    0001    612 	ar1 = 0x01
   0000 C0*00               613 	push	_bp
   0002 85 81*00            614 	mov	_bp,sp
   0005 C0 82               615 	push	dpl
   0007 C0 83               616 	push	dph
   0009 C0 F0               617 	push	b
                            618 ;	../../../core/net/rime/rudolph1.c:91: int len = 0;
   000B 7D 00               619 	mov	r5,#0x00
   000D 7E 00               620 	mov	r6,#0x00
                            621 ;	../../../core/net/rime/rudolph1.c:93: if(c->cb->read_chunk) {
   000F A8*00               622 	mov	r0,_bp
   0011 08                  623 	inc	r0
   0012 74 88               624 	mov	a,#0x88
   0014 26                  625 	add	a,@r0
   0015 FF                  626 	mov	r7,a
   0016 E4                  627 	clr	a
   0017 08                  628 	inc	r0
   0018 36                  629 	addc	a,@r0
   0019 FA                  630 	mov	r2,a
   001A 08                  631 	inc	r0
   001B 86 03               632 	mov	ar3,@r0
   001D 8F 82               633 	mov	dpl,r7
   001F 8A 83               634 	mov	dph,r2
   0021 8B F0               635 	mov	b,r3
   0023 12s00r00            636 	lcall	__gptrget
   0026 FF                  637 	mov	r7,a
   0027 A3                  638 	inc	dptr
   0028 12s00r00            639 	lcall	__gptrget
   002B FA                  640 	mov	r2,a
   002C A3                  641 	inc	dptr
   002D 12s00r00            642 	lcall	__gptrget
   0030 FB                  643 	mov	r3,a
   0031 74 02               644 	mov	a,#0x02
   0033 2F                  645 	add	a,r7
   0034 FF                  646 	mov	r7,a
   0035 E4                  647 	clr	a
   0036 3A                  648 	addc	a,r2
   0037 FA                  649 	mov	r2,a
   0038 8F 82               650 	mov	dpl,r7
   003A 8A 83               651 	mov	dph,r2
   003C 8B F0               652 	mov	b,r3
   003E 12s00r00            653 	lcall	__gptrget
   0041 FA                  654 	mov	r2,a
   0042 A3                  655 	inc	dptr
   0043 12s00r00            656 	lcall	__gptrget
   0046 FB                  657 	mov	r3,a
   0047 4A                  658 	orl	a,r2
   0048 60 5A               659 	jz	00102$
                            660 ;	../../../core/net/rime/rudolph1.c:94: len = c->cb->read_chunk(c, chunk * RUDOLPH1_DATASIZE,
   004A E5*00               661 	mov	a,_bp
   004C 24 F9               662 	add	a,#0xf9
   004E F8                  663 	mov	r0,a
   004F 86 04               664 	mov	ar4,@r0
   0051 08                  665 	inc	r0
   0052 E6                  666 	mov	a,@r0
   0053 54 03               667 	anl	a,#0x03
   0055 A2 E0               668 	mov	c,acc.0
   0057 CC                  669 	xch	a,r4
   0058 13                  670 	rrc	a
   0059 CC                  671 	xch	a,r4
   005A 13                  672 	rrc	a
   005B A2 E0               673 	mov	c,acc.0
   005D CC                  674 	xch	a,r4
   005E 13                  675 	rrc	a
   005F CC                  676 	xch	a,r4
   0060 13                  677 	rrc	a
   0061 CC                  678 	xch	a,r4
   0062 FF                  679 	mov	r7,a
   0063 74 40               680 	mov	a,#0x40
   0065 C0 E0               681 	push	acc
   0067 E4                  682 	clr	a
   0068 C0 E0               683 	push	acc
   006A E5*00               684 	mov	a,_bp
   006C 24 FB               685 	add	a,#0xfb
   006E F8                  686 	mov	r0,a
   006F E6                  687 	mov	a,@r0
   0070 C0 E0               688 	push	acc
   0072 08                  689 	inc	r0
   0073 E6                  690 	mov	a,@r0
   0074 C0 E0               691 	push	acc
   0076 08                  692 	inc	r0
   0077 E6                  693 	mov	a,@r0
   0078 C0 E0               694 	push	acc
   007A C0 04               695 	push	ar4
   007C C0 07               696 	push	ar7
   007E 74r96               697 	mov	a,#00107$
   0080 C0 E0               698 	push	acc
   0082 74s00               699 	mov	a,#(00107$ >> 8)
   0084 C0 E0               700 	push	acc
   0086 C0 02               701 	push	ar2
   0088 C0 03               702 	push	ar3
   008A A8*00               703 	mov	r0,_bp
   008C 08                  704 	inc	r0
   008D 86 82               705 	mov	dpl,@r0
   008F 08                  706 	inc	r0
   0090 86 83               707 	mov	dph,@r0
   0092 08                  708 	inc	r0
   0093 86 F0               709 	mov	b,@r0
   0095 22                  710 	ret
   0096                     711 00107$:
   0096 AA 82               712 	mov	r2,dpl
   0098 AB 83               713 	mov	r3,dph
   009A E5 81               714 	mov	a,sp
   009C 24 F9               715 	add	a,#0xf9
   009E F5 81               716 	mov	sp,a
   00A0 8A 05               717 	mov	ar5,r2
   00A2 8B 06               718 	mov	ar6,r3
   00A4                     719 00102$:
                            720 ;	../../../core/net/rime/rudolph1.c:97: return len;
   00A4 8D 82               721 	mov	dpl,r5
   00A6 8E 83               722 	mov	dph,r6
   00A8 85*00 81            723 	mov	sp,_bp
   00AB D0*00               724 	pop	_bp
   00AD 22                  725 	ret
                            726 ;------------------------------------------------------------
                            727 ;Allocation info for local variables in function 'format_data'
                            728 ;------------------------------------------------------------
                            729 ;chunk                     Allocated to stack - offset -4
                            730 ;c                         Allocated to stack - offset 1
                            731 ;p                         Allocated to stack - offset 4
                            732 ;------------------------------------------------------------
                            733 ;	../../../core/net/rime/rudolph1.c:101: format_data(struct rudolph1_conn *c, int chunk)
                            734 ;	-----------------------------------------
                            735 ;	 function format_data
                            736 ;	-----------------------------------------
   00AE                     737 _format_data:
   00AE C0*00               738 	push	_bp
   00B0 85 81*00            739 	mov	_bp,sp
   00B3 C0 82               740 	push	dpl
   00B5 C0 83               741 	push	dph
   00B7 C0 F0               742 	push	b
   00B9 05 81               743 	inc	sp
   00BB 05 81               744 	inc	sp
   00BD 05 81               745 	inc	sp
                            746 ;	../../../core/net/rime/rudolph1.c:105: packetbuf_clear();
   00BF 12s00r00            747 	lcall	_packetbuf_clear
                            748 ;	../../../core/net/rime/rudolph1.c:106: p = packetbuf_dataptr();
   00C2 12s00r00            749 	lcall	_packetbuf_dataptr
   00C5 AD 82               750 	mov	r5,dpl
   00C7 AE 83               751 	mov	r6,dph
   00C9 AF F0               752 	mov	r7,b
   00CB E5*00               753 	mov	a,_bp
   00CD 24 04               754 	add	a,#0x04
   00CF F8                  755 	mov	r0,a
   00D0 A6 05               756 	mov	@r0,ar5
   00D2 08                  757 	inc	r0
   00D3 A6 06               758 	mov	@r0,ar6
   00D5 08                  759 	inc	r0
   00D6 A6 07               760 	mov	@r0,ar7
                            761 ;	../../../core/net/rime/rudolph1.c:107: p->h.type = TYPE_DATA;
   00D8 E5*00               762 	mov	a,_bp
   00DA 24 04               763 	add	a,#0x04
   00DC F8                  764 	mov	r0,a
   00DD 86 82               765 	mov	dpl,@r0
   00DF 08                  766 	inc	r0
   00E0 86 83               767 	mov	dph,@r0
   00E2 08                  768 	inc	r0
   00E3 86 F0               769 	mov	b,@r0
   00E5 E4                  770 	clr	a
   00E6 12s00r00            771 	lcall	__gptrput
                            772 ;	../../../core/net/rime/rudolph1.c:108: p->h.version = c->version;
   00E9 E5*00               773 	mov	a,_bp
   00EB 24 04               774 	add	a,#0x04
   00ED F8                  775 	mov	r0,a
   00EE 74 01               776 	mov	a,#0x01
   00F0 26                  777 	add	a,@r0
   00F1 FA                  778 	mov	r2,a
   00F2 E4                  779 	clr	a
   00F3 08                  780 	inc	r0
   00F4 36                  781 	addc	a,@r0
   00F5 FB                  782 	mov	r3,a
   00F6 08                  783 	inc	r0
   00F7 86 04               784 	mov	ar4,@r0
   00F9 A8*00               785 	mov	r0,_bp
   00FB 08                  786 	inc	r0
   00FC 74 A6               787 	mov	a,#0xA6
   00FE 26                  788 	add	a,@r0
   00FF FD                  789 	mov	r5,a
   0100 E4                  790 	clr	a
   0101 08                  791 	inc	r0
   0102 36                  792 	addc	a,@r0
   0103 FE                  793 	mov	r6,a
   0104 08                  794 	inc	r0
   0105 86 07               795 	mov	ar7,@r0
   0107 8D 82               796 	mov	dpl,r5
   0109 8E 83               797 	mov	dph,r6
   010B 8F F0               798 	mov	b,r7
   010D 12s00r00            799 	lcall	__gptrget
   0110 8A 82               800 	mov	dpl,r2
   0112 8B 83               801 	mov	dph,r3
   0114 8C F0               802 	mov	b,r4
   0116 12s00r00            803 	lcall	__gptrput
                            804 ;	../../../core/net/rime/rudolph1.c:109: p->h.chunk = chunk;
   0119 E5*00               805 	mov	a,_bp
   011B 24 04               806 	add	a,#0x04
   011D F8                  807 	mov	r0,a
   011E 74 02               808 	mov	a,#0x02
   0120 26                  809 	add	a,@r0
   0121 FA                  810 	mov	r2,a
   0122 E4                  811 	clr	a
   0123 08                  812 	inc	r0
   0124 36                  813 	addc	a,@r0
   0125 FB                  814 	mov	r3,a
   0126 08                  815 	inc	r0
   0127 86 04               816 	mov	ar4,@r0
   0129 8A 82               817 	mov	dpl,r2
   012B 8B 83               818 	mov	dph,r3
   012D 8C F0               819 	mov	b,r4
   012F E5*00               820 	mov	a,_bp
   0131 24 FC               821 	add	a,#0xfc
   0133 F8                  822 	mov	r0,a
   0134 E6                  823 	mov	a,@r0
   0135 12s00r00            824 	lcall	__gptrput
   0138 A3                  825 	inc	dptr
   0139 08                  826 	inc	r0
   013A E6                  827 	mov	a,@r0
   013B 12s00r00            828 	lcall	__gptrput
                            829 ;	../../../core/net/rime/rudolph1.c:110: p->datalen = read_data(c, p->data, chunk);
   013E E5*00               830 	mov	a,_bp
   0140 24 04               831 	add	a,#0x04
   0142 F8                  832 	mov	r0,a
   0143 74 04               833 	mov	a,#0x04
   0145 26                  834 	add	a,@r0
   0146 FA                  835 	mov	r2,a
   0147 E4                  836 	clr	a
   0148 08                  837 	inc	r0
   0149 36                  838 	addc	a,@r0
   014A FB                  839 	mov	r3,a
   014B 08                  840 	inc	r0
   014C 86 04               841 	mov	ar4,@r0
   014E E5*00               842 	mov	a,_bp
   0150 24 04               843 	add	a,#0x04
   0152 F8                  844 	mov	r0,a
   0153 74 05               845 	mov	a,#0x05
   0155 26                  846 	add	a,@r0
   0156 FF                  847 	mov	r7,a
   0157 E4                  848 	clr	a
   0158 08                  849 	inc	r0
   0159 36                  850 	addc	a,@r0
   015A FD                  851 	mov	r5,a
   015B 08                  852 	inc	r0
   015C 86 06               853 	mov	ar6,@r0
   015E C0 02               854 	push	ar2
   0160 C0 03               855 	push	ar3
   0162 C0 04               856 	push	ar4
   0164 E5*00               857 	mov	a,_bp
   0166 24 FC               858 	add	a,#0xfc
   0168 F8                  859 	mov	r0,a
   0169 E6                  860 	mov	a,@r0
   016A C0 E0               861 	push	acc
   016C 08                  862 	inc	r0
   016D E6                  863 	mov	a,@r0
   016E C0 E0               864 	push	acc
   0170 C0 07               865 	push	ar7
   0172 C0 05               866 	push	ar5
   0174 C0 06               867 	push	ar6
   0176 A8*00               868 	mov	r0,_bp
   0178 08                  869 	inc	r0
   0179 86 82               870 	mov	dpl,@r0
   017B 08                  871 	inc	r0
   017C 86 83               872 	mov	dph,@r0
   017E 08                  873 	inc	r0
   017F 86 F0               874 	mov	b,@r0
   0181 12s00r00            875 	lcall	_read_data
   0184 AD 82               876 	mov	r5,dpl
   0186 E5 81               877 	mov	a,sp
   0188 24 FB               878 	add	a,#0xfb
   018A F5 81               879 	mov	sp,a
   018C D0 04               880 	pop	ar4
   018E D0 03               881 	pop	ar3
   0190 D0 02               882 	pop	ar2
   0192 8A 82               883 	mov	dpl,r2
   0194 8B 83               884 	mov	dph,r3
   0196 8C F0               885 	mov	b,r4
   0198 ED                  886 	mov	a,r5
   0199 12s00r00            887 	lcall	__gptrput
                            888 ;	../../../core/net/rime/rudolph1.c:112: (RUDOLPH1_DATASIZE - p->datalen));
   019C 7E 00               889 	mov	r6,#0x00
   019E 74 40               890 	mov	a,#0x40
   01A0 C3                  891 	clr	c
   01A1 9D                  892 	subb	a,r5
   01A2 FD                  893 	mov	r5,a
   01A3 E4                  894 	clr	a
   01A4 9E                  895 	subb	a,r6
   01A5 FE                  896 	mov	r6,a
   01A6 74 45               897 	mov	a,#0x45
   01A8 C3                  898 	clr	c
   01A9 9D                  899 	subb	a,r5
   01AA FD                  900 	mov	r5,a
   01AB E4                  901 	clr	a
   01AC 9E                  902 	subb	a,r6
   01AD FE                  903 	mov	r6,a
   01AE 8D 82               904 	mov	dpl,r5
   01B0 8E 83               905 	mov	dph,r6
   01B2 C0 02               906 	push	ar2
   01B4 C0 03               907 	push	ar3
   01B6 C0 04               908 	push	ar4
   01B8 12s00r00            909 	lcall	_packetbuf_set_datalen
   01BB D0 04               910 	pop	ar4
   01BD D0 03               911 	pop	ar3
   01BF D0 02               912 	pop	ar2
                            913 ;	../../../core/net/rime/rudolph1.c:114: return p->datalen;
   01C1 8A 82               914 	mov	dpl,r2
   01C3 8B 83               915 	mov	dph,r3
   01C5 8C F0               916 	mov	b,r4
   01C7 12s00r00            917 	lcall	__gptrget
   01CA FA                  918 	mov	r2,a
   01CB 7B 00               919 	mov	r3,#0x00
   01CD 8A 82               920 	mov	dpl,r2
   01CF 8B 83               921 	mov	dph,r3
   01D1 85*00 81            922 	mov	sp,_bp
   01D4 D0*00               923 	pop	_bp
   01D6 22                  924 	ret
                            925 ;------------------------------------------------------------
                            926 ;Allocation info for local variables in function 'write_data'
                            927 ;------------------------------------------------------------
                            928 ;chunk                     Allocated to stack - offset -4
                            929 ;data                      Allocated to stack - offset -7
                            930 ;datalen                   Allocated to stack - offset -9
                            931 ;c                         Allocated to stack - offset 1
                            932 ;------------------------------------------------------------
                            933 ;	../../../core/net/rime/rudolph1.c:118: write_data(struct rudolph1_conn *c, int chunk, uint8_t *data, int datalen)
                            934 ;	-----------------------------------------
                            935 ;	 function write_data
                            936 ;	-----------------------------------------
   01D7                     937 _write_data:
   01D7 C0*00               938 	push	_bp
   01D9 85 81*00            939 	mov	_bp,sp
   01DC C0 82               940 	push	dpl
   01DE C0 83               941 	push	dph
   01E0 C0 F0               942 	push	b
                            943 ;	../../../core/net/rime/rudolph1.c:120: if(chunk == 0) {
   01E2 E5*00               944 	mov	a,_bp
   01E4 24 FC               945 	add	a,#0xfc
   01E6 F8                  946 	mov	r0,a
   01E7 E6                  947 	mov	a,@r0
   01E8 08                  948 	inc	r0
   01E9 46                  949 	orl	a,@r0
   01EA 70 78               950 	jnz	00102$
                            951 ;	../../../core/net/rime/rudolph1.c:121: c->cb->write_chunk(c, 0, RUDOLPH1_FLAG_NEWFILE, data, 0);
   01EC A8*00               952 	mov	r0,_bp
   01EE 08                  953 	inc	r0
   01EF 74 88               954 	mov	a,#0x88
   01F1 26                  955 	add	a,@r0
   01F2 FD                  956 	mov	r5,a
   01F3 E4                  957 	clr	a
   01F4 08                  958 	inc	r0
   01F5 36                  959 	addc	a,@r0
   01F6 FE                  960 	mov	r6,a
   01F7 08                  961 	inc	r0
   01F8 86 07               962 	mov	ar7,@r0
   01FA 8D 82               963 	mov	dpl,r5
   01FC 8E 83               964 	mov	dph,r6
   01FE 8F F0               965 	mov	b,r7
   0200 12s00r00            966 	lcall	__gptrget
   0203 FD                  967 	mov	r5,a
   0204 A3                  968 	inc	dptr
   0205 12s00r00            969 	lcall	__gptrget
   0208 FE                  970 	mov	r6,a
   0209 A3                  971 	inc	dptr
   020A 12s00r00            972 	lcall	__gptrget
   020D FF                  973 	mov	r7,a
   020E 8D 82               974 	mov	dpl,r5
   0210 8E 83               975 	mov	dph,r6
   0212 8F F0               976 	mov	b,r7
   0214 12s00r00            977 	lcall	__gptrget
   0217 FD                  978 	mov	r5,a
   0218 A3                  979 	inc	dptr
   0219 12s00r00            980 	lcall	__gptrget
   021C FE                  981 	mov	r6,a
   021D C0 05               982 	push	ar5
   021F C0 06               983 	push	ar6
   0221 E4                  984 	clr	a
   0222 C0 E0               985 	push	acc
   0224 C0 E0               986 	push	acc
   0226 E5*00               987 	mov	a,_bp
   0228 24 F9               988 	add	a,#0xf9
   022A F8                  989 	mov	r0,a
   022B E6                  990 	mov	a,@r0
   022C C0 E0               991 	push	acc
   022E 08                  992 	inc	r0
   022F E6                  993 	mov	a,@r0
   0230 C0 E0               994 	push	acc
   0232 08                  995 	inc	r0
   0233 E6                  996 	mov	a,@r0
   0234 C0 E0               997 	push	acc
   0236 74 01               998 	mov	a,#0x01
   0238 C0 E0               999 	push	acc
   023A E4                 1000 	clr	a
   023B C0 E0              1001 	push	acc
   023D E4                 1002 	clr	a
   023E C0 E0              1003 	push	acc
   0240 C0 E0              1004 	push	acc
   0242 74r5A              1005 	mov	a,#00111$
   0244 C0 E0              1006 	push	acc
   0246 74s02              1007 	mov	a,#(00111$ >> 8)
   0248 C0 E0              1008 	push	acc
   024A C0 05              1009 	push	ar5
   024C C0 06              1010 	push	ar6
   024E A8*00              1011 	mov	r0,_bp
   0250 08                 1012 	inc	r0
   0251 86 82              1013 	mov	dpl,@r0
   0253 08                 1014 	inc	r0
   0254 86 83              1015 	mov	dph,@r0
   0256 08                 1016 	inc	r0
   0257 86 F0              1017 	mov	b,@r0
   0259 22                 1018 	ret
   025A                    1019 00111$:
   025A E5 81              1020 	mov	a,sp
   025C 24 F7              1021 	add	a,#0xf7
   025E F5 81              1022 	mov	sp,a
   0260 D0 06              1023 	pop	ar6
   0262 D0 05              1024 	pop	ar5
   0264                    1025 00102$:
                           1026 ;	../../../core/net/rime/rudolph1.c:124: if(datalen < RUDOLPH1_DATASIZE) {
   0264 E5*00              1027 	mov	a,_bp
   0266 24 F7              1028 	add	a,#0xf7
   0268 F8                 1029 	mov	r0,a
   0269 C3                 1030 	clr	c
   026A E6                 1031 	mov	a,@r0
   026B 94 40              1032 	subb	a,#0x40
   026D 08                 1033 	inc	r0
   026E E6                 1034 	mov	a,@r0
   026F 64 80              1035 	xrl	a,#0x80
   0271 94 80              1036 	subb	a,#0x80
   0273 40 03              1037 	jc	00112$
   0275 02s03r12           1038 	ljmp	00104$
   0278                    1039 00112$:
                           1040 ;	../../../core/net/rime/rudolph1.c:128: c->cb->write_chunk(c, chunk * RUDOLPH1_DATASIZE,
   0278 A8*00              1041 	mov	r0,_bp
   027A 08                 1042 	inc	r0
   027B 74 88              1043 	mov	a,#0x88
   027D 26                 1044 	add	a,@r0
   027E FD                 1045 	mov	r5,a
   027F E4                 1046 	clr	a
   0280 08                 1047 	inc	r0
   0281 36                 1048 	addc	a,@r0
   0282 FE                 1049 	mov	r6,a
   0283 08                 1050 	inc	r0
   0284 86 07              1051 	mov	ar7,@r0
   0286 8D 82              1052 	mov	dpl,r5
   0288 8E 83              1053 	mov	dph,r6
   028A 8F F0              1054 	mov	b,r7
   028C 12s00r00           1055 	lcall	__gptrget
   028F FD                 1056 	mov	r5,a
   0290 A3                 1057 	inc	dptr
   0291 12s00r00           1058 	lcall	__gptrget
   0294 FE                 1059 	mov	r6,a
   0295 A3                 1060 	inc	dptr
   0296 12s00r00           1061 	lcall	__gptrget
   0299 FF                 1062 	mov	r7,a
   029A 8D 82              1063 	mov	dpl,r5
   029C 8E 83              1064 	mov	dph,r6
   029E 8F F0              1065 	mov	b,r7
   02A0 12s00r00           1066 	lcall	__gptrget
   02A3 FD                 1067 	mov	r5,a
   02A4 A3                 1068 	inc	dptr
   02A5 12s00r00           1069 	lcall	__gptrget
   02A8 FE                 1070 	mov	r6,a
   02A9 E5*00              1071 	mov	a,_bp
   02AB 24 FC              1072 	add	a,#0xfc
   02AD F8                 1073 	mov	r0,a
   02AE 86 07              1074 	mov	ar7,@r0
   02B0 08                 1075 	inc	r0
   02B1 E6                 1076 	mov	a,@r0
   02B2 54 03              1077 	anl	a,#0x03
   02B4 A2 E0              1078 	mov	c,acc.0
   02B6 CF                 1079 	xch	a,r7
   02B7 13                 1080 	rrc	a
   02B8 CF                 1081 	xch	a,r7
   02B9 13                 1082 	rrc	a
   02BA A2 E0              1083 	mov	c,acc.0
   02BC CF                 1084 	xch	a,r7
   02BD 13                 1085 	rrc	a
   02BE CF                 1086 	xch	a,r7
   02BF 13                 1087 	rrc	a
   02C0 CF                 1088 	xch	a,r7
   02C1 FA                 1089 	mov	r2,a
   02C2 C0 05              1090 	push	ar5
   02C4 C0 06              1091 	push	ar6
   02C6 E5*00              1092 	mov	a,_bp
   02C8 24 F7              1093 	add	a,#0xf7
   02CA F8                 1094 	mov	r0,a
   02CB E6                 1095 	mov	a,@r0
   02CC C0 E0              1096 	push	acc
   02CE 08                 1097 	inc	r0
   02CF E6                 1098 	mov	a,@r0
   02D0 C0 E0              1099 	push	acc
   02D2 E5*00              1100 	mov	a,_bp
   02D4 24 F9              1101 	add	a,#0xf9
   02D6 F8                 1102 	mov	r0,a
   02D7 E6                 1103 	mov	a,@r0
   02D8 C0 E0              1104 	push	acc
   02DA 08                 1105 	inc	r0
   02DB E6                 1106 	mov	a,@r0
   02DC C0 E0              1107 	push	acc
   02DE 08                 1108 	inc	r0
   02DF E6                 1109 	mov	a,@r0
   02E0 C0 E0              1110 	push	acc
   02E2 74 02              1111 	mov	a,#0x02
   02E4 C0 E0              1112 	push	acc
   02E6 E4                 1113 	clr	a
   02E7 C0 E0              1114 	push	acc
   02E9 C0 07              1115 	push	ar7
   02EB C0 02              1116 	push	ar2
   02ED 74r05              1117 	mov	a,#00113$
   02EF C0 E0              1118 	push	acc
   02F1 74s03              1119 	mov	a,#(00113$ >> 8)
   02F3 C0 E0              1120 	push	acc
   02F5 C0 05              1121 	push	ar5
   02F7 C0 06              1122 	push	ar6
   02F9 A8*00              1123 	mov	r0,_bp
   02FB 08                 1124 	inc	r0
   02FC 86 82              1125 	mov	dpl,@r0
   02FE 08                 1126 	inc	r0
   02FF 86 83              1127 	mov	dph,@r0
   0301 08                 1128 	inc	r0
   0302 86 F0              1129 	mov	b,@r0
   0304 22                 1130 	ret
   0305                    1131 00113$:
   0305 E5 81              1132 	mov	a,sp
   0307 24 F7              1133 	add	a,#0xf7
   0309 F5 81              1134 	mov	sp,a
   030B D0 06              1135 	pop	ar6
   030D D0 05              1136 	pop	ar5
   030F 02s03rA7           1137 	ljmp	00106$
   0312                    1138 00104$:
                           1139 ;	../../../core/net/rime/rudolph1.c:131: c->cb->write_chunk(c, chunk * RUDOLPH1_DATASIZE,
   0312 A8*00              1140 	mov	r0,_bp
   0314 08                 1141 	inc	r0
   0315 74 88              1142 	mov	a,#0x88
   0317 26                 1143 	add	a,@r0
   0318 FA                 1144 	mov	r2,a
   0319 E4                 1145 	clr	a
   031A 08                 1146 	inc	r0
   031B 36                 1147 	addc	a,@r0
   031C FB                 1148 	mov	r3,a
   031D 08                 1149 	inc	r0
   031E 86 04              1150 	mov	ar4,@r0
   0320 8A 82              1151 	mov	dpl,r2
   0322 8B 83              1152 	mov	dph,r3
   0324 8C F0              1153 	mov	b,r4
   0326 12s00r00           1154 	lcall	__gptrget
   0329 FA                 1155 	mov	r2,a
   032A A3                 1156 	inc	dptr
   032B 12s00r00           1157 	lcall	__gptrget
   032E FB                 1158 	mov	r3,a
   032F A3                 1159 	inc	dptr
   0330 12s00r00           1160 	lcall	__gptrget
   0333 FC                 1161 	mov	r4,a
   0334 8A 82              1162 	mov	dpl,r2
   0336 8B 83              1163 	mov	dph,r3
   0338 8C F0              1164 	mov	b,r4
   033A 12s00r00           1165 	lcall	__gptrget
   033D FA                 1166 	mov	r2,a
   033E A3                 1167 	inc	dptr
   033F 12s00r00           1168 	lcall	__gptrget
   0342 FB                 1169 	mov	r3,a
   0343 E5*00              1170 	mov	a,_bp
   0345 24 FC              1171 	add	a,#0xfc
   0347 F8                 1172 	mov	r0,a
   0348 86 04              1173 	mov	ar4,@r0
   034A 08                 1174 	inc	r0
   034B E6                 1175 	mov	a,@r0
   034C 54 03              1176 	anl	a,#0x03
   034E A2 E0              1177 	mov	c,acc.0
   0350 CC                 1178 	xch	a,r4
   0351 13                 1179 	rrc	a
   0352 CC                 1180 	xch	a,r4
   0353 13                 1181 	rrc	a
   0354 A2 E0              1182 	mov	c,acc.0
   0356 CC                 1183 	xch	a,r4
   0357 13                 1184 	rrc	a
   0358 CC                 1185 	xch	a,r4
   0359 13                 1186 	rrc	a
   035A CC                 1187 	xch	a,r4
   035B FD                 1188 	mov	r5,a
   035C C0 02              1189 	push	ar2
   035E C0 03              1190 	push	ar3
   0360 E5*00              1191 	mov	a,_bp
   0362 24 F7              1192 	add	a,#0xf7
   0364 F8                 1193 	mov	r0,a
   0365 E6                 1194 	mov	a,@r0
   0366 C0 E0              1195 	push	acc
   0368 08                 1196 	inc	r0
   0369 E6                 1197 	mov	a,@r0
   036A C0 E0              1198 	push	acc
   036C E5*00              1199 	mov	a,_bp
   036E 24 F9              1200 	add	a,#0xf9
   0370 F8                 1201 	mov	r0,a
   0371 E6                 1202 	mov	a,@r0
   0372 C0 E0              1203 	push	acc
   0374 08                 1204 	inc	r0
   0375 E6                 1205 	mov	a,@r0
   0376 C0 E0              1206 	push	acc
   0378 08                 1207 	inc	r0
   0379 E6                 1208 	mov	a,@r0
   037A C0 E0              1209 	push	acc
   037C E4                 1210 	clr	a
   037D C0 E0              1211 	push	acc
   037F C0 E0              1212 	push	acc
   0381 C0 04              1213 	push	ar4
   0383 C0 05              1214 	push	ar5
   0385 74r9D              1215 	mov	a,#00114$
   0387 C0 E0              1216 	push	acc
   0389 74s03              1217 	mov	a,#(00114$ >> 8)
   038B C0 E0              1218 	push	acc
   038D C0 02              1219 	push	ar2
   038F C0 03              1220 	push	ar3
   0391 A8*00              1221 	mov	r0,_bp
   0393 08                 1222 	inc	r0
   0394 86 82              1223 	mov	dpl,@r0
   0396 08                 1224 	inc	r0
   0397 86 83              1225 	mov	dph,@r0
   0399 08                 1226 	inc	r0
   039A 86 F0              1227 	mov	b,@r0
   039C 22                 1228 	ret
   039D                    1229 00114$:
   039D E5 81              1230 	mov	a,sp
   039F 24 F7              1231 	add	a,#0xf7
   03A1 F5 81              1232 	mov	sp,a
   03A3 D0 03              1233 	pop	ar3
   03A5 D0 02              1234 	pop	ar2
   03A7                    1235 00106$:
   03A7 85*00 81           1236 	mov	sp,_bp
   03AA D0*00              1237 	pop	_bp
   03AC 22                 1238 	ret
                           1239 ;------------------------------------------------------------
                           1240 ;Allocation info for local variables in function 'send_nack'
                           1241 ;------------------------------------------------------------
                           1242 ;c                         Allocated to stack - offset 1
                           1243 ;hdr                       Allocated to stack - offset 4
                           1244 ;------------------------------------------------------------
                           1245 ;	../../../core/net/rime/rudolph1.c:137: send_nack(struct rudolph1_conn *c)
                           1246 ;	-----------------------------------------
                           1247 ;	 function send_nack
                           1248 ;	-----------------------------------------
   03AD                    1249 _send_nack:
   03AD C0*00              1250 	push	_bp
   03AF 85 81*00           1251 	mov	_bp,sp
   03B2 C0 82              1252 	push	dpl
   03B4 C0 83              1253 	push	dph
   03B6 C0 F0              1254 	push	b
   03B8 05 81              1255 	inc	sp
   03BA 05 81              1256 	inc	sp
   03BC 05 81              1257 	inc	sp
                           1258 ;	../../../core/net/rime/rudolph1.c:140: packetbuf_clear();
   03BE 12s00r00           1259 	lcall	_packetbuf_clear
                           1260 ;	../../../core/net/rime/rudolph1.c:141: packetbuf_hdralloc(sizeof(struct rudolph1_hdr));
   03C1 90 00 04           1261 	mov	dptr,#0x0004
   03C4 12s00r00           1262 	lcall	_packetbuf_hdralloc
                           1263 ;	../../../core/net/rime/rudolph1.c:142: hdr = packetbuf_hdrptr();
   03C7 12s00r00           1264 	lcall	_packetbuf_hdrptr
   03CA AD 82              1265 	mov	r5,dpl
   03CC AE 83              1266 	mov	r6,dph
   03CE AF F0              1267 	mov	r7,b
   03D0 E5*00              1268 	mov	a,_bp
   03D2 24 04              1269 	add	a,#0x04
   03D4 F8                 1270 	mov	r0,a
   03D5 A6 05              1271 	mov	@r0,ar5
   03D7 08                 1272 	inc	r0
   03D8 A6 06              1273 	mov	@r0,ar6
   03DA 08                 1274 	inc	r0
   03DB A6 07              1275 	mov	@r0,ar7
                           1276 ;	../../../core/net/rime/rudolph1.c:144: hdr->type = TYPE_NACK;
   03DD E5*00              1277 	mov	a,_bp
   03DF 24 04              1278 	add	a,#0x04
   03E1 F8                 1279 	mov	r0,a
   03E2 86 82              1280 	mov	dpl,@r0
   03E4 08                 1281 	inc	r0
   03E5 86 83              1282 	mov	dph,@r0
   03E7 08                 1283 	inc	r0
   03E8 86 F0              1284 	mov	b,@r0
   03EA 74 01              1285 	mov	a,#0x01
   03EC 12s00r00           1286 	lcall	__gptrput
                           1287 ;	../../../core/net/rime/rudolph1.c:145: hdr->version = c->version;
   03EF E5*00              1288 	mov	a,_bp
   03F1 24 04              1289 	add	a,#0x04
   03F3 F8                 1290 	mov	r0,a
   03F4 74 01              1291 	mov	a,#0x01
   03F6 26                 1292 	add	a,@r0
   03F7 FA                 1293 	mov	r2,a
   03F8 E4                 1294 	clr	a
   03F9 08                 1295 	inc	r0
   03FA 36                 1296 	addc	a,@r0
   03FB FB                 1297 	mov	r3,a
   03FC 08                 1298 	inc	r0
   03FD 86 04              1299 	mov	ar4,@r0
   03FF A8*00              1300 	mov	r0,_bp
   0401 08                 1301 	inc	r0
   0402 74 A6              1302 	mov	a,#0xA6
   0404 26                 1303 	add	a,@r0
   0405 FD                 1304 	mov	r5,a
   0406 E4                 1305 	clr	a
   0407 08                 1306 	inc	r0
   0408 36                 1307 	addc	a,@r0
   0409 FE                 1308 	mov	r6,a
   040A 08                 1309 	inc	r0
   040B 86 07              1310 	mov	ar7,@r0
   040D 8D 82              1311 	mov	dpl,r5
   040F 8E 83              1312 	mov	dph,r6
   0411 8F F0              1313 	mov	b,r7
   0413 12s00r00           1314 	lcall	__gptrget
   0416 8A 82              1315 	mov	dpl,r2
   0418 8B 83              1316 	mov	dph,r3
   041A 8C F0              1317 	mov	b,r4
   041C 12s00r00           1318 	lcall	__gptrput
                           1319 ;	../../../core/net/rime/rudolph1.c:146: hdr->chunk = c->chunk;
   041F E5*00              1320 	mov	a,_bp
   0421 24 04              1321 	add	a,#0x04
   0423 F8                 1322 	mov	r0,a
   0424 74 02              1323 	mov	a,#0x02
   0426 26                 1324 	add	a,@r0
   0427 FA                 1325 	mov	r2,a
   0428 E4                 1326 	clr	a
   0429 08                 1327 	inc	r0
   042A 36                 1328 	addc	a,@r0
   042B FB                 1329 	mov	r3,a
   042C 08                 1330 	inc	r0
   042D 86 04              1331 	mov	ar4,@r0
   042F A8*00              1332 	mov	r0,_bp
   0431 08                 1333 	inc	r0
   0432 74 A2              1334 	mov	a,#0xA2
   0434 26                 1335 	add	a,@r0
   0435 FD                 1336 	mov	r5,a
   0436 E4                 1337 	clr	a
   0437 08                 1338 	inc	r0
   0438 36                 1339 	addc	a,@r0
   0439 FE                 1340 	mov	r6,a
   043A 08                 1341 	inc	r0
   043B 86 07              1342 	mov	ar7,@r0
   043D 8D 82              1343 	mov	dpl,r5
   043F 8E 83              1344 	mov	dph,r6
   0441 8F F0              1345 	mov	b,r7
   0443 12s00r00           1346 	lcall	__gptrget
   0446 FD                 1347 	mov	r5,a
   0447 A3                 1348 	inc	dptr
   0448 12s00r00           1349 	lcall	__gptrget
   044B FE                 1350 	mov	r6,a
   044C 8A 82              1351 	mov	dpl,r2
   044E 8B 83              1352 	mov	dph,r3
   0450 8C F0              1353 	mov	b,r4
   0452 ED                 1354 	mov	a,r5
   0453 12s00r00           1355 	lcall	__gptrput
   0456 A3                 1356 	inc	dptr
   0457 EE                 1357 	mov	a,r6
   0458 12s00r00           1358 	lcall	__gptrput
                           1359 ;	../../../core/net/rime/rudolph1.c:151: ipolite_send(&c->ipolite, NACK_TIMEOUT, sizeof(struct rudolph1_hdr));
   045B A8*00              1360 	mov	r0,_bp
   045D 08                 1361 	inc	r0
   045E 74 5B              1362 	mov	a,#0x5B
   0460 26                 1363 	add	a,@r0
   0461 FA                 1364 	mov	r2,a
   0462 E4                 1365 	clr	a
   0463 08                 1366 	inc	r0
   0464 36                 1367 	addc	a,@r0
   0465 FB                 1368 	mov	r3,a
   0466 08                 1369 	inc	r0
   0467 86 04              1370 	mov	ar4,@r0
   0469 74 04              1371 	mov	a,#0x04
   046B C0 E0              1372 	push	acc
   046D 74 20              1373 	mov	a,#0x20
   046F C0 E0              1374 	push	acc
   0471 E4                 1375 	clr	a
   0472 C0 E0              1376 	push	acc
   0474 8A 82              1377 	mov	dpl,r2
   0476 8B 83              1378 	mov	dph,r3
   0478 8C F0              1379 	mov	b,r4
   047A 12s00r00           1380 	lcall	_ipolite_send
   047D 15 81              1381 	dec	sp
   047F 15 81              1382 	dec	sp
   0481 15 81              1383 	dec	sp
   0483 85*00 81           1384 	mov	sp,_bp
   0486 D0*00              1385 	pop	_bp
   0488 22                 1386 	ret
                           1387 ;------------------------------------------------------------
                           1388 ;Allocation info for local variables in function 'handle_data'
                           1389 ;------------------------------------------------------------
                           1390 ;p                         Allocated to stack - offset -5
                           1391 ;c                         Allocated to stack - offset 1
                           1392 ;sloc0                     Allocated to stack - offset 4
                           1393 ;sloc1                     Allocated to stack - offset 5
                           1394 ;sloc2                     Allocated to stack - offset 8
                           1395 ;sloc3                     Allocated to stack - offset 11
                           1396 ;sloc4                     Allocated to stack - offset 13
                           1397 ;------------------------------------------------------------
                           1398 ;	../../../core/net/rime/rudolph1.c:155: handle_data(struct rudolph1_conn *c, struct rudolph1_datapacket *p)
                           1399 ;	-----------------------------------------
                           1400 ;	 function handle_data
                           1401 ;	-----------------------------------------
   0489                    1402 _handle_data:
   0489 C0*00              1403 	push	_bp
   048B 85 81*00           1404 	mov	_bp,sp
   048E C0 82              1405 	push	dpl
   0490 C0 83              1406 	push	dph
   0492 C0 F0              1407 	push	b
   0494 E5 81              1408 	mov	a,sp
   0496 24 0F              1409 	add	a,#0x0f
   0498 F5 81              1410 	mov	sp,a
                           1411 ;	../../../core/net/rime/rudolph1.c:157: if(LT(c->version, p->h.version)) {
   049A A8*00              1412 	mov	r0,_bp
   049C 08                 1413 	inc	r0
   049D 74 A6              1414 	mov	a,#0xA6
   049F 26                 1415 	add	a,@r0
   04A0 FD                 1416 	mov	r5,a
   04A1 E4                 1417 	clr	a
   04A2 08                 1418 	inc	r0
   04A3 36                 1419 	addc	a,@r0
   04A4 FE                 1420 	mov	r6,a
   04A5 08                 1421 	inc	r0
   04A6 86 07              1422 	mov	ar7,@r0
   04A8 8D 82              1423 	mov	dpl,r5
   04AA 8E 83              1424 	mov	dph,r6
   04AC 8F F0              1425 	mov	b,r7
   04AE E5*00              1426 	mov	a,_bp
   04B0 24 04              1427 	add	a,#0x04
   04B2 F8                 1428 	mov	r0,a
   04B3 12s00r00           1429 	lcall	__gptrget
   04B6 F6                 1430 	mov	@r0,a
   04B7 E5*00              1431 	mov	a,_bp
   04B9 24 FB              1432 	add	a,#0xfb
   04BB F8                 1433 	mov	r0,a
   04BC E5*00              1434 	mov	a,_bp
   04BE 24 05              1435 	add	a,#0x05
   04C0 F9                 1436 	mov	r1,a
   04C1 E6                 1437 	mov	a,@r0
   04C2 F7                 1438 	mov	@r1,a
   04C3 08                 1439 	inc	r0
   04C4 09                 1440 	inc	r1
   04C5 E6                 1441 	mov	a,@r0
   04C6 F7                 1442 	mov	@r1,a
   04C7 08                 1443 	inc	r0
   04C8 09                 1444 	inc	r1
   04C9 E6                 1445 	mov	a,@r0
   04CA F7                 1446 	mov	@r1,a
   04CB E5*00              1447 	mov	a,_bp
   04CD 24 05              1448 	add	a,#0x05
   04CF F8                 1449 	mov	r0,a
   04D0 74 01              1450 	mov	a,#0x01
   04D2 26                 1451 	add	a,@r0
   04D3 FA                 1452 	mov	r2,a
   04D4 E4                 1453 	clr	a
   04D5 08                 1454 	inc	r0
   04D6 36                 1455 	addc	a,@r0
   04D7 FB                 1456 	mov	r3,a
   04D8 08                 1457 	inc	r0
   04D9 86 04              1458 	mov	ar4,@r0
   04DB 8A 82              1459 	mov	dpl,r2
   04DD 8B 83              1460 	mov	dph,r3
   04DF 8C F0              1461 	mov	b,r4
   04E1 12s00r00           1462 	lcall	__gptrget
   04E4 FA                 1463 	mov	r2,a
   04E5 E5*00              1464 	mov	a,_bp
   04E7 24 04              1465 	add	a,#0x04
   04E9 F8                 1466 	mov	r0,a
   04EA E6                 1467 	mov	a,@r0
   04EB C3                 1468 	clr	c
   04EC 9A                 1469 	subb	a,r2
   04ED FB                 1470 	mov	r3,a
   04EE 20 E7 03           1471 	jb	acc.7,00128$
   04F1 02s05rDB           1472 	ljmp	00117$
   04F4                    1473 00128$:
                           1474 ;	../../../core/net/rime/rudolph1.c:161: c->version = p->h.version;
   04F4 8D 82              1475 	mov	dpl,r5
   04F6 8E 83              1476 	mov	dph,r6
   04F8 8F F0              1477 	mov	b,r7
   04FA EA                 1478 	mov	a,r2
   04FB 12s00r00           1479 	lcall	__gptrput
                           1480 ;	../../../core/net/rime/rudolph1.c:162: c->highest_chunk_heard = c->chunk = 0;
   04FE A8*00              1481 	mov	r0,_bp
   0500 08                 1482 	inc	r0
   0501 74 A4              1483 	mov	a,#0xA4
   0503 26                 1484 	add	a,@r0
   0504 FA                 1485 	mov	r2,a
   0505 E4                 1486 	clr	a
   0506 08                 1487 	inc	r0
   0507 36                 1488 	addc	a,@r0
   0508 FC                 1489 	mov	r4,a
   0509 08                 1490 	inc	r0
   050A 86 05              1491 	mov	ar5,@r0
   050C A8*00              1492 	mov	r0,_bp
   050E 08                 1493 	inc	r0
   050F 74 A2              1494 	mov	a,#0xA2
   0511 26                 1495 	add	a,@r0
   0512 FE                 1496 	mov	r6,a
   0513 E4                 1497 	clr	a
   0514 08                 1498 	inc	r0
   0515 36                 1499 	addc	a,@r0
   0516 FF                 1500 	mov	r7,a
   0517 08                 1501 	inc	r0
   0518 86 03              1502 	mov	ar3,@r0
   051A 8E 82              1503 	mov	dpl,r6
   051C 8F 83              1504 	mov	dph,r7
   051E 8B F0              1505 	mov	b,r3
   0520 E4                 1506 	clr	a
   0521 12s00r00           1507 	lcall	__gptrput
   0524 A3                 1508 	inc	dptr
   0525 E4                 1509 	clr	a
   0526 12s00r00           1510 	lcall	__gptrput
   0529 8A 82              1511 	mov	dpl,r2
   052B 8C 83              1512 	mov	dph,r4
   052D 8D F0              1513 	mov	b,r5
   052F E4                 1514 	clr	a
   0530 12s00r00           1515 	lcall	__gptrput
   0533 A3                 1516 	inc	dptr
   0534 E4                 1517 	clr	a
   0535 12s00r00           1518 	lcall	__gptrput
                           1519 ;	../../../core/net/rime/rudolph1.c:163: if(p->h.chunk != 0) {
   0538 E5*00              1520 	mov	a,_bp
   053A 24 05              1521 	add	a,#0x05
   053C F8                 1522 	mov	r0,a
   053D 74 02              1523 	mov	a,#0x02
   053F 26                 1524 	add	a,@r0
   0540 FB                 1525 	mov	r3,a
   0541 E4                 1526 	clr	a
   0542 08                 1527 	inc	r0
   0543 36                 1528 	addc	a,@r0
   0544 FC                 1529 	mov	r4,a
   0545 08                 1530 	inc	r0
   0546 86 05              1531 	mov	ar5,@r0
   0548 8B 82              1532 	mov	dpl,r3
   054A 8C 83              1533 	mov	dph,r4
   054C 8D F0              1534 	mov	b,r5
   054E 12s00r00           1535 	lcall	__gptrget
   0551 FB                 1536 	mov	r3,a
   0552 A3                 1537 	inc	dptr
   0553 12s00r00           1538 	lcall	__gptrget
   0556 FC                 1539 	mov	r4,a
   0557 4B                 1540 	orl	a,r3
   0558 60 11              1541 	jz	00102$
                           1542 ;	../../../core/net/rime/rudolph1.c:164: send_nack(c);
   055A A8*00              1543 	mov	r0,_bp
   055C 08                 1544 	inc	r0
   055D 86 82              1545 	mov	dpl,@r0
   055F 08                 1546 	inc	r0
   0560 86 83              1547 	mov	dph,@r0
   0562 08                 1548 	inc	r0
   0563 86 F0              1549 	mov	b,@r0
   0565 12s03rAD           1550 	lcall	_send_nack
   0568 02s07rEF           1551 	ljmp	00119$
   056B                    1552 00102$:
                           1553 ;	../../../core/net/rime/rudolph1.c:166: write_data(c, 0, p->data, p->datalen);
   056B E5*00              1554 	mov	a,_bp
   056D 24 05              1555 	add	a,#0x05
   056F F8                 1556 	mov	r0,a
   0570 74 04              1557 	mov	a,#0x04
   0572 26                 1558 	add	a,@r0
   0573 FB                 1559 	mov	r3,a
   0574 E4                 1560 	clr	a
   0575 08                 1561 	inc	r0
   0576 36                 1562 	addc	a,@r0
   0577 FC                 1563 	mov	r4,a
   0578 08                 1564 	inc	r0
   0579 86 05              1565 	mov	ar5,@r0
   057B 8B 82              1566 	mov	dpl,r3
   057D 8C 83              1567 	mov	dph,r4
   057F 8D F0              1568 	mov	b,r5
   0581 12s00r00           1569 	lcall	__gptrget
   0584 FB                 1570 	mov	r3,a
   0585 7C 00              1571 	mov	r4,#0x00
   0587 E5*00              1572 	mov	a,_bp
   0589 24 05              1573 	add	a,#0x05
   058B F8                 1574 	mov	r0,a
   058C 74 05              1575 	mov	a,#0x05
   058E 26                 1576 	add	a,@r0
   058F FD                 1577 	mov	r5,a
   0590 E4                 1578 	clr	a
   0591 08                 1579 	inc	r0
   0592 36                 1580 	addc	a,@r0
   0593 FE                 1581 	mov	r6,a
   0594 08                 1582 	inc	r0
   0595 86 07              1583 	mov	ar7,@r0
   0597 C0 03              1584 	push	ar3
   0599 C0 04              1585 	push	ar4
   059B C0 05              1586 	push	ar5
   059D C0 06              1587 	push	ar6
   059F C0 07              1588 	push	ar7
   05A1 E4                 1589 	clr	a
   05A2 C0 E0              1590 	push	acc
   05A4 C0 E0              1591 	push	acc
   05A6 A8*00              1592 	mov	r0,_bp
   05A8 08                 1593 	inc	r0
   05A9 86 82              1594 	mov	dpl,@r0
   05AB 08                 1595 	inc	r0
   05AC 86 83              1596 	mov	dph,@r0
   05AE 08                 1597 	inc	r0
   05AF 86 F0              1598 	mov	b,@r0
   05B1 12s01rD7           1599 	lcall	_write_data
   05B4 E5 81              1600 	mov	a,sp
   05B6 24 F9              1601 	add	a,#0xf9
   05B8 F5 81              1602 	mov	sp,a
                           1603 ;	../../../core/net/rime/rudolph1.c:167: c->chunk = 1; /* Next chunk is 1. */
   05BA A8*00              1604 	mov	r0,_bp
   05BC 08                 1605 	inc	r0
   05BD 74 A2              1606 	mov	a,#0xA2
   05BF 26                 1607 	add	a,@r0
   05C0 FB                 1608 	mov	r3,a
   05C1 E4                 1609 	clr	a
   05C2 08                 1610 	inc	r0
   05C3 36                 1611 	addc	a,@r0
   05C4 FC                 1612 	mov	r4,a
   05C5 08                 1613 	inc	r0
   05C6 86 05              1614 	mov	ar5,@r0
   05C8 8B 82              1615 	mov	dpl,r3
   05CA 8C 83              1616 	mov	dph,r4
   05CC 8D F0              1617 	mov	b,r5
   05CE 74 01              1618 	mov	a,#0x01
   05D0 12s00r00           1619 	lcall	__gptrput
   05D3 A3                 1620 	inc	dptr
   05D4 E4                 1621 	clr	a
   05D5 12s00r00           1622 	lcall	__gptrput
   05D8 02s07rEF           1623 	ljmp	00119$
   05DB                    1624 00117$:
                           1625 ;	../../../core/net/rime/rudolph1.c:170: } else if(p->h.version == c->version) {
   05DB E5*00              1626 	mov	a,_bp
   05DD 24 04              1627 	add	a,#0x04
   05DF F8                 1628 	mov	r0,a
   05E0 E6                 1629 	mov	a,@r0
   05E1 B5 02 02           1630 	cjne	a,ar2,00130$
   05E4 80 03              1631 	sjmp	00131$
   05E6                    1632 00130$:
   05E6 02s07rEF           1633 	ljmp	00119$
   05E9                    1634 00131$:
                           1635 ;	../../../core/net/rime/rudolph1.c:175: if(p->h.chunk == c->chunk) {
   05E9 E5*00              1636 	mov	a,_bp
   05EB 24 05              1637 	add	a,#0x05
   05ED F8                 1638 	mov	r0,a
   05EE 74 02              1639 	mov	a,#0x02
   05F0 26                 1640 	add	a,@r0
   05F1 FA                 1641 	mov	r2,a
   05F2 E4                 1642 	clr	a
   05F3 08                 1643 	inc	r0
   05F4 36                 1644 	addc	a,@r0
   05F5 FB                 1645 	mov	r3,a
   05F6 08                 1646 	inc	r0
   05F7 86 04              1647 	mov	ar4,@r0
   05F9 8A 82              1648 	mov	dpl,r2
   05FB 8B 83              1649 	mov	dph,r3
   05FD 8C F0              1650 	mov	b,r4
   05FF E5*00              1651 	mov	a,_bp
   0601 24 08              1652 	add	a,#0x08
   0603 F8                 1653 	mov	r0,a
   0604 12s00r00           1654 	lcall	__gptrget
   0607 F6                 1655 	mov	@r0,a
   0608 A3                 1656 	inc	dptr
   0609 12s00r00           1657 	lcall	__gptrget
   060C 08                 1658 	inc	r0
   060D F6                 1659 	mov	@r0,a
   060E A8*00              1660 	mov	r0,_bp
   0610 08                 1661 	inc	r0
   0611 74 A2              1662 	mov	a,#0xA2
   0613 26                 1663 	add	a,@r0
   0614 FF                 1664 	mov	r7,a
   0615 E4                 1665 	clr	a
   0616 08                 1666 	inc	r0
   0617 36                 1667 	addc	a,@r0
   0618 FD                 1668 	mov	r5,a
   0619 08                 1669 	inc	r0
   061A 86 06              1670 	mov	ar6,@r0
   061C 8F 82              1671 	mov	dpl,r7
   061E 8D 83              1672 	mov	dph,r5
   0620 8E F0              1673 	mov	b,r6
   0622 12s00r00           1674 	lcall	__gptrget
   0625 FD                 1675 	mov	r5,a
   0626 A3                 1676 	inc	dptr
   0627 12s00r00           1677 	lcall	__gptrget
   062A FE                 1678 	mov	r6,a
   062B E5*00              1679 	mov	a,_bp
   062D 24 08              1680 	add	a,#0x08
   062F F8                 1681 	mov	r0,a
   0630 E6                 1682 	mov	a,@r0
   0631 B5 05 07           1683 	cjne	a,ar5,00132$
   0634 08                 1684 	inc	r0
   0635 E6                 1685 	mov	a,@r0
   0636 B5 06 02           1686 	cjne	a,ar6,00132$
   0639 80 03              1687 	sjmp	00133$
   063B                    1688 00132$:
   063B 02s07r4D           1689 	ljmp	00110$
   063E                    1690 00133$:
                           1691 ;	../../../core/net/rime/rudolph1.c:179: write_data(c, p->h.chunk, p->data, p->datalen);
   063E C0 02              1692 	push	ar2
   0640 C0 03              1693 	push	ar3
   0642 C0 04              1694 	push	ar4
   0644 E5*00              1695 	mov	a,_bp
   0646 24 05              1696 	add	a,#0x05
   0648 F8                 1697 	mov	r0,a
   0649 74 04              1698 	mov	a,#0x04
   064B 26                 1699 	add	a,@r0
   064C FF                 1700 	mov	r7,a
   064D E4                 1701 	clr	a
   064E 08                 1702 	inc	r0
   064F 36                 1703 	addc	a,@r0
   0650 FA                 1704 	mov	r2,a
   0651 08                 1705 	inc	r0
   0652 86 03              1706 	mov	ar3,@r0
   0654 8F 82              1707 	mov	dpl,r7
   0656 8A 83              1708 	mov	dph,r2
   0658 8B F0              1709 	mov	b,r3
   065A 12s00r00           1710 	lcall	__gptrget
   065D FF                 1711 	mov	r7,a
   065E 7D 00              1712 	mov	r5,#0x00
   0660 E5*00              1713 	mov	a,_bp
   0662 24 05              1714 	add	a,#0x05
   0664 F8                 1715 	mov	r0,a
   0665 74 05              1716 	mov	a,#0x05
   0667 26                 1717 	add	a,@r0
   0668 FB                 1718 	mov	r3,a
   0669 E4                 1719 	clr	a
   066A 08                 1720 	inc	r0
   066B 36                 1721 	addc	a,@r0
   066C FC                 1722 	mov	r4,a
   066D 08                 1723 	inc	r0
   066E 86 02              1724 	mov	ar2,@r0
   0670 C0 02              1725 	push	ar2
   0672 C0 03              1726 	push	ar3
   0674 C0 04              1727 	push	ar4
   0676 C0 07              1728 	push	ar7
   0678 C0 05              1729 	push	ar5
   067A C0 03              1730 	push	ar3
   067C C0 04              1731 	push	ar4
   067E C0 02              1732 	push	ar2
   0680 E5*00              1733 	mov	a,_bp
   0682 24 08              1734 	add	a,#0x08
   0684 F8                 1735 	mov	r0,a
   0685 E6                 1736 	mov	a,@r0
   0686 C0 E0              1737 	push	acc
   0688 08                 1738 	inc	r0
   0689 E6                 1739 	mov	a,@r0
   068A C0 E0              1740 	push	acc
   068C A8*00              1741 	mov	r0,_bp
   068E 08                 1742 	inc	r0
   068F 86 82              1743 	mov	dpl,@r0
   0691 08                 1744 	inc	r0
   0692 86 83              1745 	mov	dph,@r0
   0694 08                 1746 	inc	r0
   0695 86 F0              1747 	mov	b,@r0
   0697 12s01rD7           1748 	lcall	_write_data
   069A E5 81              1749 	mov	a,sp
   069C 24 F9              1750 	add	a,#0xf9
   069E F5 81              1751 	mov	sp,a
   06A0 D0 04              1752 	pop	ar4
   06A2 D0 03              1753 	pop	ar3
   06A4 D0 02              1754 	pop	ar2
                           1755 ;	../../../core/net/rime/rudolph1.c:180: if(c->highest_chunk_heard < c->chunk) {
   06A6 A8*00              1756 	mov	r0,_bp
   06A8 08                 1757 	inc	r0
   06A9 74 A4              1758 	mov	a,#0xA4
   06AB 26                 1759 	add	a,@r0
   06AC FD                 1760 	mov	r5,a
   06AD E4                 1761 	clr	a
   06AE 08                 1762 	inc	r0
   06AF 36                 1763 	addc	a,@r0
   06B0 FE                 1764 	mov	r6,a
   06B1 08                 1765 	inc	r0
   06B2 86 07              1766 	mov	ar7,@r0
   06B4 8D 82              1767 	mov	dpl,r5
   06B6 8E 83              1768 	mov	dph,r6
   06B8 8F F0              1769 	mov	b,r7
   06BA 12s00r00           1770 	lcall	__gptrget
   06BD FA                 1771 	mov	r2,a
   06BE A3                 1772 	inc	dptr
   06BF 12s00r00           1773 	lcall	__gptrget
   06C2 FB                 1774 	mov	r3,a
   06C3 A8*00              1775 	mov	r0,_bp
   06C5 08                 1776 	inc	r0
   06C6 E5*00              1777 	mov	a,_bp
   06C8 24 0D              1778 	add	a,#0x0d
   06CA F9                 1779 	mov	r1,a
   06CB 74 A2              1780 	mov	a,#0xA2
   06CD 26                 1781 	add	a,@r0
   06CE F7                 1782 	mov	@r1,a
   06CF E4                 1783 	clr	a
   06D0 08                 1784 	inc	r0
   06D1 36                 1785 	addc	a,@r0
   06D2 09                 1786 	inc	r1
   06D3 F7                 1787 	mov	@r1,a
   06D4 08                 1788 	inc	r0
   06D5 09                 1789 	inc	r1
   06D6 E6                 1790 	mov	a,@r0
   06D7 F7                 1791 	mov	@r1,a
   06D8 E5*00              1792 	mov	a,_bp
   06DA 24 0D              1793 	add	a,#0x0d
   06DC F8                 1794 	mov	r0,a
   06DD 86 82              1795 	mov	dpl,@r0
   06DF 08                 1796 	inc	r0
   06E0 86 83              1797 	mov	dph,@r0
   06E2 08                 1798 	inc	r0
   06E3 86 F0              1799 	mov	b,@r0
   06E5 E5*00              1800 	mov	a,_bp
   06E7 24 0B              1801 	add	a,#0x0b
   06E9 F9                 1802 	mov	r1,a
   06EA 12s00r00           1803 	lcall	__gptrget
   06ED F7                 1804 	mov	@r1,a
   06EE A3                 1805 	inc	dptr
   06EF 12s00r00           1806 	lcall	__gptrget
   06F2 09                 1807 	inc	r1
   06F3 F7                 1808 	mov	@r1,a
   06F4 E5*00              1809 	mov	a,_bp
   06F6 24 0B              1810 	add	a,#0x0b
   06F8 F8                 1811 	mov	r0,a
   06F9 C3                 1812 	clr	c
   06FA EA                 1813 	mov	a,r2
   06FB 96                 1814 	subb	a,@r0
   06FC EB                 1815 	mov	a,r3
   06FD 08                 1816 	inc	r0
   06FE 96                 1817 	subb	a,@r0
   06FF D0 04              1818 	pop	ar4
   0701 D0 03              1819 	pop	ar3
   0703 D0 02              1820 	pop	ar2
   0705 50 15              1821 	jnc	00105$
                           1822 ;	../../../core/net/rime/rudolph1.c:181: c->highest_chunk_heard = c->chunk;
   0707 8D 82              1823 	mov	dpl,r5
   0709 8E 83              1824 	mov	dph,r6
   070B 8F F0              1825 	mov	b,r7
   070D E5*00              1826 	mov	a,_bp
   070F 24 0B              1827 	add	a,#0x0b
   0711 F8                 1828 	mov	r0,a
   0712 E6                 1829 	mov	a,@r0
   0713 12s00r00           1830 	lcall	__gptrput
   0716 A3                 1831 	inc	dptr
   0717 08                 1832 	inc	r0
   0718 E6                 1833 	mov	a,@r0
   0719 12s00r00           1834 	lcall	__gptrput
   071C                    1835 00105$:
                           1836 ;	../../../core/net/rime/rudolph1.c:183: c->chunk++;
   071C C0 02              1837 	push	ar2
   071E C0 03              1838 	push	ar3
   0720 C0 04              1839 	push	ar4
   0722 E5*00              1840 	mov	a,_bp
   0724 24 0B              1841 	add	a,#0x0b
   0726 F8                 1842 	mov	r0,a
   0727 74 01              1843 	mov	a,#0x01
   0729 26                 1844 	add	a,@r0
   072A FF                 1845 	mov	r7,a
   072B E4                 1846 	clr	a
   072C 08                 1847 	inc	r0
   072D 36                 1848 	addc	a,@r0
   072E FA                 1849 	mov	r2,a
   072F E5*00              1850 	mov	a,_bp
   0731 24 0D              1851 	add	a,#0x0d
   0733 F8                 1852 	mov	r0,a
   0734 86 82              1853 	mov	dpl,@r0
   0736 08                 1854 	inc	r0
   0737 86 83              1855 	mov	dph,@r0
   0739 08                 1856 	inc	r0
   073A 86 F0              1857 	mov	b,@r0
   073C EF                 1858 	mov	a,r7
   073D 12s00r00           1859 	lcall	__gptrput
   0740 A3                 1860 	inc	dptr
   0741 EA                 1861 	mov	a,r2
   0742 12s00r00           1862 	lcall	__gptrput
   0745 D0 04              1863 	pop	ar4
   0747 D0 03              1864 	pop	ar3
   0749 D0 02              1865 	pop	ar2
   074B 80 61              1866 	sjmp	00111$
   074D                    1867 00110$:
                           1868 ;	../../../core/net/rime/rudolph1.c:184: } else if(p->h.chunk > c->chunk) {
   074D E5*00              1869 	mov	a,_bp
   074F 24 08              1870 	add	a,#0x08
   0751 F8                 1871 	mov	r0,a
   0752 C3                 1872 	clr	c
   0753 ED                 1873 	mov	a,r5
   0754 96                 1874 	subb	a,@r0
   0755 EE                 1875 	mov	a,r6
   0756 08                 1876 	inc	r0
   0757 96                 1877 	subb	a,@r0
   0758 50 54              1878 	jnc	00111$
                           1879 ;	../../../core/net/rime/rudolph1.c:188: send_nack(c);
   075A A8*00              1880 	mov	r0,_bp
   075C 08                 1881 	inc	r0
   075D 86 82              1882 	mov	dpl,@r0
   075F 08                 1883 	inc	r0
   0760 86 83              1884 	mov	dph,@r0
   0762 08                 1885 	inc	r0
   0763 86 F0              1886 	mov	b,@r0
   0765 C0 02              1887 	push	ar2
   0767 C0 03              1888 	push	ar3
   0769 C0 04              1889 	push	ar4
   076B 12s03rAD           1890 	lcall	_send_nack
   076E D0 04              1891 	pop	ar4
   0770 D0 03              1892 	pop	ar3
   0772 D0 02              1893 	pop	ar2
                           1894 ;	../../../core/net/rime/rudolph1.c:189: c->highest_chunk_heard = p->h.chunk;
   0774 A8*00              1895 	mov	r0,_bp
   0776 08                 1896 	inc	r0
   0777 E5*00              1897 	mov	a,_bp
   0779 24 0D              1898 	add	a,#0x0d
   077B F9                 1899 	mov	r1,a
   077C 74 A4              1900 	mov	a,#0xA4
   077E 26                 1901 	add	a,@r0
   077F F7                 1902 	mov	@r1,a
   0780 E4                 1903 	clr	a
   0781 08                 1904 	inc	r0
   0782 36                 1905 	addc	a,@r0
   0783 09                 1906 	inc	r1
   0784 F7                 1907 	mov	@r1,a
   0785 08                 1908 	inc	r0
   0786 09                 1909 	inc	r1
   0787 E6                 1910 	mov	a,@r0
   0788 F7                 1911 	mov	@r1,a
   0789 8A 82              1912 	mov	dpl,r2
   078B 8B 83              1913 	mov	dph,r3
   078D 8C F0              1914 	mov	b,r4
   078F 12s00r00           1915 	lcall	__gptrget
   0792 FD                 1916 	mov	r5,a
   0793 A3                 1917 	inc	dptr
   0794 12s00r00           1918 	lcall	__gptrget
   0797 FE                 1919 	mov	r6,a
   0798 E5*00              1920 	mov	a,_bp
   079A 24 0D              1921 	add	a,#0x0d
   079C F8                 1922 	mov	r0,a
   079D 86 82              1923 	mov	dpl,@r0
   079F 08                 1924 	inc	r0
   07A0 86 83              1925 	mov	dph,@r0
   07A2 08                 1926 	inc	r0
   07A3 86 F0              1927 	mov	b,@r0
   07A5 ED                 1928 	mov	a,r5
   07A6 12s00r00           1929 	lcall	__gptrput
   07A9 A3                 1930 	inc	dptr
   07AA EE                 1931 	mov	a,r6
   07AB 12s00r00           1932 	lcall	__gptrput
                           1933 ;	../../../core/net/rime/rudolph1.c:190: } else if(p->h.chunk < c->chunk) {
   07AE                    1934 00111$:
                           1935 ;	../../../core/net/rime/rudolph1.c:197: if(c->highest_chunk_heard > p->h.chunk) {
   07AE A8*00              1936 	mov	r0,_bp
   07B0 08                 1937 	inc	r0
   07B1 74 A4              1938 	mov	a,#0xA4
   07B3 26                 1939 	add	a,@r0
   07B4 FD                 1940 	mov	r5,a
   07B5 E4                 1941 	clr	a
   07B6 08                 1942 	inc	r0
   07B7 36                 1943 	addc	a,@r0
   07B8 FE                 1944 	mov	r6,a
   07B9 08                 1945 	inc	r0
   07BA 86 07              1946 	mov	ar7,@r0
   07BC 8D 82              1947 	mov	dpl,r5
   07BE 8E 83              1948 	mov	dph,r6
   07C0 8F F0              1949 	mov	b,r7
   07C2 12s00r00           1950 	lcall	__gptrget
   07C5 FD                 1951 	mov	r5,a
   07C6 A3                 1952 	inc	dptr
   07C7 12s00r00           1953 	lcall	__gptrget
   07CA FE                 1954 	mov	r6,a
   07CB 8A 82              1955 	mov	dpl,r2
   07CD 8B 83              1956 	mov	dph,r3
   07CF 8C F0              1957 	mov	b,r4
   07D1 12s00r00           1958 	lcall	__gptrget
   07D4 FA                 1959 	mov	r2,a
   07D5 A3                 1960 	inc	dptr
   07D6 12s00r00           1961 	lcall	__gptrget
   07D9 FB                 1962 	mov	r3,a
   07DA C3                 1963 	clr	c
   07DB EA                 1964 	mov	a,r2
   07DC 9D                 1965 	subb	a,r5
   07DD EB                 1966 	mov	a,r3
   07DE 9E                 1967 	subb	a,r6
   07DF 50 0E              1968 	jnc	00119$
                           1969 ;	../../../core/net/rime/rudolph1.c:198: send_nack(c);
   07E1 A8*00              1970 	mov	r0,_bp
   07E3 08                 1971 	inc	r0
   07E4 86 82              1972 	mov	dpl,@r0
   07E6 08                 1973 	inc	r0
   07E7 86 83              1974 	mov	dph,@r0
   07E9 08                 1975 	inc	r0
   07EA 86 F0              1976 	mov	b,@r0
   07EC 12s03rAD           1977 	lcall	_send_nack
   07EF                    1978 00119$:
   07EF 85*00 81           1979 	mov	sp,_bp
   07F2 D0*00              1980 	pop	_bp
   07F4 22                 1981 	ret
                           1982 ;------------------------------------------------------------
                           1983 ;Allocation info for local variables in function 'recv_trickle'
                           1984 ;------------------------------------------------------------
                           1985 ;trickle                   Allocated to registers r2 r3 r4 
                           1986 ;c                         Allocated to registers 
                           1987 ;p                         Allocated to registers r5 r6 r7 
                           1988 ;------------------------------------------------------------
                           1989 ;	../../../core/net/rime/rudolph1.c:207: recv_trickle(struct trickle_conn *trickle)
                           1990 ;	-----------------------------------------
                           1991 ;	 function recv_trickle
                           1992 ;	-----------------------------------------
   07F5                    1993 _recv_trickle:
   07F5 AA 82              1994 	mov	r2,dpl
   07F7 AB 83              1995 	mov	r3,dph
   07F9 AC F0              1996 	mov	r4,b
                           1997 ;	../../../core/net/rime/rudolph1.c:210: struct rudolph1_datapacket *p = packetbuf_dataptr();
   07FB C0 02              1998 	push	ar2
   07FD C0 03              1999 	push	ar3
   07FF C0 04              2000 	push	ar4
   0801 12s00r00           2001 	lcall	_packetbuf_dataptr
   0804 AD 82              2002 	mov	r5,dpl
   0806 AE 83              2003 	mov	r6,dph
   0808 AF F0              2004 	mov	r7,b
   080A D0 04              2005 	pop	ar4
   080C D0 03              2006 	pop	ar3
   080E D0 02              2007 	pop	ar2
                           2008 ;	../../../core/net/rime/rudolph1.c:212: if(p->h.type == TYPE_DATA) {
   0810 8D 82              2009 	mov	dpl,r5
   0812 8E 83              2010 	mov	dph,r6
   0814 8F F0              2011 	mov	b,r7
   0816 12s00r00           2012 	lcall	__gptrget
   0819 70 15              2013 	jnz	00103$
                           2014 ;	../../../core/net/rime/rudolph1.c:216: handle_data(c, p);
   081B C0 05              2015 	push	ar5
   081D C0 06              2016 	push	ar6
   081F C0 07              2017 	push	ar7
   0821 8A 82              2018 	mov	dpl,r2
   0823 8B 83              2019 	mov	dph,r3
   0825 8C F0              2020 	mov	b,r4
   0827 12s04r89           2021 	lcall	_handle_data
   082A 15 81              2022 	dec	sp
   082C 15 81              2023 	dec	sp
   082E 15 81              2024 	dec	sp
   0830                    2025 00103$:
   0830 22                 2026 	ret
                           2027 ;------------------------------------------------------------
                           2028 ;Allocation info for local variables in function 'sent_ipolite'
                           2029 ;------------------------------------------------------------
                           2030 ;ipolite                   Allocated to registers 
                           2031 ;------------------------------------------------------------
                           2032 ;	../../../core/net/rime/rudolph1.c:221: sent_ipolite(struct ipolite_conn *ipolite)
                           2033 ;	-----------------------------------------
                           2034 ;	 function sent_ipolite
                           2035 ;	-----------------------------------------
   0831                    2036 _sent_ipolite:
                           2037 ;	../../../core/net/rime/rudolph1.c:225: }
   0831 22                 2038 	ret
                           2039 ;------------------------------------------------------------
                           2040 ;Allocation info for local variables in function 'dropped_ipolite'
                           2041 ;------------------------------------------------------------
                           2042 ;ipolite                   Allocated to registers 
                           2043 ;------------------------------------------------------------
                           2044 ;	../../../core/net/rime/rudolph1.c:228: dropped_ipolite(struct ipolite_conn *ipolite)
                           2045 ;	-----------------------------------------
                           2046 ;	 function dropped_ipolite
                           2047 ;	-----------------------------------------
   0832                    2048 _dropped_ipolite:
                           2049 ;	../../../core/net/rime/rudolph1.c:232: }
   0832 22                 2050 	ret
                           2051 ;------------------------------------------------------------
                           2052 ;Allocation info for local variables in function 'recv_ipolite'
                           2053 ;------------------------------------------------------------
                           2054 ;from                      Allocated to stack - offset -5
                           2055 ;ipolite                   Allocated to registers r2 r3 r4 
                           2056 ;c                         Allocated to stack - offset 1
                           2057 ;p                         Allocated to stack - offset 4
                           2058 ;sloc0                     Allocated to stack - offset 10
                           2059 ;------------------------------------------------------------
                           2060 ;	../../../core/net/rime/rudolph1.c:235: recv_ipolite(struct ipolite_conn *ipolite, const rimeaddr_t *from)
                           2061 ;	-----------------------------------------
                           2062 ;	 function recv_ipolite
                           2063 ;	-----------------------------------------
   0833                    2064 _recv_ipolite:
   0833 C0*00              2065 	push	_bp
   0835 E5 81              2066 	mov	a,sp
   0837 F5*00              2067 	mov	_bp,a
   0839 24 06              2068 	add	a,#0x06
   083B F5 81              2069 	mov	sp,a
   083D AA 82              2070 	mov	r2,dpl
   083F AB 83              2071 	mov	r3,dph
   0841 AC F0              2072 	mov	r4,b
                           2073 ;	../../../core/net/rime/rudolph1.c:237: struct rudolph1_conn *c = (struct rudolph1_conn *)
   0843 A8*00              2074 	mov	r0,_bp
   0845 08                 2075 	inc	r0
   0846 EA                 2076 	mov	a,r2
   0847 24 A5              2077 	add	a,#0xa5
   0849 F6                 2078 	mov	@r0,a
   084A EB                 2079 	mov	a,r3
   084B 34 FF              2080 	addc	a,#0xff
   084D 08                 2081 	inc	r0
   084E F6                 2082 	mov	@r0,a
   084F 08                 2083 	inc	r0
   0850 A6 04              2084 	mov	@r0,ar4
                           2085 ;	../../../core/net/rime/rudolph1.c:239: struct rudolph1_datapacket *p = packetbuf_dataptr();
   0852 12s00r00           2086 	lcall	_packetbuf_dataptr
   0855 AD 82              2087 	mov	r5,dpl
   0857 AE 83              2088 	mov	r6,dph
   0859 AF F0              2089 	mov	r7,b
   085B E5*00              2090 	mov	a,_bp
   085D 24 04              2091 	add	a,#0x04
   085F F8                 2092 	mov	r0,a
   0860 A6 05              2093 	mov	@r0,ar5
   0862 08                 2094 	inc	r0
   0863 A6 06              2095 	mov	@r0,ar6
   0865 08                 2096 	inc	r0
   0866 A6 07              2097 	mov	@r0,ar7
                           2098 ;	../../../core/net/rime/rudolph1.c:245: c->nacks++;
   0868 A8*00              2099 	mov	r0,_bp
   086A 08                 2100 	inc	r0
   086B 74 A7              2101 	mov	a,#0xA7
   086D 26                 2102 	add	a,@r0
   086E FA                 2103 	mov	r2,a
   086F E4                 2104 	clr	a
   0870 08                 2105 	inc	r0
   0871 36                 2106 	addc	a,@r0
   0872 FB                 2107 	mov	r3,a
   0873 08                 2108 	inc	r0
   0874 86 04              2109 	mov	ar4,@r0
   0876 8A 82              2110 	mov	dpl,r2
   0878 8B 83              2111 	mov	dph,r3
   087A 8C F0              2112 	mov	b,r4
   087C 12s00r00           2113 	lcall	__gptrget
   087F FD                 2114 	mov	r5,a
   0880 0D                 2115 	inc	r5
   0881 8A 82              2116 	mov	dpl,r2
   0883 8B 83              2117 	mov	dph,r3
   0885 8C F0              2118 	mov	b,r4
   0887 ED                 2119 	mov	a,r5
   0888 12s00r00           2120 	lcall	__gptrput
                           2121 ;	../../../core/net/rime/rudolph1.c:247: if(p->h.type == TYPE_NACK) {
   088B E5*00              2122 	mov	a,_bp
   088D 24 04              2123 	add	a,#0x04
   088F F8                 2124 	mov	r0,a
   0890 86 82              2125 	mov	dpl,@r0
   0892 08                 2126 	inc	r0
   0893 86 83              2127 	mov	dph,@r0
   0895 08                 2128 	inc	r0
   0896 86 F0              2129 	mov	b,@r0
   0898 12s00r00           2130 	lcall	__gptrget
   089B FA                 2131 	mov	r2,a
   089C BA 01 02           2132 	cjne	r2,#0x01,00120$
   089F 80 03              2133 	sjmp	00121$
   08A1                    2134 00120$:
   08A1 02s09rD0           2135 	ljmp	00111$
   08A4                    2136 00121$:
                           2137 ;	../../../core/net/rime/rudolph1.c:252: if(p->h.version == c->version) {
   08A4 E5*00              2138 	mov	a,_bp
   08A6 24 04              2139 	add	a,#0x04
   08A8 F8                 2140 	mov	r0,a
   08A9 74 01              2141 	mov	a,#0x01
   08AB 26                 2142 	add	a,@r0
   08AC FB                 2143 	mov	r3,a
   08AD E4                 2144 	clr	a
   08AE 08                 2145 	inc	r0
   08AF 36                 2146 	addc	a,@r0
   08B0 FC                 2147 	mov	r4,a
   08B1 08                 2148 	inc	r0
   08B2 86 05              2149 	mov	ar5,@r0
   08B4 8B 82              2150 	mov	dpl,r3
   08B6 8C 83              2151 	mov	dph,r4
   08B8 8D F0              2152 	mov	b,r5
   08BA 12s00r00           2153 	lcall	__gptrget
   08BD FB                 2154 	mov	r3,a
   08BE A8*00              2155 	mov	r0,_bp
   08C0 08                 2156 	inc	r0
   08C1 74 A6              2157 	mov	a,#0xA6
   08C3 26                 2158 	add	a,@r0
   08C4 FC                 2159 	mov	r4,a
   08C5 E4                 2160 	clr	a
   08C6 08                 2161 	inc	r0
   08C7 36                 2162 	addc	a,@r0
   08C8 FD                 2163 	mov	r5,a
   08C9 08                 2164 	inc	r0
   08CA 86 06              2165 	mov	ar6,@r0
   08CC 8C 82              2166 	mov	dpl,r4
   08CE 8D 83              2167 	mov	dph,r5
   08D0 8E F0              2168 	mov	b,r6
   08D2 12s00r00           2169 	lcall	__gptrget
   08D5 FC                 2170 	mov	r4,a
   08D6 EB                 2171 	mov	a,r3
   08D7 B5 04 02           2172 	cjne	a,ar4,00122$
   08DA 80 03              2173 	sjmp	00123$
   08DC                    2174 00122$:
   08DC 02s09r66           2175 	ljmp	00106$
   08DF                    2176 00123$:
                           2177 ;	../../../core/net/rime/rudolph1.c:253: if(p->h.chunk < c->chunk) {
   08DF E5*00              2178 	mov	a,_bp
   08E1 24 04              2179 	add	a,#0x04
   08E3 F8                 2180 	mov	r0,a
   08E4 74 02              2181 	mov	a,#0x02
   08E6 26                 2182 	add	a,@r0
   08E7 FD                 2183 	mov	r5,a
   08E8 E4                 2184 	clr	a
   08E9 08                 2185 	inc	r0
   08EA 36                 2186 	addc	a,@r0
   08EB FE                 2187 	mov	r6,a
   08EC 08                 2188 	inc	r0
   08ED 86 07              2189 	mov	ar7,@r0
   08EF 8D 82              2190 	mov	dpl,r5
   08F1 8E 83              2191 	mov	dph,r6
   08F3 8F F0              2192 	mov	b,r7
   08F5 12s00r00           2193 	lcall	__gptrget
   08F8 FA                 2194 	mov	r2,a
   08F9 A3                 2195 	inc	dptr
   08FA 12s00r00           2196 	lcall	__gptrget
   08FD FB                 2197 	mov	r3,a
   08FE A8*00              2198 	mov	r0,_bp
   0900 08                 2199 	inc	r0
   0901 74 A2              2200 	mov	a,#0xA2
   0903 26                 2201 	add	a,@r0
   0904 FF                 2202 	mov	r7,a
   0905 E4                 2203 	clr	a
   0906 08                 2204 	inc	r0
   0907 36                 2205 	addc	a,@r0
   0908 FD                 2206 	mov	r5,a
   0909 08                 2207 	inc	r0
   090A 86 06              2208 	mov	ar6,@r0
   090C 8F 82              2209 	mov	dpl,r7
   090E 8D 83              2210 	mov	dph,r5
   0910 8E F0              2211 	mov	b,r6
   0912 12s00r00           2212 	lcall	__gptrget
   0915 FF                 2213 	mov	r7,a
   0916 A3                 2214 	inc	dptr
   0917 12s00r00           2215 	lcall	__gptrget
   091A FD                 2216 	mov	r5,a
   091B C3                 2217 	clr	c
   091C EA                 2218 	mov	a,r2
   091D 9F                 2219 	subb	a,r7
   091E EB                 2220 	mov	a,r3
   091F 9D                 2221 	subb	a,r5
   0920 40 03              2222 	jc	00124$
   0922 02s09rF7           2223 	ljmp	00113$
   0925                    2224 00124$:
                           2225 ;	../../../core/net/rime/rudolph1.c:258: format_data(c, p->h.chunk);
   0925 C0 02              2226 	push	ar2
   0927 C0 03              2227 	push	ar3
   0929 A8*00              2228 	mov	r0,_bp
   092B 08                 2229 	inc	r0
   092C 86 82              2230 	mov	dpl,@r0
   092E 08                 2231 	inc	r0
   092F 86 83              2232 	mov	dph,@r0
   0931 08                 2233 	inc	r0
   0932 86 F0              2234 	mov	b,@r0
   0934 12s00rAE           2235 	lcall	_format_data
   0937 15 81              2236 	dec	sp
   0939 15 81              2237 	dec	sp
                           2238 ;	../../../core/net/rime/rudolph1.c:259: ipolite_send(&c->ipolite, REPAIR_TIMEOUT, sizeof(struct rudolph1_hdr));
   093B A8*00              2239 	mov	r0,_bp
   093D 08                 2240 	inc	r0
   093E 74 5B              2241 	mov	a,#0x5B
   0940 26                 2242 	add	a,@r0
   0941 FD                 2243 	mov	r5,a
   0942 E4                 2244 	clr	a
   0943 08                 2245 	inc	r0
   0944 36                 2246 	addc	a,@r0
   0945 FE                 2247 	mov	r6,a
   0946 08                 2248 	inc	r0
   0947 86 07              2249 	mov	ar7,@r0
   0949 74 04              2250 	mov	a,#0x04
   094B C0 E0              2251 	push	acc
   094D 74 20              2252 	mov	a,#0x20
   094F C0 E0              2253 	push	acc
   0951 E4                 2254 	clr	a
   0952 C0 E0              2255 	push	acc
   0954 8D 82              2256 	mov	dpl,r5
   0956 8E 83              2257 	mov	dph,r6
   0958 8F F0              2258 	mov	b,r7
   095A 12s00r00           2259 	lcall	_ipolite_send
   095D 15 81              2260 	dec	sp
   095F 15 81              2261 	dec	sp
   0961 15 81              2262 	dec	sp
   0963 02s09rF7           2263 	ljmp	00113$
   0966                    2264 00106$:
                           2265 ;	../../../core/net/rime/rudolph1.c:261: } else if(LT(p->h.version, c->version)) {
   0966 EB                 2266 	mov	a,r3
   0967 C3                 2267 	clr	c
   0968 9C                 2268 	subb	a,r4
   0969 FB                 2269 	mov	r3,a
   096A 20 E7 03           2270 	jb	acc.7,00125$
   096D 02s09rF7           2271 	ljmp	00113$
   0970                    2272 00125$:
                           2273 ;	../../../core/net/rime/rudolph1.c:262: format_data(c, 0);
   0970 E4                 2274 	clr	a
   0971 C0 E0              2275 	push	acc
   0973 C0 E0              2276 	push	acc
   0975 A8*00              2277 	mov	r0,_bp
   0977 08                 2278 	inc	r0
   0978 86 82              2279 	mov	dpl,@r0
   097A 08                 2280 	inc	r0
   097B 86 83              2281 	mov	dph,@r0
   097D 08                 2282 	inc	r0
   097E 86 F0              2283 	mov	b,@r0
   0980 12s00rAE           2284 	lcall	_format_data
   0983 15 81              2285 	dec	sp
   0985 15 81              2286 	dec	sp
                           2287 ;	../../../core/net/rime/rudolph1.c:263: ipolite_send(&c->ipolite, c->send_interval / 2, sizeof(struct rudolph1_hdr));
   0987 A8*00              2288 	mov	r0,_bp
   0989 08                 2289 	inc	r0
   098A 74 A0              2290 	mov	a,#0xA0
   098C 26                 2291 	add	a,@r0
   098D FB                 2292 	mov	r3,a
   098E E4                 2293 	clr	a
   098F 08                 2294 	inc	r0
   0990 36                 2295 	addc	a,@r0
   0991 FC                 2296 	mov	r4,a
   0992 08                 2297 	inc	r0
   0993 86 05              2298 	mov	ar5,@r0
   0995 8B 82              2299 	mov	dpl,r3
   0997 8C 83              2300 	mov	dph,r4
   0999 8D F0              2301 	mov	b,r5
   099B 12s00r00           2302 	lcall	__gptrget
   099E FB                 2303 	mov	r3,a
   099F A3                 2304 	inc	dptr
   09A0 12s00r00           2305 	lcall	__gptrget
   09A3 C3                 2306 	clr	c
   09A4 13                 2307 	rrc	a
   09A5 CB                 2308 	xch	a,r3
   09A6 13                 2309 	rrc	a
   09A7 CB                 2310 	xch	a,r3
   09A8 FC                 2311 	mov	r4,a
   09A9 A8*00              2312 	mov	r0,_bp
   09AB 08                 2313 	inc	r0
   09AC 74 5B              2314 	mov	a,#0x5B
   09AE 26                 2315 	add	a,@r0
   09AF FD                 2316 	mov	r5,a
   09B0 E4                 2317 	clr	a
   09B1 08                 2318 	inc	r0
   09B2 36                 2319 	addc	a,@r0
   09B3 FE                 2320 	mov	r6,a
   09B4 08                 2321 	inc	r0
   09B5 86 07              2322 	mov	ar7,@r0
   09B7 74 04              2323 	mov	a,#0x04
   09B9 C0 E0              2324 	push	acc
   09BB C0 03              2325 	push	ar3
   09BD C0 04              2326 	push	ar4
   09BF 8D 82              2327 	mov	dpl,r5
   09C1 8E 83              2328 	mov	dph,r6
   09C3 8F F0              2329 	mov	b,r7
   09C5 12s00r00           2330 	lcall	_ipolite_send
   09C8 15 81              2331 	dec	sp
   09CA 15 81              2332 	dec	sp
   09CC 15 81              2333 	dec	sp
   09CE 80 27              2334 	sjmp	00113$
   09D0                    2335 00111$:
                           2336 ;	../../../core/net/rime/rudolph1.c:265: } else if(p->h.type == TYPE_DATA) {
   09D0 EA                 2337 	mov	a,r2
   09D1 70 24              2338 	jnz	00113$
                           2339 ;	../../../core/net/rime/rudolph1.c:270: handle_data(c, p);
   09D3 E5*00              2340 	mov	a,_bp
   09D5 24 04              2341 	add	a,#0x04
   09D7 F8                 2342 	mov	r0,a
   09D8 E6                 2343 	mov	a,@r0
   09D9 C0 E0              2344 	push	acc
   09DB 08                 2345 	inc	r0
   09DC E6                 2346 	mov	a,@r0
   09DD C0 E0              2347 	push	acc
   09DF 08                 2348 	inc	r0
   09E0 E6                 2349 	mov	a,@r0
   09E1 C0 E0              2350 	push	acc
   09E3 A8*00              2351 	mov	r0,_bp
   09E5 08                 2352 	inc	r0
   09E6 86 82              2353 	mov	dpl,@r0
   09E8 08                 2354 	inc	r0
   09E9 86 83              2355 	mov	dph,@r0
   09EB 08                 2356 	inc	r0
   09EC 86 F0              2357 	mov	b,@r0
   09EE 12s04r89           2358 	lcall	_handle_data
   09F1 15 81              2359 	dec	sp
   09F3 15 81              2360 	dec	sp
   09F5 15 81              2361 	dec	sp
   09F7                    2362 00113$:
   09F7 85*00 81           2363 	mov	sp,_bp
   09FA D0*00              2364 	pop	_bp
   09FC 22                 2365 	ret
                           2366 ;------------------------------------------------------------
                           2367 ;Allocation info for local variables in function 'send_next_packet'
                           2368 ;------------------------------------------------------------
                           2369 ;ptr                       Allocated to stack - offset 1
                           2370 ;c                         Allocated to stack - offset 4
                           2371 ;len                       Allocated to registers r5 r6 
                           2372 ;sloc0                     Allocated to stack - offset 7
                           2373 ;------------------------------------------------------------
                           2374 ;	../../../core/net/rime/rudolph1.c:275: send_next_packet(void *ptr)
                           2375 ;	-----------------------------------------
                           2376 ;	 function send_next_packet
                           2377 ;	-----------------------------------------
   09FD                    2378 _send_next_packet:
   09FD C0*00              2379 	push	_bp
   09FF 85 81*00           2380 	mov	_bp,sp
   0A02 C0 82              2381 	push	dpl
   0A04 C0 83              2382 	push	dph
   0A06 C0 F0              2383 	push	b
   0A08 E5 81              2384 	mov	a,sp
   0A0A 24 09              2385 	add	a,#0x09
   0A0C F5 81              2386 	mov	sp,a
                           2387 ;	../../../core/net/rime/rudolph1.c:277: struct rudolph1_conn *c = ptr;
   0A0E A8*00              2388 	mov	r0,_bp
   0A10 08                 2389 	inc	r0
   0A11 E5*00              2390 	mov	a,_bp
   0A13 24 04              2391 	add	a,#0x04
   0A15 F9                 2392 	mov	r1,a
   0A16 E6                 2393 	mov	a,@r0
   0A17 F7                 2394 	mov	@r1,a
   0A18 08                 2395 	inc	r0
   0A19 09                 2396 	inc	r1
   0A1A E6                 2397 	mov	a,@r0
   0A1B F7                 2398 	mov	@r1,a
   0A1C 08                 2399 	inc	r0
   0A1D 09                 2400 	inc	r1
   0A1E E6                 2401 	mov	a,@r0
   0A1F F7                 2402 	mov	@r1,a
                           2403 ;	../../../core/net/rime/rudolph1.c:279: if(c->nacks == 0) {
   0A20 A8*00              2404 	mov	r0,_bp
   0A22 08                 2405 	inc	r0
   0A23 74 A7              2406 	mov	a,#0xA7
   0A25 26                 2407 	add	a,@r0
   0A26 FD                 2408 	mov	r5,a
   0A27 E4                 2409 	clr	a
   0A28 08                 2410 	inc	r0
   0A29 36                 2411 	addc	a,@r0
   0A2A FE                 2412 	mov	r6,a
   0A2B 08                 2413 	inc	r0
   0A2C 86 07              2414 	mov	ar7,@r0
   0A2E 8D 82              2415 	mov	dpl,r5
   0A30 8E 83              2416 	mov	dph,r6
   0A32 8F F0              2417 	mov	b,r7
   0A34 12s00r00           2418 	lcall	__gptrget
   0A37 60 03              2419 	jz	00110$
   0A39 02s0Br45           2420 	ljmp	00104$
   0A3C                    2421 00110$:
                           2422 ;	../../../core/net/rime/rudolph1.c:280: len = format_data(c, c->chunk);
   0A3C A8*00              2423 	mov	r0,_bp
   0A3E 08                 2424 	inc	r0
   0A3F 74 A2              2425 	mov	a,#0xA2
   0A41 26                 2426 	add	a,@r0
   0A42 FD                 2427 	mov	r5,a
   0A43 E4                 2428 	clr	a
   0A44 08                 2429 	inc	r0
   0A45 36                 2430 	addc	a,@r0
   0A46 FE                 2431 	mov	r6,a
   0A47 08                 2432 	inc	r0
   0A48 86 07              2433 	mov	ar7,@r0
   0A4A 8D 82              2434 	mov	dpl,r5
   0A4C 8E 83              2435 	mov	dph,r6
   0A4E 8F F0              2436 	mov	b,r7
   0A50 12s00r00           2437 	lcall	__gptrget
   0A53 FD                 2438 	mov	r5,a
   0A54 A3                 2439 	inc	dptr
   0A55 12s00r00           2440 	lcall	__gptrget
   0A58 FE                 2441 	mov	r6,a
   0A59 C0 05              2442 	push	ar5
   0A5B C0 06              2443 	push	ar6
   0A5D A8*00              2444 	mov	r0,_bp
   0A5F 08                 2445 	inc	r0
   0A60 86 82              2446 	mov	dpl,@r0
   0A62 08                 2447 	inc	r0
   0A63 86 83              2448 	mov	dph,@r0
   0A65 08                 2449 	inc	r0
   0A66 86 F0              2450 	mov	b,@r0
   0A68 12s00rAE           2451 	lcall	_format_data
   0A6B AD 82              2452 	mov	r5,dpl
   0A6D AE 83              2453 	mov	r6,dph
   0A6F 15 81              2454 	dec	sp
   0A71 15 81              2455 	dec	sp
                           2456 ;	../../../core/net/rime/rudolph1.c:281: trickle_send(&c->trickle);
   0A73 A8*00              2457 	mov	r0,_bp
   0A75 08                 2458 	inc	r0
   0A76 86 82              2459 	mov	dpl,@r0
   0A78 08                 2460 	inc	r0
   0A79 86 83              2461 	mov	dph,@r0
   0A7B 08                 2462 	inc	r0
   0A7C 86 F0              2463 	mov	b,@r0
   0A7E C0 05              2464 	push	ar5
   0A80 C0 06              2465 	push	ar6
   0A82 12s00r00           2466 	lcall	_trickle_send
   0A85 D0 06              2467 	pop	ar6
   0A87 D0 05              2468 	pop	ar5
                           2469 ;	../../../core/net/rime/rudolph1.c:282: if(len == RUDOLPH1_DATASIZE) {
   0A89 BD 40 57           2470 	cjne	r5,#0x40,00102$
   0A8C BE 00 54           2471 	cjne	r6,#0x00,00102$
                           2472 ;	../../../core/net/rime/rudolph1.c:283: ctimer_set(&c->t, c->send_interval, send_next_packet, c);
   0A8F A8*00              2473 	mov	r0,_bp
   0A91 08                 2474 	inc	r0
   0A92 74 A0              2475 	mov	a,#0xA0
   0A94 26                 2476 	add	a,@r0
   0A95 FD                 2477 	mov	r5,a
   0A96 E4                 2478 	clr	a
   0A97 08                 2479 	inc	r0
   0A98 36                 2480 	addc	a,@r0
   0A99 FE                 2481 	mov	r6,a
   0A9A 08                 2482 	inc	r0
   0A9B 86 07              2483 	mov	ar7,@r0
   0A9D 8D 82              2484 	mov	dpl,r5
   0A9F 8E 83              2485 	mov	dph,r6
   0AA1 8F F0              2486 	mov	b,r7
   0AA3 12s00r00           2487 	lcall	__gptrget
   0AA6 FD                 2488 	mov	r5,a
   0AA7 A3                 2489 	inc	dptr
   0AA8 12s00r00           2490 	lcall	__gptrget
   0AAB FE                 2491 	mov	r6,a
   0AAC A8*00              2492 	mov	r0,_bp
   0AAE 08                 2493 	inc	r0
   0AAF 74 8B              2494 	mov	a,#0x8B
   0AB1 26                 2495 	add	a,@r0
   0AB2 FF                 2496 	mov	r7,a
   0AB3 E4                 2497 	clr	a
   0AB4 08                 2498 	inc	r0
   0AB5 36                 2499 	addc	a,@r0
   0AB6 FA                 2500 	mov	r2,a
   0AB7 08                 2501 	inc	r0
   0AB8 86 03              2502 	mov	ar3,@r0
   0ABA A8*00              2503 	mov	r0,_bp
   0ABC 08                 2504 	inc	r0
   0ABD E6                 2505 	mov	a,@r0
   0ABE C0 E0              2506 	push	acc
   0AC0 08                 2507 	inc	r0
   0AC1 E6                 2508 	mov	a,@r0
   0AC2 C0 E0              2509 	push	acc
   0AC4 08                 2510 	inc	r0
   0AC5 E6                 2511 	mov	a,@r0
   0AC6 C0 E0              2512 	push	acc
   0AC8 74rFD              2513 	mov	a,#_send_next_packet
   0ACA C0 E0              2514 	push	acc
   0ACC 74s09              2515 	mov	a,#(_send_next_packet >> 8)
   0ACE C0 E0              2516 	push	acc
   0AD0 C0 05              2517 	push	ar5
   0AD2 C0 06              2518 	push	ar6
   0AD4 8F 82              2519 	mov	dpl,r7
   0AD6 8A 83              2520 	mov	dph,r2
   0AD8 8B F0              2521 	mov	b,r3
   0ADA 12s00r00           2522 	lcall	_ctimer_set
   0ADD E5 81              2523 	mov	a,sp
   0ADF 24 F9              2524 	add	a,#0xf9
   0AE1 F5 81              2525 	mov	sp,a
   0AE3                    2526 00102$:
                           2527 ;	../../../core/net/rime/rudolph1.c:289: c->highest_chunk_heard = c->chunk;
   0AE3 E5*00              2528 	mov	a,_bp
   0AE5 24 04              2529 	add	a,#0x04
   0AE7 F8                 2530 	mov	r0,a
   0AE8 E5*00              2531 	mov	a,_bp
   0AEA 24 07              2532 	add	a,#0x07
   0AEC F9                 2533 	mov	r1,a
   0AED 74 A4              2534 	mov	a,#0xA4
   0AEF 26                 2535 	add	a,@r0
   0AF0 F7                 2536 	mov	@r1,a
   0AF1 E4                 2537 	clr	a
   0AF2 08                 2538 	inc	r0
   0AF3 36                 2539 	addc	a,@r0
   0AF4 09                 2540 	inc	r1
   0AF5 F7                 2541 	mov	@r1,a
   0AF6 08                 2542 	inc	r0
   0AF7 09                 2543 	inc	r1
   0AF8 E6                 2544 	mov	a,@r0
   0AF9 F7                 2545 	mov	@r1,a
   0AFA E5*00              2546 	mov	a,_bp
   0AFC 24 04              2547 	add	a,#0x04
   0AFE F8                 2548 	mov	r0,a
   0AFF 74 A2              2549 	mov	a,#0xA2
   0B01 26                 2550 	add	a,@r0
   0B02 FD                 2551 	mov	r5,a
   0B03 E4                 2552 	clr	a
   0B04 08                 2553 	inc	r0
   0B05 36                 2554 	addc	a,@r0
   0B06 FE                 2555 	mov	r6,a
   0B07 08                 2556 	inc	r0
   0B08 86 07              2557 	mov	ar7,@r0
   0B0A 8D 82              2558 	mov	dpl,r5
   0B0C 8E 83              2559 	mov	dph,r6
   0B0E 8F F0              2560 	mov	b,r7
   0B10 12s00r00           2561 	lcall	__gptrget
   0B13 FA                 2562 	mov	r2,a
   0B14 A3                 2563 	inc	dptr
   0B15 12s00r00           2564 	lcall	__gptrget
   0B18 FB                 2565 	mov	r3,a
   0B19 E5*00              2566 	mov	a,_bp
   0B1B 24 07              2567 	add	a,#0x07
   0B1D F8                 2568 	mov	r0,a
   0B1E 86 82              2569 	mov	dpl,@r0
   0B20 08                 2570 	inc	r0
   0B21 86 83              2571 	mov	dph,@r0
   0B23 08                 2572 	inc	r0
   0B24 86 F0              2573 	mov	b,@r0
   0B26 EA                 2574 	mov	a,r2
   0B27 12s00r00           2575 	lcall	__gptrput
   0B2A A3                 2576 	inc	dptr
   0B2B EB                 2577 	mov	a,r3
   0B2C 12s00r00           2578 	lcall	__gptrput
                           2579 ;	../../../core/net/rime/rudolph1.c:290: c->chunk++;
   0B2F 0A                 2580 	inc	r2
   0B30 BA 00 01           2581 	cjne	r2,#0x00,00113$
   0B33 0B                 2582 	inc	r3
   0B34                    2583 00113$:
   0B34 8D 82              2584 	mov	dpl,r5
   0B36 8E 83              2585 	mov	dph,r6
   0B38 8F F0              2586 	mov	b,r7
   0B3A EA                 2587 	mov	a,r2
   0B3B 12s00r00           2588 	lcall	__gptrput
   0B3E A3                 2589 	inc	dptr
   0B3F EB                 2590 	mov	a,r3
   0B40 12s00r00           2591 	lcall	__gptrput
   0B43 80 54              2592 	sjmp	00105$
   0B45                    2593 00104$:
                           2594 ;	../../../core/net/rime/rudolph1.c:293: ctimer_set(&c->t, c->send_interval, send_next_packet, c);
   0B45 A8*00              2595 	mov	r0,_bp
   0B47 08                 2596 	inc	r0
   0B48 74 A0              2597 	mov	a,#0xA0
   0B4A 26                 2598 	add	a,@r0
   0B4B FA                 2599 	mov	r2,a
   0B4C E4                 2600 	clr	a
   0B4D 08                 2601 	inc	r0
   0B4E 36                 2602 	addc	a,@r0
   0B4F FB                 2603 	mov	r3,a
   0B50 08                 2604 	inc	r0
   0B51 86 04              2605 	mov	ar4,@r0
   0B53 8A 82              2606 	mov	dpl,r2
   0B55 8B 83              2607 	mov	dph,r3
   0B57 8C F0              2608 	mov	b,r4
   0B59 12s00r00           2609 	lcall	__gptrget
   0B5C FA                 2610 	mov	r2,a
   0B5D A3                 2611 	inc	dptr
   0B5E 12s00r00           2612 	lcall	__gptrget
   0B61 FB                 2613 	mov	r3,a
   0B62 A8*00              2614 	mov	r0,_bp
   0B64 08                 2615 	inc	r0
   0B65 74 8B              2616 	mov	a,#0x8B
   0B67 26                 2617 	add	a,@r0
   0B68 FC                 2618 	mov	r4,a
   0B69 E4                 2619 	clr	a
   0B6A 08                 2620 	inc	r0
   0B6B 36                 2621 	addc	a,@r0
   0B6C FD                 2622 	mov	r5,a
   0B6D 08                 2623 	inc	r0
   0B6E 86 06              2624 	mov	ar6,@r0
   0B70 A8*00              2625 	mov	r0,_bp
   0B72 08                 2626 	inc	r0
   0B73 E6                 2627 	mov	a,@r0
   0B74 C0 E0              2628 	push	acc
   0B76 08                 2629 	inc	r0
   0B77 E6                 2630 	mov	a,@r0
   0B78 C0 E0              2631 	push	acc
   0B7A 08                 2632 	inc	r0
   0B7B E6                 2633 	mov	a,@r0
   0B7C C0 E0              2634 	push	acc
   0B7E 74rFD              2635 	mov	a,#_send_next_packet
   0B80 C0 E0              2636 	push	acc
   0B82 74s09              2637 	mov	a,#(_send_next_packet >> 8)
   0B84 C0 E0              2638 	push	acc
   0B86 C0 02              2639 	push	ar2
   0B88 C0 03              2640 	push	ar3
   0B8A 8C 82              2641 	mov	dpl,r4
   0B8C 8D 83              2642 	mov	dph,r5
   0B8E 8E F0              2643 	mov	b,r6
   0B90 12s00r00           2644 	lcall	_ctimer_set
   0B93 E5 81              2645 	mov	a,sp
   0B95 24 F9              2646 	add	a,#0xf9
   0B97 F5 81              2647 	mov	sp,a
   0B99                    2648 00105$:
                           2649 ;	../../../core/net/rime/rudolph1.c:295: c->nacks = 0;
   0B99 E5*00              2650 	mov	a,_bp
   0B9B 24 04              2651 	add	a,#0x04
   0B9D F8                 2652 	mov	r0,a
   0B9E 74 A7              2653 	mov	a,#0xA7
   0BA0 26                 2654 	add	a,@r0
   0BA1 FA                 2655 	mov	r2,a
   0BA2 E4                 2656 	clr	a
   0BA3 08                 2657 	inc	r0
   0BA4 36                 2658 	addc	a,@r0
   0BA5 FB                 2659 	mov	r3,a
   0BA6 08                 2660 	inc	r0
   0BA7 86 04              2661 	mov	ar4,@r0
   0BA9 8A 82              2662 	mov	dpl,r2
   0BAB 8B 83              2663 	mov	dph,r3
   0BAD 8C F0              2664 	mov	b,r4
   0BAF E4                 2665 	clr	a
   0BB0 12s00r00           2666 	lcall	__gptrput
   0BB3 85*00 81           2667 	mov	sp,_bp
   0BB6 D0*00              2668 	pop	_bp
   0BB8 22                 2669 	ret
                           2670 ;------------------------------------------------------------
                           2671 ;Allocation info for local variables in function 'rudolph1_open'
                           2672 ;------------------------------------------------------------
                           2673 ;channel                   Allocated to stack - offset -4
                           2674 ;cb                        Allocated to stack - offset -7
                           2675 ;c                         Allocated to stack - offset 1
                           2676 ;------------------------------------------------------------
                           2677 ;	../../../core/net/rime/rudolph1.c:303: rudolph1_open(struct rudolph1_conn *c, uint16_t channel,
                           2678 ;	-----------------------------------------
                           2679 ;	 function rudolph1_open
                           2680 ;	-----------------------------------------
   0BB9                    2681 _rudolph1_open:
   0BB9 C0*00              2682 	push	_bp
   0BBB 85 81*00           2683 	mov	_bp,sp
   0BBE C0 82              2684 	push	dpl
   0BC0 C0 83              2685 	push	dph
   0BC2 C0 F0              2686 	push	b
                           2687 ;	../../../core/net/rime/rudolph1.c:306: trickle_open(&c->trickle, TRICKLE_INTERVAL, channel, &trickle);
   0BC4 74r06              2688 	mov	a,#_trickle
   0BC6 C0 E0              2689 	push	acc
   0BC8 74s00              2690 	mov	a,#(_trickle >> 8)
   0BCA C0 E0              2691 	push	acc
   0BCC 74 80              2692 	mov	a,#0x80
   0BCE C0 E0              2693 	push	acc
   0BD0 E5*00              2694 	mov	a,_bp
   0BD2 24 FC              2695 	add	a,#0xfc
   0BD4 F8                 2696 	mov	r0,a
   0BD5 E6                 2697 	mov	a,@r0
   0BD6 C0 E0              2698 	push	acc
   0BD8 08                 2699 	inc	r0
   0BD9 E6                 2700 	mov	a,@r0
   0BDA C0 E0              2701 	push	acc
   0BDC 74 40              2702 	mov	a,#0x40
   0BDE C0 E0              2703 	push	acc
   0BE0 E4                 2704 	clr	a
   0BE1 C0 E0              2705 	push	acc
   0BE3 A8*00              2706 	mov	r0,_bp
   0BE5 08                 2707 	inc	r0
   0BE6 86 82              2708 	mov	dpl,@r0
   0BE8 08                 2709 	inc	r0
   0BE9 86 83              2710 	mov	dph,@r0
   0BEB 08                 2711 	inc	r0
   0BEC 86 F0              2712 	mov	b,@r0
   0BEE 12s00r00           2713 	lcall	_trickle_open
   0BF1 E5 81              2714 	mov	a,sp
   0BF3 24 F9              2715 	add	a,#0xf9
   0BF5 F5 81              2716 	mov	sp,a
                           2717 ;	../../../core/net/rime/rudolph1.c:307: ipolite_open(&c->ipolite, channel + 1, 1, &ipolite);
   0BF7 E5*00              2718 	mov	a,_bp
   0BF9 24 FC              2719 	add	a,#0xfc
   0BFB F8                 2720 	mov	r0,a
   0BFC 74 01              2721 	mov	a,#0x01
   0BFE 26                 2722 	add	a,@r0
   0BFF FD                 2723 	mov	r5,a
   0C00 E4                 2724 	clr	a
   0C01 08                 2725 	inc	r0
   0C02 36                 2726 	addc	a,@r0
   0C03 FE                 2727 	mov	r6,a
   0C04 A8*00              2728 	mov	r0,_bp
   0C06 08                 2729 	inc	r0
   0C07 74 5B              2730 	mov	a,#0x5B
   0C09 26                 2731 	add	a,@r0
   0C0A FF                 2732 	mov	r7,a
   0C0B E4                 2733 	clr	a
   0C0C 08                 2734 	inc	r0
   0C0D 36                 2735 	addc	a,@r0
   0C0E FA                 2736 	mov	r2,a
   0C0F 08                 2737 	inc	r0
   0C10 86 03              2738 	mov	ar3,@r0
   0C12 74r00              2739 	mov	a,#_ipolite
   0C14 C0 E0              2740 	push	acc
   0C16 74s00              2741 	mov	a,#(_ipolite >> 8)
   0C18 C0 E0              2742 	push	acc
   0C1A 74 80              2743 	mov	a,#0x80
   0C1C C0 E0              2744 	push	acc
   0C1E 74 01              2745 	mov	a,#0x01
   0C20 C0 E0              2746 	push	acc
   0C22 C0 05              2747 	push	ar5
   0C24 C0 06              2748 	push	ar6
   0C26 8F 82              2749 	mov	dpl,r7
   0C28 8A 83              2750 	mov	dph,r2
   0C2A 8B F0              2751 	mov	b,r3
   0C2C 12s00r00           2752 	lcall	_ipolite_open
   0C2F E5 81              2753 	mov	a,sp
   0C31 24 FA              2754 	add	a,#0xfa
   0C33 F5 81              2755 	mov	sp,a
                           2756 ;	../../../core/net/rime/rudolph1.c:308: c->cb = cb;
   0C35 A8*00              2757 	mov	r0,_bp
   0C37 08                 2758 	inc	r0
   0C38 74 88              2759 	mov	a,#0x88
   0C3A 26                 2760 	add	a,@r0
   0C3B FA                 2761 	mov	r2,a
   0C3C E4                 2762 	clr	a
   0C3D 08                 2763 	inc	r0
   0C3E 36                 2764 	addc	a,@r0
   0C3F FB                 2765 	mov	r3,a
   0C40 08                 2766 	inc	r0
   0C41 86 04              2767 	mov	ar4,@r0
   0C43 8A 82              2768 	mov	dpl,r2
   0C45 8B 83              2769 	mov	dph,r3
   0C47 8C F0              2770 	mov	b,r4
   0C49 E5*00              2771 	mov	a,_bp
   0C4B 24 F9              2772 	add	a,#0xf9
   0C4D F8                 2773 	mov	r0,a
   0C4E E6                 2774 	mov	a,@r0
   0C4F 12s00r00           2775 	lcall	__gptrput
   0C52 A3                 2776 	inc	dptr
   0C53 08                 2777 	inc	r0
   0C54 E6                 2778 	mov	a,@r0
   0C55 12s00r00           2779 	lcall	__gptrput
   0C58 A3                 2780 	inc	dptr
   0C59 08                 2781 	inc	r0
   0C5A E6                 2782 	mov	a,@r0
   0C5B 12s00r00           2783 	lcall	__gptrput
                           2784 ;	../../../core/net/rime/rudolph1.c:309: c->version = 0;
   0C5E A8*00              2785 	mov	r0,_bp
   0C60 08                 2786 	inc	r0
   0C61 74 A6              2787 	mov	a,#0xA6
   0C63 26                 2788 	add	a,@r0
   0C64 FA                 2789 	mov	r2,a
   0C65 E4                 2790 	clr	a
   0C66 08                 2791 	inc	r0
   0C67 36                 2792 	addc	a,@r0
   0C68 FB                 2793 	mov	r3,a
   0C69 08                 2794 	inc	r0
   0C6A 86 04              2795 	mov	ar4,@r0
   0C6C 8A 82              2796 	mov	dpl,r2
   0C6E 8B 83              2797 	mov	dph,r3
   0C70 8C F0              2798 	mov	b,r4
   0C72 E4                 2799 	clr	a
   0C73 12s00r00           2800 	lcall	__gptrput
                           2801 ;	../../../core/net/rime/rudolph1.c:310: c->send_interval = DEFAULT_SEND_INTERVAL;
   0C76 A8*00              2802 	mov	r0,_bp
   0C78 08                 2803 	inc	r0
   0C79 74 A0              2804 	mov	a,#0xA0
   0C7B 26                 2805 	add	a,@r0
   0C7C FA                 2806 	mov	r2,a
   0C7D E4                 2807 	clr	a
   0C7E 08                 2808 	inc	r0
   0C7F 36                 2809 	addc	a,@r0
   0C80 FB                 2810 	mov	r3,a
   0C81 08                 2811 	inc	r0
   0C82 86 04              2812 	mov	ar4,@r0
   0C84 8A 82              2813 	mov	dpl,r2
   0C86 8B 83              2814 	mov	dph,r3
   0C88 8C F0              2815 	mov	b,r4
   0C8A E4                 2816 	clr	a
   0C8B 12s00r00           2817 	lcall	__gptrput
   0C8E A3                 2818 	inc	dptr
   0C8F 74 01              2819 	mov	a,#0x01
   0C91 12s00r00           2820 	lcall	__gptrput
   0C94 85*00 81           2821 	mov	sp,_bp
   0C97 D0*00              2822 	pop	_bp
   0C99 22                 2823 	ret
                           2824 ;------------------------------------------------------------
                           2825 ;Allocation info for local variables in function 'rudolph1_close'
                           2826 ;------------------------------------------------------------
                           2827 ;c                         Allocated to registers r2 r3 r4 
                           2828 ;------------------------------------------------------------
                           2829 ;	../../../core/net/rime/rudolph1.c:314: rudolph1_close(struct rudolph1_conn *c)
                           2830 ;	-----------------------------------------
                           2831 ;	 function rudolph1_close
                           2832 ;	-----------------------------------------
   0C9A                    2833 _rudolph1_close:
                           2834 ;	../../../core/net/rime/rudolph1.c:316: trickle_close(&c->trickle);
   0C9A AA 82              2835 	mov	r2,dpl
   0C9C AB 83              2836 	mov	r3,dph
   0C9E AC F0              2837 	mov	r4,b
   0CA0 C0 02              2838 	push	ar2
   0CA2 C0 03              2839 	push	ar3
   0CA4 C0 04              2840 	push	ar4
   0CA6 12s00r00           2841 	lcall	_trickle_close
   0CA9 D0 04              2842 	pop	ar4
   0CAB D0 03              2843 	pop	ar3
   0CAD D0 02              2844 	pop	ar2
                           2845 ;	../../../core/net/rime/rudolph1.c:317: ipolite_close(&c->ipolite);
   0CAF 74 5B              2846 	mov	a,#0x5B
   0CB1 2A                 2847 	add	a,r2
   0CB2 FA                 2848 	mov	r2,a
   0CB3 E4                 2849 	clr	a
   0CB4 3B                 2850 	addc	a,r3
   0CB5 FB                 2851 	mov	r3,a
   0CB6 8A 82              2852 	mov	dpl,r2
   0CB8 8B 83              2853 	mov	dph,r3
   0CBA 8C F0              2854 	mov	b,r4
   0CBC 02s00r00           2855 	ljmp	_ipolite_close
                           2856 ;------------------------------------------------------------
                           2857 ;Allocation info for local variables in function 'rudolph1_send'
                           2858 ;------------------------------------------------------------
                           2859 ;send_interval             Allocated to stack - offset -4
                           2860 ;c                         Allocated to stack - offset 1
                           2861 ;------------------------------------------------------------
                           2862 ;	../../../core/net/rime/rudolph1.c:321: rudolph1_send(struct rudolph1_conn *c, clock_time_t send_interval)
                           2863 ;	-----------------------------------------
                           2864 ;	 function rudolph1_send
                           2865 ;	-----------------------------------------
   0CBF                    2866 _rudolph1_send:
   0CBF C0*00              2867 	push	_bp
   0CC1 85 81*00           2868 	mov	_bp,sp
   0CC4 C0 82              2869 	push	dpl
   0CC6 C0 83              2870 	push	dph
   0CC8 C0 F0              2871 	push	b
                           2872 ;	../../../core/net/rime/rudolph1.c:323: c->version++;
   0CCA A8*00              2873 	mov	r0,_bp
   0CCC 08                 2874 	inc	r0
   0CCD 74 A6              2875 	mov	a,#0xA6
   0CCF 26                 2876 	add	a,@r0
   0CD0 FD                 2877 	mov	r5,a
   0CD1 E4                 2878 	clr	a
   0CD2 08                 2879 	inc	r0
   0CD3 36                 2880 	addc	a,@r0
   0CD4 FE                 2881 	mov	r6,a
   0CD5 08                 2882 	inc	r0
   0CD6 86 07              2883 	mov	ar7,@r0
   0CD8 8D 82              2884 	mov	dpl,r5
   0CDA 8E 83              2885 	mov	dph,r6
   0CDC 8F F0              2886 	mov	b,r7
   0CDE 12s00r00           2887 	lcall	__gptrget
   0CE1 FA                 2888 	mov	r2,a
   0CE2 0A                 2889 	inc	r2
   0CE3 8D 82              2890 	mov	dpl,r5
   0CE5 8E 83              2891 	mov	dph,r6
   0CE7 8F F0              2892 	mov	b,r7
   0CE9 EA                 2893 	mov	a,r2
   0CEA 12s00r00           2894 	lcall	__gptrput
                           2895 ;	../../../core/net/rime/rudolph1.c:324: c->chunk = c->highest_chunk_heard = 0;
   0CED A8*00              2896 	mov	r0,_bp
   0CEF 08                 2897 	inc	r0
   0CF0 74 A2              2898 	mov	a,#0xA2
   0CF2 26                 2899 	add	a,@r0
   0CF3 FA                 2900 	mov	r2,a
   0CF4 E4                 2901 	clr	a
   0CF5 08                 2902 	inc	r0
   0CF6 36                 2903 	addc	a,@r0
   0CF7 FB                 2904 	mov	r3,a
   0CF8 08                 2905 	inc	r0
   0CF9 86 04              2906 	mov	ar4,@r0
   0CFB A8*00              2907 	mov	r0,_bp
   0CFD 08                 2908 	inc	r0
   0CFE 74 A4              2909 	mov	a,#0xA4
   0D00 26                 2910 	add	a,@r0
   0D01 FD                 2911 	mov	r5,a
   0D02 E4                 2912 	clr	a
   0D03 08                 2913 	inc	r0
   0D04 36                 2914 	addc	a,@r0
   0D05 FE                 2915 	mov	r6,a
   0D06 08                 2916 	inc	r0
   0D07 86 07              2917 	mov	ar7,@r0
   0D09 8D 82              2918 	mov	dpl,r5
   0D0B 8E 83              2919 	mov	dph,r6
   0D0D 8F F0              2920 	mov	b,r7
   0D0F E4                 2921 	clr	a
   0D10 12s00r00           2922 	lcall	__gptrput
   0D13 A3                 2923 	inc	dptr
   0D14 E4                 2924 	clr	a
   0D15 12s00r00           2925 	lcall	__gptrput
   0D18 8A 82              2926 	mov	dpl,r2
   0D1A 8B 83              2927 	mov	dph,r3
   0D1C 8C F0              2928 	mov	b,r4
   0D1E E4                 2929 	clr	a
   0D1F 12s00r00           2930 	lcall	__gptrput
   0D22 A3                 2931 	inc	dptr
   0D23 E4                 2932 	clr	a
   0D24 12s00r00           2933 	lcall	__gptrput
                           2934 ;	../../../core/net/rime/rudolph1.c:326: format_data(c, 0);
   0D27 E4                 2935 	clr	a
   0D28 C0 E0              2936 	push	acc
   0D2A C0 E0              2937 	push	acc
   0D2C A8*00              2938 	mov	r0,_bp
   0D2E 08                 2939 	inc	r0
   0D2F 86 82              2940 	mov	dpl,@r0
   0D31 08                 2941 	inc	r0
   0D32 86 83              2942 	mov	dph,@r0
   0D34 08                 2943 	inc	r0
   0D35 86 F0              2944 	mov	b,@r0
   0D37 12s00rAE           2945 	lcall	_format_data
   0D3A 15 81              2946 	dec	sp
   0D3C 15 81              2947 	dec	sp
                           2948 ;	../../../core/net/rime/rudolph1.c:327: trickle_send(&c->trickle);
   0D3E A8*00              2949 	mov	r0,_bp
   0D40 08                 2950 	inc	r0
   0D41 86 82              2951 	mov	dpl,@r0
   0D43 08                 2952 	inc	r0
   0D44 86 83              2953 	mov	dph,@r0
   0D46 08                 2954 	inc	r0
   0D47 86 F0              2955 	mov	b,@r0
   0D49 12s00r00           2956 	lcall	_trickle_send
                           2957 ;	../../../core/net/rime/rudolph1.c:328: c->chunk++;
   0D4C A8*00              2958 	mov	r0,_bp
   0D4E 08                 2959 	inc	r0
   0D4F 74 A2              2960 	mov	a,#0xA2
   0D51 26                 2961 	add	a,@r0
   0D52 FA                 2962 	mov	r2,a
   0D53 E4                 2963 	clr	a
   0D54 08                 2964 	inc	r0
   0D55 36                 2965 	addc	a,@r0
   0D56 FB                 2966 	mov	r3,a
   0D57 08                 2967 	inc	r0
   0D58 86 04              2968 	mov	ar4,@r0
   0D5A 8A 82              2969 	mov	dpl,r2
   0D5C 8B 83              2970 	mov	dph,r3
   0D5E 8C F0              2971 	mov	b,r4
   0D60 12s00r00           2972 	lcall	__gptrget
   0D63 FD                 2973 	mov	r5,a
   0D64 A3                 2974 	inc	dptr
   0D65 12s00r00           2975 	lcall	__gptrget
   0D68 FE                 2976 	mov	r6,a
   0D69 0D                 2977 	inc	r5
   0D6A BD 00 01           2978 	cjne	r5,#0x00,00103$
   0D6D 0E                 2979 	inc	r6
   0D6E                    2980 00103$:
   0D6E 8A 82              2981 	mov	dpl,r2
   0D70 8B 83              2982 	mov	dph,r3
   0D72 8C F0              2983 	mov	b,r4
   0D74 ED                 2984 	mov	a,r5
   0D75 12s00r00           2985 	lcall	__gptrput
   0D78 A3                 2986 	inc	dptr
   0D79 EE                 2987 	mov	a,r6
   0D7A 12s00r00           2988 	lcall	__gptrput
                           2989 ;	../../../core/net/rime/rudolph1.c:329: c->send_interval = send_interval;
   0D7D A8*00              2990 	mov	r0,_bp
   0D7F 08                 2991 	inc	r0
   0D80 74 A0              2992 	mov	a,#0xA0
   0D82 26                 2993 	add	a,@r0
   0D83 FA                 2994 	mov	r2,a
   0D84 E4                 2995 	clr	a
   0D85 08                 2996 	inc	r0
   0D86 36                 2997 	addc	a,@r0
   0D87 FB                 2998 	mov	r3,a
   0D88 08                 2999 	inc	r0
   0D89 86 04              3000 	mov	ar4,@r0
   0D8B 8A 82              3001 	mov	dpl,r2
   0D8D 8B 83              3002 	mov	dph,r3
   0D8F 8C F0              3003 	mov	b,r4
   0D91 E5*00              3004 	mov	a,_bp
   0D93 24 FC              3005 	add	a,#0xfc
   0D95 F8                 3006 	mov	r0,a
   0D96 E6                 3007 	mov	a,@r0
   0D97 12s00r00           3008 	lcall	__gptrput
   0D9A A3                 3009 	inc	dptr
   0D9B 08                 3010 	inc	r0
   0D9C E6                 3011 	mov	a,@r0
   0D9D 12s00r00           3012 	lcall	__gptrput
                           3013 ;	../../../core/net/rime/rudolph1.c:330: ctimer_set(&c->t, send_interval, send_next_packet, c);
   0DA0 A8*00              3014 	mov	r0,_bp
   0DA2 08                 3015 	inc	r0
   0DA3 74 8B              3016 	mov	a,#0x8B
   0DA5 26                 3017 	add	a,@r0
   0DA6 FA                 3018 	mov	r2,a
   0DA7 E4                 3019 	clr	a
   0DA8 08                 3020 	inc	r0
   0DA9 36                 3021 	addc	a,@r0
   0DAA FB                 3022 	mov	r3,a
   0DAB 08                 3023 	inc	r0
   0DAC 86 04              3024 	mov	ar4,@r0
   0DAE A8*00              3025 	mov	r0,_bp
   0DB0 08                 3026 	inc	r0
   0DB1 E6                 3027 	mov	a,@r0
   0DB2 C0 E0              3028 	push	acc
   0DB4 08                 3029 	inc	r0
   0DB5 E6                 3030 	mov	a,@r0
   0DB6 C0 E0              3031 	push	acc
   0DB8 08                 3032 	inc	r0
   0DB9 E6                 3033 	mov	a,@r0
   0DBA C0 E0              3034 	push	acc
   0DBC 74rFD              3035 	mov	a,#_send_next_packet
   0DBE C0 E0              3036 	push	acc
   0DC0 74s09              3037 	mov	a,#(_send_next_packet >> 8)
   0DC2 C0 E0              3038 	push	acc
   0DC4 E5*00              3039 	mov	a,_bp
   0DC6 24 FC              3040 	add	a,#0xfc
   0DC8 F8                 3041 	mov	r0,a
   0DC9 E6                 3042 	mov	a,@r0
   0DCA C0 E0              3043 	push	acc
   0DCC 08                 3044 	inc	r0
   0DCD E6                 3045 	mov	a,@r0
   0DCE C0 E0              3046 	push	acc
   0DD0 8A 82              3047 	mov	dpl,r2
   0DD2 8B 83              3048 	mov	dph,r3
   0DD4 8C F0              3049 	mov	b,r4
   0DD6 12s00r00           3050 	lcall	_ctimer_set
   0DD9 E5 81              3051 	mov	a,sp
   0DDB 24 F9              3052 	add	a,#0xf9
   0DDD F5 81              3053 	mov	sp,a
   0DDF 85*00 81           3054 	mov	sp,_bp
   0DE2 D0*00              3055 	pop	_bp
   0DE4 22                 3056 	ret
                           3057 ;------------------------------------------------------------
                           3058 ;Allocation info for local variables in function 'rudolph1_stop'
                           3059 ;------------------------------------------------------------
                           3060 ;c                         Allocated to registers r2 r3 r4 
                           3061 ;------------------------------------------------------------
                           3062 ;	../../../core/net/rime/rudolph1.c:334: rudolph1_stop(struct rudolph1_conn *c)
                           3063 ;	-----------------------------------------
                           3064 ;	 function rudolph1_stop
                           3065 ;	-----------------------------------------
   0DE5                    3066 _rudolph1_stop:
   0DE5 AA 82              3067 	mov	r2,dpl
   0DE7 AB 83              3068 	mov	r3,dph
   0DE9 AC F0              3069 	mov	r4,b
                           3070 ;	../../../core/net/rime/rudolph1.c:336: ctimer_stop(&c->t);
   0DEB 74 8B              3071 	mov	a,#0x8B
   0DED 2A                 3072 	add	a,r2
   0DEE FA                 3073 	mov	r2,a
   0DEF E4                 3074 	clr	a
   0DF0 3B                 3075 	addc	a,r3
   0DF1 FB                 3076 	mov	r3,a
   0DF2 8A 82              3077 	mov	dpl,r2
   0DF4 8B 83              3078 	mov	dph,r3
   0DF6 8C F0              3079 	mov	b,r4
   0DF8 02s00r00           3080 	ljmp	_ctimer_stop
                           3081 	.area CSEG    (CODE)
                           3082 	.area CONST   (CODE)
   0000                    3083 _ipolite:
   0000r33s08              3084 	.byte _recv_ipolite,(_recv_ipolite >> 8)
   0002r31s08              3085 	.byte _sent_ipolite,(_sent_ipolite >> 8)
   0004r32s08              3086 	.byte _dropped_ipolite,(_dropped_ipolite >> 8)
   0006                    3087 _trickle:
   0006rF5s07              3088 	.byte _recv_trickle,(_recv_trickle >> 8)
                           3089 	.area XINIT   (CODE)
                           3090 	.area CABS    (ABS,CODE)
