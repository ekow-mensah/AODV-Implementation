                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6121 (Nov 17 2015) (CYGWIN)
                              4 ; This file was generated Sat Jan 27 13:27:13 2018
                              5 ;--------------------------------------------------------
                              6 	.module uip_fw
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _IRCON2_P2IF
                             13 	.globl _IRCON2_UTX0IF
                             14 	.globl _IRCON2_UTX1IF
                             15 	.globl _IRCON2_P1IF
                             16 	.globl _IRCON2_WDTIF
                             17 	.globl _CY
                             18 	.globl _AC
                             19 	.globl _F0
                             20 	.globl _RS1
                             21 	.globl _RS0
                             22 	.globl _OV
                             23 	.globl _F1
                             24 	.globl _P
                             25 	.globl _IRCON_DMAIF
                             26 	.globl _IRCON_T1IF
                             27 	.globl _IRCON_T2IF
                             28 	.globl _IRCON_T3IF
                             29 	.globl _IRCON_T4IF
                             30 	.globl _IRCON_P0IF
                             31 	.globl _IRCON_STIF
                             32 	.globl _IEN1_DMAIE
                             33 	.globl _IEN1_T1IE
                             34 	.globl _IEN1_T2IE
                             35 	.globl _IEN1_T3IE
                             36 	.globl _IEN1_T4IE
                             37 	.globl _IEN1_P0IE
                             38 	.globl _IEN0_RFERRIE
                             39 	.globl _IEN0_ADCIE
                             40 	.globl _IEN0_URX0IE
                             41 	.globl _IEN0_URX1IE
                             42 	.globl _IEN0_ENCIE
                             43 	.globl _IEN0_STIE
                             44 	.globl _IEN0_EA
                             45 	.globl _EA
                             46 	.globl _P2_4
                             47 	.globl _P2_3
                             48 	.globl _P2_2
                             49 	.globl _P2_1
                             50 	.globl _P2_0
                             51 	.globl _S0CON_ENCIF_0
                             52 	.globl _S0CON_ENCIF_1
                             53 	.globl _P1_7
                             54 	.globl _P1_6
                             55 	.globl _P1_5
                             56 	.globl _P1_4
                             57 	.globl _P1_3
                             58 	.globl _P1_2
                             59 	.globl _P1_1
                             60 	.globl _P1_0
                             61 	.globl _TCON_IT0
                             62 	.globl _TCON_RFERRIF
                             63 	.globl _TCON_IT1
                             64 	.globl _TCON_URX0IF
                             65 	.globl _TCON_ADCIF
                             66 	.globl _TCON_URX1IF
                             67 	.globl _P0_0
                             68 	.globl _P0_1
                             69 	.globl _P0_2
                             70 	.globl _P0_3
                             71 	.globl _P0_4
                             72 	.globl _P0_5
                             73 	.globl _P0_6
                             74 	.globl _P0_7
                             75 	.globl _P2DIR
                             76 	.globl _P1DIR
                             77 	.globl _P0DIR
                             78 	.globl _U1GCR
                             79 	.globl _U1UCR
                             80 	.globl _U1BAUD
                             81 	.globl _U1BUF
                             82 	.globl _U1CSR
                             83 	.globl _P2INP
                             84 	.globl _P1INP
                             85 	.globl _P2SEL
                             86 	.globl _P1SEL
                             87 	.globl _P0SEL
                             88 	.globl _ADCCFG
                             89 	.globl _PERCFG
                             90 	.globl _B
                             91 	.globl _T4CC1
                             92 	.globl _T4CCTL1
                             93 	.globl _T4CC0
                             94 	.globl _T4CCTL0
                             95 	.globl _T4CTL
                             96 	.globl _T4CNT
                             97 	.globl _RFIF
                             98 	.globl _IRCON2
                             99 	.globl _T1CCTL2
                            100 	.globl _T1CCTL1
                            101 	.globl _T1CCTL0
                            102 	.globl _T1CTL
                            103 	.globl _T1CNTH
                            104 	.globl _T1CNTL
                            105 	.globl _RFST
                            106 	.globl _ACC
                            107 	.globl _T1CC2H
                            108 	.globl _T1CC2L
                            109 	.globl _T1CC1H
                            110 	.globl _T1CC1L
                            111 	.globl _T1CC0H
                            112 	.globl _T1CC0L
                            113 	.globl _RFD
                            114 	.globl _TIMIF
                            115 	.globl _DMAREQ
                            116 	.globl _DMAARM
                            117 	.globl _DMA0CFGH
                            118 	.globl _DMA0CFGL
                            119 	.globl _DMA1CFGH
                            120 	.globl _DMA1CFGL
                            121 	.globl _DMAIRQ
                            122 	.globl _PSW
                            123 	.globl _T3CC1
                            124 	.globl _T3CCTL1
                            125 	.globl _T3CC0
                            126 	.globl _T3CCTL0
                            127 	.globl _T3CTL
                            128 	.globl _T3CNT
                            129 	.globl _WDCTL
                            130 	.globl _T2CON
                            131 	.globl _MEMCTR
                            132 	.globl _CLKCON
                            133 	.globl _U0GCR
                            134 	.globl _U0UCR
                            135 	.globl _T2CNF
                            136 	.globl _U0BAUD
                            137 	.globl _U0BUF
                            138 	.globl _IRCON
                            139 	.globl _SLEEP
                            140 	.globl _RNDH
                            141 	.globl _RNDL
                            142 	.globl _ADCH
                            143 	.globl _ADCL
                            144 	.globl _IP1
                            145 	.globl _IEN1
                            146 	.globl _RCCTL
                            147 	.globl _ADCCON3
                            148 	.globl _ADCCON2
                            149 	.globl _ADCCON1
                            150 	.globl _ENCCS
                            151 	.globl _ENCDO
                            152 	.globl _ENCDI
                            153 	.globl _FWDATA
                            154 	.globl _FCTL
                            155 	.globl _FADDRH
                            156 	.globl _FADDRL
                            157 	.globl _FWT
                            158 	.globl _IP0
                            159 	.globl _IEN0
                            160 	.globl _IE
                            161 	.globl _T2THD
                            162 	.globl _T2TLD
                            163 	.globl _T2CAPHPH
                            164 	.globl _T2CAPLPL
                            165 	.globl _T2OF2
                            166 	.globl _T2OF1
                            167 	.globl _T2OF0
                            168 	.globl _P2
                            169 	.globl _PSBANK
                            170 	.globl _FMAP
                            171 	.globl _T2PEROF2
                            172 	.globl _T2PEROF1
                            173 	.globl _T2PEROF0
                            174 	.globl _S1CON
                            175 	.globl _IEN2
                            176 	.globl _HSRC
                            177 	.globl _S0CON
                            178 	.globl _ST2
                            179 	.globl _ST1
                            180 	.globl _ST0
                            181 	.globl _T2CMP
                            182 	.globl __XPAGE
                            183 	.globl _DPS
                            184 	.globl _RFIM
                            185 	.globl _P1
                            186 	.globl _P0INP
                            187 	.globl _P1IEN
                            188 	.globl _PICTL
                            189 	.globl _P2IFG
                            190 	.globl _P1IFG
                            191 	.globl _P0IFG
                            192 	.globl _TCON
                            193 	.globl _PCON
                            194 	.globl _U0CSR
                            195 	.globl _DPH1
                            196 	.globl _DPL1
                            197 	.globl _DPH0
                            198 	.globl _DPL0
                            199 	.globl _SP
                            200 	.globl _P0
                            201 	.globl _ADC_SHADOW
                            202 	.globl _U1BUF_SHADOW
                            203 	.globl _RFD_SHADOW
                            204 	.globl _U0BUF_SHADOW
                            205 	.globl _RFSTATUS
                            206 	.globl _CHIPID
                            207 	.globl _CHVER
                            208 	.globl _FSMTC1
                            209 	.globl _RXFIFOCNT
                            210 	.globl _IOCFG3
                            211 	.globl _IOCFG2
                            212 	.globl _IOCFG1
                            213 	.globl _IOCFG0
                            214 	.globl _SHORTADDRL
                            215 	.globl _SHORTADDRH
                            216 	.globl _PANIDL
                            217 	.globl _PANIDH
                            218 	.globl _IEEE_ADDR7
                            219 	.globl _IEEE_ADDR6
                            220 	.globl _IEEE_ADDR5
                            221 	.globl _IEEE_ADDR4
                            222 	.globl _IEEE_ADDR3
                            223 	.globl _IEEE_ADDR2
                            224 	.globl _IEEE_ADDR1
                            225 	.globl _IEEE_ADDR0
                            226 	.globl _DACTSTL
                            227 	.globl _DACTSTH
                            228 	.globl _ADCTSTL
                            229 	.globl _ADCTSTH
                            230 	.globl _FSMSTATE
                            231 	.globl _AGCCTRLL
                            232 	.globl _AGCCTRLH
                            233 	.globl _MANORL
                            234 	.globl _MANORH
                            235 	.globl _MANANDL
                            236 	.globl _MANANDH
                            237 	.globl _FSMTCL
                            238 	.globl _FSMTCH
                            239 	.globl _RFPWR
                            240 	.globl _CSPT
                            241 	.globl _CSPCTRL
                            242 	.globl _CSPZ
                            243 	.globl _CSPY
                            244 	.globl _CSPX
                            245 	.globl _FSCTRLL
                            246 	.globl _FSCTRLH
                            247 	.globl _RXCTRL1L
                            248 	.globl _RXCTRL1H
                            249 	.globl _RXCTRL0L
                            250 	.globl _RXCTRL0H
                            251 	.globl _TXCTRLL
                            252 	.globl _TXCTRLH
                            253 	.globl _SYNCWORDL
                            254 	.globl _SYNCWORDH
                            255 	.globl _RSSIL
                            256 	.globl _RSSIH
                            257 	.globl _MDMCTRL1L
                            258 	.globl _MDMCTRL1H
                            259 	.globl _MDMCTRL0L
                            260 	.globl _MDMCTRL0H
                            261 	.globl _uip_fw_init
                            262 	.globl _uip_fw_output
                            263 	.globl _uip_fw_forward
                            264 	.globl _uip_fw_register
                            265 	.globl _uip_fw_default
                            266 	.globl _uip_fw_periodic
                            267 ;--------------------------------------------------------
                            268 ; special function registers
                            269 ;--------------------------------------------------------
                            270 	.area RSEG    (ABS,DATA)
   0000                     271 	.org 0x0000
                    0080    272 _P0	=	0x0080
                    0081    273 _SP	=	0x0081
                    0082    274 _DPL0	=	0x0082
                    0083    275 _DPH0	=	0x0083
                    0084    276 _DPL1	=	0x0084
                    0085    277 _DPH1	=	0x0085
                    0086    278 _U0CSR	=	0x0086
                    0087    279 _PCON	=	0x0087
                    0088    280 _TCON	=	0x0088
                    0089    281 _P0IFG	=	0x0089
                    008A    282 _P1IFG	=	0x008a
                    008B    283 _P2IFG	=	0x008b
                    008C    284 _PICTL	=	0x008c
                    008D    285 _P1IEN	=	0x008d
                    008F    286 _P0INP	=	0x008f
                    0090    287 _P1	=	0x0090
                    0091    288 _RFIM	=	0x0091
                    0092    289 _DPS	=	0x0092
                    0093    290 __XPAGE	=	0x0093
                    0094    291 _T2CMP	=	0x0094
                    0095    292 _ST0	=	0x0095
                    0096    293 _ST1	=	0x0096
                    0097    294 _ST2	=	0x0097
                    0098    295 _S0CON	=	0x0098
                    0099    296 _HSRC	=	0x0099
                    009A    297 _IEN2	=	0x009a
                    009B    298 _S1CON	=	0x009b
                    009C    299 _T2PEROF0	=	0x009c
                    009D    300 _T2PEROF1	=	0x009d
                    009E    301 _T2PEROF2	=	0x009e
                    009F    302 _FMAP	=	0x009f
                    009F    303 _PSBANK	=	0x009f
                    00A0    304 _P2	=	0x00a0
                    00A1    305 _T2OF0	=	0x00a1
                    00A2    306 _T2OF1	=	0x00a2
                    00A3    307 _T2OF2	=	0x00a3
                    00A4    308 _T2CAPLPL	=	0x00a4
                    00A5    309 _T2CAPHPH	=	0x00a5
                    00A6    310 _T2TLD	=	0x00a6
                    00A7    311 _T2THD	=	0x00a7
                    00A8    312 _IE	=	0x00a8
                    00A8    313 _IEN0	=	0x00a8
                    00A9    314 _IP0	=	0x00a9
                    00AB    315 _FWT	=	0x00ab
                    00AC    316 _FADDRL	=	0x00ac
                    00AD    317 _FADDRH	=	0x00ad
                    00AE    318 _FCTL	=	0x00ae
                    00AF    319 _FWDATA	=	0x00af
                    00B1    320 _ENCDI	=	0x00b1
                    00B2    321 _ENCDO	=	0x00b2
                    00B3    322 _ENCCS	=	0x00b3
                    00B4    323 _ADCCON1	=	0x00b4
                    00B5    324 _ADCCON2	=	0x00b5
                    00B6    325 _ADCCON3	=	0x00b6
                    00B7    326 _RCCTL	=	0x00b7
                    00B8    327 _IEN1	=	0x00b8
                    00B9    328 _IP1	=	0x00b9
                    00BA    329 _ADCL	=	0x00ba
                    00BB    330 _ADCH	=	0x00bb
                    00BC    331 _RNDL	=	0x00bc
                    00BD    332 _RNDH	=	0x00bd
                    00BE    333 _SLEEP	=	0x00be
                    00C0    334 _IRCON	=	0x00c0
                    00C1    335 _U0BUF	=	0x00c1
                    00C2    336 _U0BAUD	=	0x00c2
                    00C3    337 _T2CNF	=	0x00c3
                    00C4    338 _U0UCR	=	0x00c4
                    00C5    339 _U0GCR	=	0x00c5
                    00C6    340 _CLKCON	=	0x00c6
                    00C7    341 _MEMCTR	=	0x00c7
                    00C8    342 _T2CON	=	0x00c8
                    00C9    343 _WDCTL	=	0x00c9
                    00CA    344 _T3CNT	=	0x00ca
                    00CB    345 _T3CTL	=	0x00cb
                    00CC    346 _T3CCTL0	=	0x00cc
                    00CD    347 _T3CC0	=	0x00cd
                    00CE    348 _T3CCTL1	=	0x00ce
                    00CF    349 _T3CC1	=	0x00cf
                    00D0    350 _PSW	=	0x00d0
                    00D1    351 _DMAIRQ	=	0x00d1
                    00D2    352 _DMA1CFGL	=	0x00d2
                    00D3    353 _DMA1CFGH	=	0x00d3
                    00D4    354 _DMA0CFGL	=	0x00d4
                    00D5    355 _DMA0CFGH	=	0x00d5
                    00D6    356 _DMAARM	=	0x00d6
                    00D7    357 _DMAREQ	=	0x00d7
                    00D8    358 _TIMIF	=	0x00d8
                    00D9    359 _RFD	=	0x00d9
                    00DA    360 _T1CC0L	=	0x00da
                    00DB    361 _T1CC0H	=	0x00db
                    00DC    362 _T1CC1L	=	0x00dc
                    00DD    363 _T1CC1H	=	0x00dd
                    00DE    364 _T1CC2L	=	0x00de
                    00DF    365 _T1CC2H	=	0x00df
                    00E0    366 _ACC	=	0x00e0
                    00E1    367 _RFST	=	0x00e1
                    00E2    368 _T1CNTL	=	0x00e2
                    00E3    369 _T1CNTH	=	0x00e3
                    00E4    370 _T1CTL	=	0x00e4
                    00E5    371 _T1CCTL0	=	0x00e5
                    00E6    372 _T1CCTL1	=	0x00e6
                    00E7    373 _T1CCTL2	=	0x00e7
                    00E8    374 _IRCON2	=	0x00e8
                    00E9    375 _RFIF	=	0x00e9
                    00EA    376 _T4CNT	=	0x00ea
                    00EB    377 _T4CTL	=	0x00eb
                    00EC    378 _T4CCTL0	=	0x00ec
                    00ED    379 _T4CC0	=	0x00ed
                    00EE    380 _T4CCTL1	=	0x00ee
                    00EF    381 _T4CC1	=	0x00ef
                    00F0    382 _B	=	0x00f0
                    00F1    383 _PERCFG	=	0x00f1
                    00F2    384 _ADCCFG	=	0x00f2
                    00F3    385 _P0SEL	=	0x00f3
                    00F4    386 _P1SEL	=	0x00f4
                    00F5    387 _P2SEL	=	0x00f5
                    00F6    388 _P1INP	=	0x00f6
                    00F7    389 _P2INP	=	0x00f7
                    00F8    390 _U1CSR	=	0x00f8
                    00F9    391 _U1BUF	=	0x00f9
                    00FA    392 _U1BAUD	=	0x00fa
                    00FB    393 _U1UCR	=	0x00fb
                    00FC    394 _U1GCR	=	0x00fc
                    00FD    395 _P0DIR	=	0x00fd
                    00FE    396 _P1DIR	=	0x00fe
                    00FF    397 _P2DIR	=	0x00ff
                            398 ;--------------------------------------------------------
                            399 ; special function bits
                            400 ;--------------------------------------------------------
                            401 	.area RSEG    (ABS,DATA)
   0000                     402 	.org 0x0000
                    0087    403 _P0_7	=	0x0087
                    0086    404 _P0_6	=	0x0086
                    0085    405 _P0_5	=	0x0085
                    0084    406 _P0_4	=	0x0084
                    0083    407 _P0_3	=	0x0083
                    0082    408 _P0_2	=	0x0082
                    0081    409 _P0_1	=	0x0081
                    0080    410 _P0_0	=	0x0080
                    008F    411 _TCON_URX1IF	=	0x008f
                    008D    412 _TCON_ADCIF	=	0x008d
                    008B    413 _TCON_URX0IF	=	0x008b
                    008A    414 _TCON_IT1	=	0x008a
                    0089    415 _TCON_RFERRIF	=	0x0089
                    0088    416 _TCON_IT0	=	0x0088
                    0090    417 _P1_0	=	0x0090
                    0091    418 _P1_1	=	0x0091
                    0092    419 _P1_2	=	0x0092
                    0093    420 _P1_3	=	0x0093
                    0094    421 _P1_4	=	0x0094
                    0095    422 _P1_5	=	0x0095
                    0096    423 _P1_6	=	0x0096
                    0097    424 _P1_7	=	0x0097
                    0099    425 _S0CON_ENCIF_1	=	0x0099
                    0098    426 _S0CON_ENCIF_0	=	0x0098
                    00A0    427 _P2_0	=	0x00a0
                    00A1    428 _P2_1	=	0x00a1
                    00A2    429 _P2_2	=	0x00a2
                    00A3    430 _P2_3	=	0x00a3
                    00A4    431 _P2_4	=	0x00a4
                    00AF    432 _EA	=	0x00af
                    00AF    433 _IEN0_EA	=	0x00af
                    00AD    434 _IEN0_STIE	=	0x00ad
                    00AC    435 _IEN0_ENCIE	=	0x00ac
                    00AB    436 _IEN0_URX1IE	=	0x00ab
                    00AA    437 _IEN0_URX0IE	=	0x00aa
                    00A9    438 _IEN0_ADCIE	=	0x00a9
                    00A8    439 _IEN0_RFERRIE	=	0x00a8
                    00BD    440 _IEN1_P0IE	=	0x00bd
                    00BC    441 _IEN1_T4IE	=	0x00bc
                    00BB    442 _IEN1_T3IE	=	0x00bb
                    00BA    443 _IEN1_T2IE	=	0x00ba
                    00B9    444 _IEN1_T1IE	=	0x00b9
                    00B8    445 _IEN1_DMAIE	=	0x00b8
                    00C7    446 _IRCON_STIF	=	0x00c7
                    00C5    447 _IRCON_P0IF	=	0x00c5
                    00C4    448 _IRCON_T4IF	=	0x00c4
                    00C3    449 _IRCON_T3IF	=	0x00c3
                    00C2    450 _IRCON_T2IF	=	0x00c2
                    00C1    451 _IRCON_T1IF	=	0x00c1
                    00C0    452 _IRCON_DMAIF	=	0x00c0
                    00D0    453 _P	=	0x00d0
                    00D1    454 _F1	=	0x00d1
                    00D2    455 _OV	=	0x00d2
                    00D3    456 _RS0	=	0x00d3
                    00D4    457 _RS1	=	0x00d4
                    00D5    458 _F0	=	0x00d5
                    00D6    459 _AC	=	0x00d6
                    00D7    460 _CY	=	0x00d7
                    00EC    461 _IRCON2_WDTIF	=	0x00ec
                    00EB    462 _IRCON2_P1IF	=	0x00eb
                    00EA    463 _IRCON2_UTX1IF	=	0x00ea
                    00E9    464 _IRCON2_UTX0IF	=	0x00e9
                    00E8    465 _IRCON2_P2IF	=	0x00e8
                            466 ;--------------------------------------------------------
                            467 ; overlayable register banks
                            468 ;--------------------------------------------------------
                            469 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     470 	.ds 8
                            471 ;--------------------------------------------------------
                            472 ; internal ram data
                            473 ;--------------------------------------------------------
                            474 	.area DSEG    (DATA)
                            475 ;--------------------------------------------------------
                            476 ; overlayable items in internal ram 
                            477 ;--------------------------------------------------------
                            478 	.area OSEG    (OVR,DATA)
                            479 ;--------------------------------------------------------
                            480 ; indirectly addressable internal ram data
                            481 ;--------------------------------------------------------
                            482 	.area ISEG    (DATA)
                            483 ;--------------------------------------------------------
                            484 ; absolute internal ram data
                            485 ;--------------------------------------------------------
                            486 	.area IABS    (ABS,DATA)
                            487 	.area IABS    (ABS,DATA)
                            488 ;--------------------------------------------------------
                            489 ; bit data
                            490 ;--------------------------------------------------------
                            491 	.area BSEG    (BIT)
                            492 ;--------------------------------------------------------
                            493 ; paged external ram data
                            494 ;--------------------------------------------------------
                            495 	.area PSEG    (PAG,XDATA)
                            496 ;--------------------------------------------------------
                            497 ; external ram data
                            498 ;--------------------------------------------------------
                            499 	.area XSEG    (XDATA)
                    DF02    500 _MDMCTRL0H	=	0xdf02
                    DF03    501 _MDMCTRL0L	=	0xdf03
                    DF04    502 _MDMCTRL1H	=	0xdf04
                    DF05    503 _MDMCTRL1L	=	0xdf05
                    DF06    504 _RSSIH	=	0xdf06
                    DF07    505 _RSSIL	=	0xdf07
                    DF08    506 _SYNCWORDH	=	0xdf08
                    DF09    507 _SYNCWORDL	=	0xdf09
                    DF0A    508 _TXCTRLH	=	0xdf0a
                    DF0B    509 _TXCTRLL	=	0xdf0b
                    DF0C    510 _RXCTRL0H	=	0xdf0c
                    DF0D    511 _RXCTRL0L	=	0xdf0d
                    DF0E    512 _RXCTRL1H	=	0xdf0e
                    DF0F    513 _RXCTRL1L	=	0xdf0f
                    DF10    514 _FSCTRLH	=	0xdf10
                    DF11    515 _FSCTRLL	=	0xdf11
                    DF12    516 _CSPX	=	0xdf12
                    DF13    517 _CSPY	=	0xdf13
                    DF14    518 _CSPZ	=	0xdf14
                    DF15    519 _CSPCTRL	=	0xdf15
                    DF16    520 _CSPT	=	0xdf16
                    DF17    521 _RFPWR	=	0xdf17
                    DF20    522 _FSMTCH	=	0xdf20
                    DF21    523 _FSMTCL	=	0xdf21
                    DF22    524 _MANANDH	=	0xdf22
                    DF23    525 _MANANDL	=	0xdf23
                    DF24    526 _MANORH	=	0xdf24
                    DF25    527 _MANORL	=	0xdf25
                    DF26    528 _AGCCTRLH	=	0xdf26
                    DF27    529 _AGCCTRLL	=	0xdf27
                    DF39    530 _FSMSTATE	=	0xdf39
                    DF3A    531 _ADCTSTH	=	0xdf3a
                    DF3B    532 _ADCTSTL	=	0xdf3b
                    DF3C    533 _DACTSTH	=	0xdf3c
                    DF3D    534 _DACTSTL	=	0xdf3d
                    DF43    535 _IEEE_ADDR0	=	0xdf43
                    DF44    536 _IEEE_ADDR1	=	0xdf44
                    DF45    537 _IEEE_ADDR2	=	0xdf45
                    DF46    538 _IEEE_ADDR3	=	0xdf46
                    DF47    539 _IEEE_ADDR4	=	0xdf47
                    DF48    540 _IEEE_ADDR5	=	0xdf48
                    DF49    541 _IEEE_ADDR6	=	0xdf49
                    DF4A    542 _IEEE_ADDR7	=	0xdf4a
                    DF4B    543 _PANIDH	=	0xdf4b
                    DF4C    544 _PANIDL	=	0xdf4c
                    DF4D    545 _SHORTADDRH	=	0xdf4d
                    DF4E    546 _SHORTADDRL	=	0xdf4e
                    DF4F    547 _IOCFG0	=	0xdf4f
                    DF50    548 _IOCFG1	=	0xdf50
                    DF51    549 _IOCFG2	=	0xdf51
                    DF52    550 _IOCFG3	=	0xdf52
                    DF53    551 _RXFIFOCNT	=	0xdf53
                    DF54    552 _FSMTC1	=	0xdf54
                    DF60    553 _CHVER	=	0xdf60
                    DF61    554 _CHIPID	=	0xdf61
                    DF62    555 _RFSTATUS	=	0xdf62
                    DFC1    556 _U0BUF_SHADOW	=	0xdfc1
                    DFD9    557 _RFD_SHADOW	=	0xdfd9
                    DFF9    558 _U1BUF_SHADOW	=	0xdff9
                    DFBA    559 _ADC_SHADOW	=	0xdfba
   0000                     560 _fwcache:
   0000                     561 	.ds 28
                            562 ;--------------------------------------------------------
                            563 ; absolute external ram data
                            564 ;--------------------------------------------------------
                            565 	.area XABS    (ABS,XDATA)
                            566 ;--------------------------------------------------------
                            567 ; external initialized ram data
                            568 ;--------------------------------------------------------
                            569 	.area XISEG   (XDATA)
   0000                     570 _netifs:
   0000                     571 	.ds 3
   0003                     572 _defaultnetif:
   0003                     573 	.ds 3
                            574 	.area HOME    (CODE)
                            575 	.area GSINIT0 (CODE)
                            576 	.area GSINIT1 (CODE)
                            577 	.area GSINIT2 (CODE)
                            578 	.area GSINIT3 (CODE)
                            579 	.area GSINIT4 (CODE)
                            580 	.area GSINIT5 (CODE)
                            581 	.area GSINIT  (CODE)
                            582 	.area GSFINAL (CODE)
                            583 	.area CSEG    (CODE)
                            584 ;--------------------------------------------------------
                            585 ; global & static initialisations
                            586 ;--------------------------------------------------------
                            587 	.area HOME    (CODE)
                            588 	.area GSINIT  (CODE)
                            589 	.area GSFINAL (CODE)
                            590 	.area GSINIT  (CODE)
                            591 ;--------------------------------------------------------
                            592 ; Home
                            593 ;--------------------------------------------------------
                            594 	.area HOME    (CODE)
                            595 	.area HOME    (CODE)
                            596 ;--------------------------------------------------------
                            597 ; code
                            598 ;--------------------------------------------------------
                            599 	.area CSEG    (CODE)
                            600 ;------------------------------------------------------------
                            601 ;Allocation info for local variables in function 'uip_fw_init'
                            602 ;------------------------------------------------------------
                            603 ;t                         Allocated to registers r5 r6 r7 
                            604 ;------------------------------------------------------------
                            605 ;	../../../core/net/uip-fw.c:186: uip_fw_init(void)
                            606 ;	-----------------------------------------
                            607 ;	 function uip_fw_init
                            608 ;	-----------------------------------------
   0000                     609 _uip_fw_init:
                    0002    610 	ar2 = 0x02
                    0003    611 	ar3 = 0x03
                    0004    612 	ar4 = 0x04
                    0005    613 	ar5 = 0x05
                    0006    614 	ar6 = 0x06
                    0007    615 	ar7 = 0x07
                    0000    616 	ar0 = 0x00
                    0001    617 	ar1 = 0x01
                            618 ;	../../../core/net/uip-fw.c:189: defaultnetif = NULL;
   0000 90s00r03            619 	mov	dptr,#_defaultnetif
   0003 E4                  620 	clr	a
   0004 F0                  621 	movx	@dptr,a
   0005 A3                  622 	inc	dptr
   0006 F0                  623 	movx	@dptr,a
   0007 A3                  624 	inc	dptr
   0008 F0                  625 	movx	@dptr,a
                            626 ;	../../../core/net/uip-fw.c:190: while(netifs != NULL) {
   0009                     627 00101$:
   0009 90s00r00            628 	mov	dptr,#_netifs
   000C E0                  629 	movx	a,@dptr
   000D FA                  630 	mov	r2,a
   000E A3                  631 	inc	dptr
   000F E0                  632 	movx	a,@dptr
   0010 FB                  633 	mov	r3,a
   0011 A3                  634 	inc	dptr
   0012 E0                  635 	movx	a,@dptr
   0013 FC                  636 	mov	r4,a
   0014 BA 00 07            637 	cjne	r2,#0x00,00108$
   0017 BB 00 04            638 	cjne	r3,#0x00,00108$
   001A BC 00 01            639 	cjne	r4,#0x00,00108$
   001D 22                  640 	ret
   001E                     641 00108$:
                            642 ;	../../../core/net/uip-fw.c:191: t = netifs;
   001E 8A 05               643 	mov	ar5,r2
   0020 8B 06               644 	mov	ar6,r3
   0022 8C 07               645 	mov	ar7,r4
                            646 ;	../../../core/net/uip-fw.c:192: netifs = netifs->next;
   0024 8A 82               647 	mov	dpl,r2
   0026 8B 83               648 	mov	dph,r3
   0028 8C F0               649 	mov	b,r4
   002A 12s00r00            650 	lcall	__gptrget
   002D FA                  651 	mov	r2,a
   002E A3                  652 	inc	dptr
   002F 12s00r00            653 	lcall	__gptrget
   0032 FB                  654 	mov	r3,a
   0033 A3                  655 	inc	dptr
   0034 12s00r00            656 	lcall	__gptrget
   0037 FC                  657 	mov	r4,a
   0038 90s00r00            658 	mov	dptr,#_netifs
   003B EA                  659 	mov	a,r2
   003C F0                  660 	movx	@dptr,a
   003D A3                  661 	inc	dptr
   003E EB                  662 	mov	a,r3
   003F F0                  663 	movx	@dptr,a
   0040 A3                  664 	inc	dptr
   0041 EC                  665 	mov	a,r4
   0042 F0                  666 	movx	@dptr,a
                            667 ;	../../../core/net/uip-fw.c:193: t->next = NULL;
   0043 8D 82               668 	mov	dpl,r5
   0045 8E 83               669 	mov	dph,r6
   0047 8F F0               670 	mov	b,r7
   0049 E4                  671 	clr	a
   004A 12s00r00            672 	lcall	__gptrput
   004D A3                  673 	inc	dptr
   004E E4                  674 	clr	a
   004F 12s00r00            675 	lcall	__gptrput
   0052 A3                  676 	inc	dptr
   0053 E4                  677 	clr	a
   0054 12s00r00            678 	lcall	__gptrput
   0057 80 B0               679 	sjmp	00101$
                            680 ;------------------------------------------------------------
                            681 ;Allocation info for local variables in function 'ipaddr_maskcmp'
                            682 ;------------------------------------------------------------
                            683 ;netipaddr                 Allocated to stack - offset -5
                            684 ;netmask                   Allocated to stack - offset -8
                            685 ;ipaddr                    Allocated to stack - offset 1
                            686 ;sloc0                     Allocated to stack - offset 4
                            687 ;sloc1                     Allocated to stack - offset 6
                            688 ;sloc2                     Allocated to stack - offset 8
                            689 ;------------------------------------------------------------
                            690 ;	../../../core/net/uip-fw.c:210: ipaddr_maskcmp(uip_ipaddr_t *ipaddr,
                            691 ;	-----------------------------------------
                            692 ;	 function ipaddr_maskcmp
                            693 ;	-----------------------------------------
   0059                     694 _ipaddr_maskcmp:
   0059 C0*00               695 	push	_bp
   005B 85 81*00            696 	mov	_bp,sp
   005E C0 82               697 	push	dpl
   0060 C0 83               698 	push	dph
   0062 C0 F0               699 	push	b
   0064 E5 81               700 	mov	a,sp
   0066 24 0A               701 	add	a,#0x0a
   0068 F5 81               702 	mov	sp,a
                            703 ;	../../../core/net/uip-fw.c:214: return (ipaddr->u16[0] & netmask->u16[0]) == (netipaddr->u16[0] & netmask->u16[0]) &&
   006A E5*00               704 	mov	a,_bp
   006C 24 F8               705 	add	a,#0xf8
   006E F8                  706 	mov	r0,a
   006F 86 05               707 	mov	ar5,@r0
   0071 08                  708 	inc	r0
   0072 86 06               709 	mov	ar6,@r0
   0074 08                  710 	inc	r0
   0075 86 07               711 	mov	ar7,@r0
   0077 A8*00               712 	mov	r0,_bp
   0079 08                  713 	inc	r0
   007A 86 82               714 	mov	dpl,@r0
   007C 08                  715 	inc	r0
   007D 86 83               716 	mov	dph,@r0
   007F 08                  717 	inc	r0
   0080 86 F0               718 	mov	b,@r0
   0082 12s00r00            719 	lcall	__gptrget
   0085 FA                  720 	mov	r2,a
   0086 A3                  721 	inc	dptr
   0087 12s00r00            722 	lcall	__gptrget
   008A FB                  723 	mov	r3,a
   008B 8D 82               724 	mov	dpl,r5
   008D 8E 83               725 	mov	dph,r6
   008F 8F F0               726 	mov	b,r7
   0091 E5*00               727 	mov	a,_bp
   0093 24 06               728 	add	a,#0x06
   0095 F8                  729 	mov	r0,a
   0096 12s00r00            730 	lcall	__gptrget
   0099 F6                  731 	mov	@r0,a
   009A A3                  732 	inc	dptr
   009B 12s00r00            733 	lcall	__gptrget
   009E 08                  734 	inc	r0
   009F F6                  735 	mov	@r0,a
   00A0 E5*00               736 	mov	a,_bp
   00A2 24 06               737 	add	a,#0x06
   00A4 F8                  738 	mov	r0,a
   00A5 E5*00               739 	mov	a,_bp
   00A7 24 04               740 	add	a,#0x04
   00A9 F9                  741 	mov	r1,a
   00AA E6                  742 	mov	a,@r0
   00AB 5A                  743 	anl	a,r2
   00AC F7                  744 	mov	@r1,a
   00AD 08                  745 	inc	r0
   00AE E6                  746 	mov	a,@r0
   00AF 5B                  747 	anl	a,r3
   00B0 09                  748 	inc	r1
   00B1 F7                  749 	mov	@r1,a
   00B2 E5*00               750 	mov	a,_bp
   00B4 24 FB               751 	add	a,#0xfb
   00B6 F8                  752 	mov	r0,a
   00B7 E5*00               753 	mov	a,_bp
   00B9 24 08               754 	add	a,#0x08
   00BB F9                  755 	mov	r1,a
   00BC E6                  756 	mov	a,@r0
   00BD F7                  757 	mov	@r1,a
   00BE 08                  758 	inc	r0
   00BF 09                  759 	inc	r1
   00C0 E6                  760 	mov	a,@r0
   00C1 F7                  761 	mov	@r1,a
   00C2 08                  762 	inc	r0
   00C3 09                  763 	inc	r1
   00C4 E6                  764 	mov	a,@r0
   00C5 F7                  765 	mov	@r1,a
   00C6 E5*00               766 	mov	a,_bp
   00C8 24 08               767 	add	a,#0x08
   00CA F8                  768 	mov	r0,a
   00CB 86 82               769 	mov	dpl,@r0
   00CD 08                  770 	inc	r0
   00CE 86 83               771 	mov	dph,@r0
   00D0 08                  772 	inc	r0
   00D1 86 F0               773 	mov	b,@r0
   00D3 12s00r00            774 	lcall	__gptrget
   00D6 FC                  775 	mov	r4,a
   00D7 A3                  776 	inc	dptr
   00D8 12s00r00            777 	lcall	__gptrget
   00DB FA                  778 	mov	r2,a
   00DC E5*00               779 	mov	a,_bp
   00DE 24 06               780 	add	a,#0x06
   00E0 F8                  781 	mov	r0,a
   00E1 E6                  782 	mov	a,@r0
   00E2 52 04               783 	anl	ar4,a
   00E4 08                  784 	inc	r0
   00E5 E6                  785 	mov	a,@r0
   00E6 52 02               786 	anl	ar2,a
   00E8 E5*00               787 	mov	a,_bp
   00EA 24 04               788 	add	a,#0x04
   00EC F8                  789 	mov	r0,a
   00ED E6                  790 	mov	a,@r0
   00EE B5 04 07            791 	cjne	a,ar4,00107$
   00F1 08                  792 	inc	r0
   00F2 E6                  793 	mov	a,@r0
   00F3 B5 02 02            794 	cjne	a,ar2,00107$
   00F6 80 02               795 	sjmp	00108$
   00F8                     796 00107$:
   00F8 80 74               797 	sjmp	00103$
   00FA                     798 00108$:
                            799 ;	../../../core/net/uip-fw.c:215: (ipaddr->u16[1] & netmask->u16[1]) == (netipaddr->u16[1] & netmask->u16[1]);
   00FA A8*00               800 	mov	r0,_bp
   00FC 08                  801 	inc	r0
   00FD 74 02               802 	mov	a,#0x02
   00FF 26                  803 	add	a,@r0
   0100 FA                  804 	mov	r2,a
   0101 E4                  805 	clr	a
   0102 08                  806 	inc	r0
   0103 36                  807 	addc	a,@r0
   0104 FB                  808 	mov	r3,a
   0105 08                  809 	inc	r0
   0106 86 04               810 	mov	ar4,@r0
   0108 74 02               811 	mov	a,#0x02
   010A 2D                  812 	add	a,r5
   010B FD                  813 	mov	r5,a
   010C E4                  814 	clr	a
   010D 3E                  815 	addc	a,r6
   010E FE                  816 	mov	r6,a
   010F 8A 82               817 	mov	dpl,r2
   0111 8B 83               818 	mov	dph,r3
   0113 8C F0               819 	mov	b,r4
   0115 12s00r00            820 	lcall	__gptrget
   0118 FA                  821 	mov	r2,a
   0119 A3                  822 	inc	dptr
   011A 12s00r00            823 	lcall	__gptrget
   011D FB                  824 	mov	r3,a
   011E 8D 82               825 	mov	dpl,r5
   0120 8E 83               826 	mov	dph,r6
   0122 8F F0               827 	mov	b,r7
   0124 12s00r00            828 	lcall	__gptrget
   0127 FD                  829 	mov	r5,a
   0128 A3                  830 	inc	dptr
   0129 12s00r00            831 	lcall	__gptrget
   012C FE                  832 	mov	r6,a
   012D E5*00               833 	mov	a,_bp
   012F 24 06               834 	add	a,#0x06
   0131 F8                  835 	mov	r0,a
   0132 ED                  836 	mov	a,r5
   0133 5A                  837 	anl	a,r2
   0134 F6                  838 	mov	@r0,a
   0135 EE                  839 	mov	a,r6
   0136 5B                  840 	anl	a,r3
   0137 08                  841 	inc	r0
   0138 F6                  842 	mov	@r0,a
   0139 E5*00               843 	mov	a,_bp
   013B 24 08               844 	add	a,#0x08
   013D F8                  845 	mov	r0,a
   013E 74 02               846 	mov	a,#0x02
   0140 26                  847 	add	a,@r0
   0141 FC                  848 	mov	r4,a
   0142 E4                  849 	clr	a
   0143 08                  850 	inc	r0
   0144 36                  851 	addc	a,@r0
   0145 FF                  852 	mov	r7,a
   0146 08                  853 	inc	r0
   0147 86 02               854 	mov	ar2,@r0
   0149 8C 82               855 	mov	dpl,r4
   014B 8F 83               856 	mov	dph,r7
   014D 8A F0               857 	mov	b,r2
   014F 12s00r00            858 	lcall	__gptrget
   0152 FC                  859 	mov	r4,a
   0153 A3                  860 	inc	dptr
   0154 12s00r00            861 	lcall	__gptrget
   0157 FF                  862 	mov	r7,a
   0158 EC                  863 	mov	a,r4
   0159 52 05               864 	anl	ar5,a
   015B EF                  865 	mov	a,r7
   015C 52 06               866 	anl	ar6,a
   015E E5*00               867 	mov	a,_bp
   0160 24 06               868 	add	a,#0x06
   0162 F8                  869 	mov	r0,a
   0163 E6                  870 	mov	a,@r0
   0164 B5 05 07            871 	cjne	a,ar5,00109$
   0167 08                  872 	inc	r0
   0168 E6                  873 	mov	a,@r0
   0169 B5 06 02            874 	cjne	a,ar6,00109$
   016C 80 05               875 	sjmp	00104$
   016E                     876 00109$:
   016E                     877 00103$:
   016E 75 82 00            878 	mov	dpl,#0x00
   0171 80 03               879 	sjmp	00105$
   0173                     880 00104$:
   0173 75 82 01            881 	mov	dpl,#0x01
   0176                     882 00105$:
   0176 85*00 81            883 	mov	sp,_bp
   0179 D0*00               884 	pop	_bp
   017B 22                  885 	ret
                            886 ;------------------------------------------------------------
                            887 ;Allocation info for local variables in function 'time_exceeded'
                            888 ;------------------------------------------------------------
                            889 ;------------------------------------------------------------
                            890 ;	../../../core/net/uip-fw.c:227: time_exceeded(void)
                            891 ;	-----------------------------------------
                            892 ;	 function time_exceeded
                            893 ;	-----------------------------------------
   017C                     894 _time_exceeded:
                            895 ;	../../../core/net/uip-fw.c:231: if(ICMPBUF->proto == UIP_PROTO_ICMP &&
   017C 90s00r17            896 	mov	dptr,#(_uip_aligned_buf + 0x0017)
   017F E0                  897 	movx	a,@dptr
   0180 FA                  898 	mov	r2,a
   0181 BA 01 12            899 	cjne	r2,#0x01,00102$
                            900 ;	../../../core/net/uip-fw.c:232: ICMPBUF->type != ICMP_ECHO) {
   0184 90s00r22            901 	mov	dptr,#(_uip_aligned_buf + 0x0022)
   0187 E0                  902 	movx	a,@dptr
   0188 FA                  903 	mov	r2,a
   0189 BA 08 02            904 	cjne	r2,#0x08,00110$
   018C 80 08               905 	sjmp	00102$
   018E                     906 00110$:
                            907 ;	../../../core/net/uip-fw.c:233: uip_len = 0;
   018E 90s00r00            908 	mov	dptr,#_uip_len
   0191 E4                  909 	clr	a
   0192 F0                  910 	movx	@dptr,a
   0193 A3                  911 	inc	dptr
   0194 F0                  912 	movx	@dptr,a
                            913 ;	../../../core/net/uip-fw.c:234: return;
   0195 22                  914 	ret
   0196                     915 00102$:
                            916 ;	../../../core/net/uip-fw.c:237: memcpy(&(ICMPBUF->payload[0]), ICMPBUF, UIP_IPH_LEN + 8);
   0196 74 1C               917 	mov	a,#0x1C
   0198 C0 E0               918 	push	acc
   019A E4                  919 	clr	a
   019B C0 E0               920 	push	acc
   019D 74r0E               921 	mov	a,#(_uip_aligned_buf + 0x000e)
   019F C0 E0               922 	push	acc
   01A1 74s00               923 	mov	a,#((_uip_aligned_buf + 0x000e) >> 8)
   01A3 C0 E0               924 	push	acc
   01A5 E4                  925 	clr	a
   01A6 C0 E0               926 	push	acc
   01A8 90s00r2A            927 	mov	dptr,#(_uip_aligned_buf + 0x002a)
   01AB 75 F0 00            928 	mov	b,#0x00
   01AE 12s00r00            929 	lcall	_memcpy
   01B1 E5 81               930 	mov	a,sp
   01B3 24 FB               931 	add	a,#0xfb
   01B5 F5 81               932 	mov	sp,a
                            933 ;	../../../core/net/uip-fw.c:240: ICMPBUF->type = ICMP_TE;
   01B7 90s00r22            934 	mov	dptr,#(_uip_aligned_buf + 0x0022)
   01BA 74 0B               935 	mov	a,#0x0B
   01BC F0                  936 	movx	@dptr,a
                            937 ;	../../../core/net/uip-fw.c:241: ICMPBUF->icode = 0;
   01BD 90s00r23            938 	mov	dptr,#(_uip_aligned_buf + 0x0023)
                            939 ;	../../../core/net/uip-fw.c:244: ICMPBUF->icmpchksum = 0;
   01C0 E4                  940 	clr	a
   01C1 F0                  941 	movx	@dptr,a
   01C2 90s00r24            942 	mov	dptr,#(_uip_aligned_buf + 0x0024)
   01C5 F0                  943 	movx	@dptr,a
   01C6 A3                  944 	inc	dptr
   01C7 F0                  945 	movx	@dptr,a
                            946 ;	../../../core/net/uip-fw.c:245: ICMPBUF->icmpchksum = ~uip_chksum((u16_t *)&(ICMPBUF->type), 36);
   01C8 74 24               947 	mov	a,#0x24
   01CA C0 E0               948 	push	acc
   01CC E4                  949 	clr	a
   01CD C0 E0               950 	push	acc
   01CF 90s00r22            951 	mov	dptr,#(_uip_aligned_buf + 0x0022)
   01D2 75 F0 00            952 	mov	b,#0x00
   01D5 12s00r00            953 	lcall	_uip_chksum
   01D8 AA 82               954 	mov	r2,dpl
   01DA AB 83               955 	mov	r3,dph
   01DC 15 81               956 	dec	sp
   01DE 15 81               957 	dec	sp
   01E0 EA                  958 	mov	a,r2
   01E1 F4                  959 	cpl	a
   01E2 FA                  960 	mov	r2,a
   01E3 EB                  961 	mov	a,r3
   01E4 F4                  962 	cpl	a
   01E5 FB                  963 	mov	r3,a
   01E6 90s00r24            964 	mov	dptr,#(_uip_aligned_buf + 0x0024)
   01E9 EA                  965 	mov	a,r2
   01EA F0                  966 	movx	@dptr,a
   01EB A3                  967 	inc	dptr
   01EC EB                  968 	mov	a,r3
   01ED F0                  969 	movx	@dptr,a
                            970 ;	../../../core/net/uip-fw.c:249: uip_ipaddr_copy(&BUF->destipaddr, &BUF->srcipaddr);
   01EE 74 04               971 	mov	a,#0x04
   01F0 C0 E0               972 	push	acc
   01F2 E4                  973 	clr	a
   01F3 C0 E0               974 	push	acc
   01F5 74r1A               975 	mov	a,#(_uip_aligned_buf + 0x001a)
   01F7 C0 E0               976 	push	acc
   01F9 74s00               977 	mov	a,#((_uip_aligned_buf + 0x001a) >> 8)
   01FB C0 E0               978 	push	acc
   01FD E4                  979 	clr	a
   01FE C0 E0               980 	push	acc
   0200 90s00r1E            981 	mov	dptr,#(_uip_aligned_buf + 0x001e)
   0203 75 F0 00            982 	mov	b,#0x00
   0206 12s00r00            983 	lcall	_memcpy
   0209 E5 81               984 	mov	a,sp
   020B 24 FB               985 	add	a,#0xfb
   020D F5 81               986 	mov	sp,a
                            987 ;	../../../core/net/uip-fw.c:252: uip_ipaddr_copy(&BUF->srcipaddr, &uip_hostaddr);
   020F 74 04               988 	mov	a,#0x04
   0211 C0 E0               989 	push	acc
   0213 E4                  990 	clr	a
   0214 C0 E0               991 	push	acc
   0216 74r00               992 	mov	a,#_uip_hostaddr
   0218 C0 E0               993 	push	acc
   021A 74s00               994 	mov	a,#(_uip_hostaddr >> 8)
   021C C0 E0               995 	push	acc
   021E E4                  996 	clr	a
   021F C0 E0               997 	push	acc
   0221 90s00r1A            998 	mov	dptr,#(_uip_aligned_buf + 0x001a)
   0224 75 F0 00            999 	mov	b,#0x00
   0227 12s00r00           1000 	lcall	_memcpy
   022A E5 81              1001 	mov	a,sp
   022C 24 FB              1002 	add	a,#0xfb
   022E F5 81              1003 	mov	sp,a
                           1004 ;	../../../core/net/uip-fw.c:256: uip_len = 56;
   0230 90s00r00           1005 	mov	dptr,#_uip_len
   0233 74 38              1006 	mov	a,#0x38
   0235 F0                 1007 	movx	@dptr,a
   0236 A3                 1008 	inc	dptr
                           1009 ;	../../../core/net/uip-fw.c:257: ICMPBUF->len[0] = 0;
   0237 E4                 1010 	clr	a
   0238 F0                 1011 	movx	@dptr,a
   0239 90s00r10           1012 	mov	dptr,#(_uip_aligned_buf + 0x0010)
   023C F0                 1013 	movx	@dptr,a
                           1014 ;	../../../core/net/uip-fw.c:258: ICMPBUF->len[1] = (u8_t)uip_len;
   023D 90s00r11           1015 	mov	dptr,#(_uip_aligned_buf + 0x0011)
   0240 74 38              1016 	mov	a,#0x38
   0242 F0                 1017 	movx	@dptr,a
                           1018 ;	../../../core/net/uip-fw.c:261: ICMPBUF->vhl = 0x45;
   0243 90s00r0E           1019 	mov	dptr,#(_uip_aligned_buf + 0x000e)
   0246 74 45              1020 	mov	a,#0x45
   0248 F0                 1021 	movx	@dptr,a
                           1022 ;	../../../core/net/uip-fw.c:262: ICMPBUF->tos = 0;
   0249 90s00r0F           1023 	mov	dptr,#(_uip_aligned_buf + 0x000f)
                           1024 ;	../../../core/net/uip-fw.c:263: ICMPBUF->ipoffset[0] = ICMPBUF->ipoffset[1] = 0;
   024C E4                 1025 	clr	a
   024D F0                 1026 	movx	@dptr,a
   024E 90s00r15           1027 	mov	dptr,#(_uip_aligned_buf + 0x0015)
   0251 F0                 1028 	movx	@dptr,a
   0252 90s00r14           1029 	mov	dptr,#(_uip_aligned_buf + 0x0014)
   0255 F0                 1030 	movx	@dptr,a
                           1031 ;	../../../core/net/uip-fw.c:264: ICMPBUF->ttl  = UIP_TTL;
   0256 90s00r16           1032 	mov	dptr,#(_uip_aligned_buf + 0x0016)
   0259 74 40              1033 	mov	a,#0x40
   025B F0                 1034 	movx	@dptr,a
                           1035 ;	../../../core/net/uip-fw.c:265: ICMPBUF->proto = UIP_PROTO_ICMP;
   025C 90s00r17           1036 	mov	dptr,#(_uip_aligned_buf + 0x0017)
   025F 74 01              1037 	mov	a,#0x01
   0261 F0                 1038 	movx	@dptr,a
                           1039 ;	../../../core/net/uip-fw.c:268: ICMPBUF->ipchksum = 0;
   0262 90s00r18           1040 	mov	dptr,#(_uip_aligned_buf + 0x0018)
   0265 E4                 1041 	clr	a
   0266 F0                 1042 	movx	@dptr,a
   0267 A3                 1043 	inc	dptr
   0268 F0                 1044 	movx	@dptr,a
                           1045 ;	../../../core/net/uip-fw.c:269: ICMPBUF->ipchksum = ~(uip_ipchksum());
   0269 12s00r00           1046 	lcall	_uip_ipchksum
   026C AA 82              1047 	mov	r2,dpl
   026E AB 83              1048 	mov	r3,dph
   0270 EA                 1049 	mov	a,r2
   0271 F4                 1050 	cpl	a
   0272 FA                 1051 	mov	r2,a
   0273 EB                 1052 	mov	a,r3
   0274 F4                 1053 	cpl	a
   0275 FB                 1054 	mov	r3,a
   0276 90s00r18           1055 	mov	dptr,#(_uip_aligned_buf + 0x0018)
   0279 EA                 1056 	mov	a,r2
   027A F0                 1057 	movx	@dptr,a
   027B A3                 1058 	inc	dptr
   027C EB                 1059 	mov	a,r3
   027D F0                 1060 	movx	@dptr,a
   027E 22                 1061 	ret
                           1062 ;------------------------------------------------------------
                           1063 ;Allocation info for local variables in function 'fwcache_register'
                           1064 ;------------------------------------------------------------
                           1065 ;fw                        Allocated to stack - offset 1
                           1066 ;i                         Allocated to registers r7 r4 
                           1067 ;oldest                    Allocated to registers r2 r3 
                           1068 ;sloc0                     Allocated to stack - offset 4
                           1069 ;sloc1                     Allocated to stack - offset 6
                           1070 ;------------------------------------------------------------
                           1071 ;	../../../core/net/uip-fw.c:281: fwcache_register(void)
                           1072 ;	-----------------------------------------
                           1073 ;	 function fwcache_register
                           1074 ;	-----------------------------------------
   027F                    1075 _fwcache_register:
   027F C0*00              1076 	push	_bp
   0281 E5 81              1077 	mov	a,sp
   0283 F5*00              1078 	mov	_bp,a
   0285 24 07              1079 	add	a,#0x07
   0287 F5 81              1080 	mov	sp,a
                           1081 ;	../../../core/net/uip-fw.c:286: oldest = FW_TIME;
   0289 7A 14              1082 	mov	r2,#0x14
   028B 7B 00              1083 	mov	r3,#0x00
                           1084 ;	../../../core/net/uip-fw.c:287: fw = NULL;
   028D A8*00              1085 	mov	r0,_bp
   028F 08                 1086 	inc	r0
   0290 E4                 1087 	clr	a
   0291 F6                 1088 	mov	@r0,a
   0292 08                 1089 	inc	r0
   0293 F6                 1090 	mov	@r0,a
   0294 08                 1091 	inc	r0
                           1092 ;	../../../core/net/uip-fw.c:290: for(i = 0; i < FWCACHE_SIZE; ++i) {
   0295 E4                 1093 	clr	a
   0296 F6                 1094 	mov	@r0,a
   0297 FF                 1095 	mov	r7,a
   0298 FC                 1096 	mov	r4,a
   0299 E5*00              1097 	mov	a,_bp
   029B 24 06              1098 	add	a,#0x06
   029D F8                 1099 	mov	r0,a
   029E E4                 1100 	clr	a
   029F F6                 1101 	mov	@r0,a
   02A0 08                 1102 	inc	r0
   02A1 F6                 1103 	mov	@r0,a
   02A2                    1104 00106$:
   02A2 C3                 1105 	clr	c
   02A3 EF                 1106 	mov	a,r7
   02A4 94 02              1107 	subb	a,#0x02
   02A6 EC                 1108 	mov	a,r4
   02A7 64 80              1109 	xrl	a,#0x80
   02A9 94 80              1110 	subb	a,#0x80
   02AB 40 03              1111 	jc	00116$
   02AD 02s03r3C           1112 	ljmp	00109$
   02B0                    1113 00116$:
                           1114 ;	../../../core/net/uip-fw.c:291: if(fwcache[i].timer == 0) {
   02B0 E5*00              1115 	mov	a,_bp
   02B2 24 06              1116 	add	a,#0x06
   02B4 F8                 1117 	mov	r0,a
   02B5 E6                 1118 	mov	a,@r0
   02B6 24r00              1119 	add	a,#_fwcache
   02B8 F5 82              1120 	mov	dpl,a
   02BA 08                 1121 	inc	r0
   02BB E6                 1122 	mov	a,@r0
   02BC 34s00              1123 	addc	a,#(_fwcache >> 8)
   02BE F5 83              1124 	mov	dph,a
   02C0 E5*00              1125 	mov	a,_bp
   02C2 24 04              1126 	add	a,#0x04
   02C4 F8                 1127 	mov	r0,a
   02C5 E0                 1128 	movx	a,@dptr
   02C6 F6                 1129 	mov	@r0,a
   02C7 A3                 1130 	inc	dptr
   02C8 E0                 1131 	movx	a,@dptr
   02C9 08                 1132 	inc	r0
   02CA F6                 1133 	mov	@r0,a
   02CB E5*00              1134 	mov	a,_bp
   02CD 24 04              1135 	add	a,#0x04
   02CF F8                 1136 	mov	r0,a
   02D0 E6                 1137 	mov	a,@r0
   02D1 08                 1138 	inc	r0
   02D2 46                 1139 	orl	a,@r0
   02D3 70 1B              1140 	jnz	00104$
                           1141 ;	../../../core/net/uip-fw.c:292: fw = &fwcache[i];
   02D5 E5*00              1142 	mov	a,_bp
   02D7 24 06              1143 	add	a,#0x06
   02D9 F8                 1144 	mov	r0,a
   02DA E6                 1145 	mov	a,@r0
   02DB 24r00              1146 	add	a,#_fwcache
   02DD FD                 1147 	mov	r5,a
   02DE 08                 1148 	inc	r0
   02DF E6                 1149 	mov	a,@r0
   02E0 34s00              1150 	addc	a,#(_fwcache >> 8)
   02E2 FE                 1151 	mov	r6,a
   02E3 A8*00              1152 	mov	r0,_bp
   02E5 08                 1153 	inc	r0
   02E6 A6 05              1154 	mov	@r0,ar5
   02E8 08                 1155 	inc	r0
   02E9 A6 06              1156 	mov	@r0,ar6
   02EB 08                 1157 	inc	r0
   02EC 76 00              1158 	mov	@r0,#0x00
                           1159 ;	../../../core/net/uip-fw.c:293: break;
   02EE 80 4C              1160 	sjmp	00109$
   02F0                    1161 00104$:
                           1162 ;	../../../core/net/uip-fw.c:294: } else if(fwcache[i].timer <= oldest) {
   02F0 8A 05              1163 	mov	ar5,r2
   02F2 8B 06              1164 	mov	ar6,r3
   02F4 E5*00              1165 	mov	a,_bp
   02F6 24 04              1166 	add	a,#0x04
   02F8 F8                 1167 	mov	r0,a
   02F9 C3                 1168 	clr	c
   02FA ED                 1169 	mov	a,r5
   02FB 96                 1170 	subb	a,@r0
   02FC EE                 1171 	mov	a,r6
   02FD 08                 1172 	inc	r0
   02FE 96                 1173 	subb	a,@r0
   02FF 40 26              1174 	jc	00108$
                           1175 ;	../../../core/net/uip-fw.c:295: fw = &fwcache[i];
   0301 E5*00              1176 	mov	a,_bp
   0303 24 06              1177 	add	a,#0x06
   0305 F8                 1178 	mov	r0,a
   0306 E6                 1179 	mov	a,@r0
   0307 24r00              1180 	add	a,#_fwcache
   0309 FD                 1181 	mov	r5,a
   030A 08                 1182 	inc	r0
   030B E6                 1183 	mov	a,@r0
   030C 34s00              1184 	addc	a,#(_fwcache >> 8)
   030E FE                 1185 	mov	r6,a
   030F A8*00              1186 	mov	r0,_bp
   0311 08                 1187 	inc	r0
   0312 A6 05              1188 	mov	@r0,ar5
   0314 08                 1189 	inc	r0
   0315 A6 06              1190 	mov	@r0,ar6
   0317 08                 1191 	inc	r0
   0318 76 00              1192 	mov	@r0,#0x00
                           1193 ;	../../../core/net/uip-fw.c:296: oldest = fwcache[i].timer;
   031A 8D 82              1194 	mov	dpl,r5
   031C 8E 83              1195 	mov	dph,r6
   031E E0                 1196 	movx	a,@dptr
   031F FD                 1197 	mov	r5,a
   0320 A3                 1198 	inc	dptr
   0321 E0                 1199 	movx	a,@dptr
   0322 FE                 1200 	mov	r6,a
   0323 8D 02              1201 	mov	ar2,r5
   0325 8E 03              1202 	mov	ar3,r6
   0327                    1203 00108$:
                           1204 ;	../../../core/net/uip-fw.c:290: for(i = 0; i < FWCACHE_SIZE; ++i) {
   0327 E5*00              1205 	mov	a,_bp
   0329 24 06              1206 	add	a,#0x06
   032B F8                 1207 	mov	r0,a
   032C 74 0E              1208 	mov	a,#0x0E
   032E 26                 1209 	add	a,@r0
   032F F6                 1210 	mov	@r0,a
   0330 E4                 1211 	clr	a
   0331 08                 1212 	inc	r0
   0332 36                 1213 	addc	a,@r0
   0333 F6                 1214 	mov	@r0,a
   0334 0F                 1215 	inc	r7
   0335 BF 00 01           1216 	cjne	r7,#0x00,00119$
   0338 0C                 1217 	inc	r4
   0339                    1218 00119$:
   0339 02s02rA2           1219 	ljmp	00106$
   033C                    1220 00109$:
                           1221 ;	../../../core/net/uip-fw.c:300: fw->timer = FW_TIME;
   033C A8*00              1222 	mov	r0,_bp
   033E 08                 1223 	inc	r0
   033F 86 82              1224 	mov	dpl,@r0
   0341 08                 1225 	inc	r0
   0342 86 83              1226 	mov	dph,@r0
   0344 08                 1227 	inc	r0
   0345 86 F0              1228 	mov	b,@r0
   0347 74 14              1229 	mov	a,#0x14
   0349 12s00r00           1230 	lcall	__gptrput
   034C A3                 1231 	inc	dptr
   034D E4                 1232 	clr	a
   034E 12s00r00           1233 	lcall	__gptrput
                           1234 ;	../../../core/net/uip-fw.c:301: fw->ipid = BUF->ipid;
   0351 A8*00              1235 	mov	r0,_bp
   0353 08                 1236 	inc	r0
   0354 74 0A              1237 	mov	a,#0x0A
   0356 26                 1238 	add	a,@r0
   0357 FA                 1239 	mov	r2,a
   0358 E4                 1240 	clr	a
   0359 08                 1241 	inc	r0
   035A 36                 1242 	addc	a,@r0
   035B FB                 1243 	mov	r3,a
   035C 08                 1244 	inc	r0
   035D 86 04              1245 	mov	ar4,@r0
   035F 90s00r12           1246 	mov	dptr,#(_uip_aligned_buf + 0x0012)
   0362 E0                 1247 	movx	a,@dptr
   0363 FD                 1248 	mov	r5,a
   0364 A3                 1249 	inc	dptr
   0365 E0                 1250 	movx	a,@dptr
   0366 FE                 1251 	mov	r6,a
   0367 8A 82              1252 	mov	dpl,r2
   0369 8B 83              1253 	mov	dph,r3
   036B 8C F0              1254 	mov	b,r4
   036D ED                 1255 	mov	a,r5
   036E 12s00r00           1256 	lcall	__gptrput
   0371 A3                 1257 	inc	dptr
   0372 EE                 1258 	mov	a,r6
   0373 12s00r00           1259 	lcall	__gptrput
                           1260 ;	../../../core/net/uip-fw.c:302: uip_ipaddr_copy(&fw->srcipaddr, &BUF->srcipaddr);
   0376 A8*00              1261 	mov	r0,_bp
   0378 08                 1262 	inc	r0
   0379 74 02              1263 	mov	a,#0x02
   037B 26                 1264 	add	a,@r0
   037C FA                 1265 	mov	r2,a
   037D E4                 1266 	clr	a
   037E 08                 1267 	inc	r0
   037F 36                 1268 	addc	a,@r0
   0380 FB                 1269 	mov	r3,a
   0381 08                 1270 	inc	r0
   0382 86 04              1271 	mov	ar4,@r0
   0384 74 04              1272 	mov	a,#0x04
   0386 C0 E0              1273 	push	acc
   0388 E4                 1274 	clr	a
   0389 C0 E0              1275 	push	acc
   038B 74r1A              1276 	mov	a,#(_uip_aligned_buf + 0x001a)
   038D C0 E0              1277 	push	acc
   038F 74s00              1278 	mov	a,#((_uip_aligned_buf + 0x001a) >> 8)
   0391 C0 E0              1279 	push	acc
   0393 E4                 1280 	clr	a
   0394 C0 E0              1281 	push	acc
   0396 8A 82              1282 	mov	dpl,r2
   0398 8B 83              1283 	mov	dph,r3
   039A 8C F0              1284 	mov	b,r4
   039C 12s00r00           1285 	lcall	_memcpy
   039F E5 81              1286 	mov	a,sp
   03A1 24 FB              1287 	add	a,#0xfb
   03A3 F5 81              1288 	mov	sp,a
                           1289 ;	../../../core/net/uip-fw.c:303: uip_ipaddr_copy(&fw->destipaddr, &BUF->destipaddr);
   03A5 A8*00              1290 	mov	r0,_bp
   03A7 08                 1291 	inc	r0
   03A8 74 06              1292 	mov	a,#0x06
   03AA 26                 1293 	add	a,@r0
   03AB FA                 1294 	mov	r2,a
   03AC E4                 1295 	clr	a
   03AD 08                 1296 	inc	r0
   03AE 36                 1297 	addc	a,@r0
   03AF FB                 1298 	mov	r3,a
   03B0 08                 1299 	inc	r0
   03B1 86 04              1300 	mov	ar4,@r0
   03B3 74 04              1301 	mov	a,#0x04
   03B5 C0 E0              1302 	push	acc
   03B7 E4                 1303 	clr	a
   03B8 C0 E0              1304 	push	acc
   03BA 74r1E              1305 	mov	a,#(_uip_aligned_buf + 0x001e)
   03BC C0 E0              1306 	push	acc
   03BE 74s00              1307 	mov	a,#((_uip_aligned_buf + 0x001e) >> 8)
   03C0 C0 E0              1308 	push	acc
   03C2 E4                 1309 	clr	a
   03C3 C0 E0              1310 	push	acc
   03C5 8A 82              1311 	mov	dpl,r2
   03C7 8B 83              1312 	mov	dph,r3
   03C9 8C F0              1313 	mov	b,r4
   03CB 12s00r00           1314 	lcall	_memcpy
   03CE E5 81              1315 	mov	a,sp
   03D0 24 FB              1316 	add	a,#0xfb
   03D2 F5 81              1317 	mov	sp,a
                           1318 ;	../../../core/net/uip-fw.c:304: fw->proto = BUF->proto;
   03D4 A8*00              1319 	mov	r0,_bp
   03D6 08                 1320 	inc	r0
   03D7 74 0C              1321 	mov	a,#0x0C
   03D9 26                 1322 	add	a,@r0
   03DA FA                 1323 	mov	r2,a
   03DB E4                 1324 	clr	a
   03DC 08                 1325 	inc	r0
   03DD 36                 1326 	addc	a,@r0
   03DE FB                 1327 	mov	r3,a
   03DF 08                 1328 	inc	r0
   03E0 86 04              1329 	mov	ar4,@r0
   03E2 90s00r17           1330 	mov	dptr,#(_uip_aligned_buf + 0x0017)
   03E5 E0                 1331 	movx	a,@dptr
   03E6 8A 82              1332 	mov	dpl,r2
   03E8 8B 83              1333 	mov	dph,r3
   03EA 8C F0              1334 	mov	b,r4
   03EC 12s00r00           1335 	lcall	__gptrput
   03EF 85*00 81           1336 	mov	sp,_bp
   03F2 D0*00              1337 	pop	_bp
   03F4 22                 1338 	ret
                           1339 ;------------------------------------------------------------
                           1340 ;Allocation info for local variables in function 'find_netif'
                           1341 ;------------------------------------------------------------
                           1342 ;netif                     Allocated to stack - offset 1
                           1343 ;------------------------------------------------------------
                           1344 ;	../../../core/net/uip-fw.c:321: find_netif(void)
                           1345 ;	-----------------------------------------
                           1346 ;	 function find_netif
                           1347 ;	-----------------------------------------
   03F5                    1348 _find_netif:
   03F5 C0*00              1349 	push	_bp
   03F7 85 81*00           1350 	mov	_bp,sp
   03FA 05 81              1351 	inc	sp
   03FC 05 81              1352 	inc	sp
   03FE 05 81              1353 	inc	sp
                           1354 ;	../../../core/net/uip-fw.c:326: for(netif = netifs; netif != NULL; netif = netif->next) {
   0400 90s00r00           1355 	mov	dptr,#_netifs
   0403 E0                 1356 	movx	a,@dptr
   0404 FA                 1357 	mov	r2,a
   0405 A3                 1358 	inc	dptr
   0406 E0                 1359 	movx	a,@dptr
   0407 FB                 1360 	mov	r3,a
   0408 A3                 1361 	inc	dptr
   0409 E0                 1362 	movx	a,@dptr
   040A FC                 1363 	mov	r4,a
   040B A8*00              1364 	mov	r0,_bp
   040D 08                 1365 	inc	r0
   040E A6 02              1366 	mov	@r0,ar2
   0410 08                 1367 	inc	r0
   0411 A6 03              1368 	mov	@r0,ar3
   0413 08                 1369 	inc	r0
   0414 A6 04              1370 	mov	@r0,ar4
   0416                    1371 00103$:
   0416 A8*00              1372 	mov	r0,_bp
   0418 08                 1373 	inc	r0
   0419 B6 00 0A           1374 	cjne	@r0,#0x00,00112$
   041C 08                 1375 	inc	r0
   041D B6 00 06           1376 	cjne	@r0,#0x00,00112$
   0420 08                 1377 	inc	r0
   0421 B6 00 02           1378 	cjne	@r0,#0x00,00112$
   0424 80 68              1379 	sjmp	00106$
   0426                    1380 00112$:
                           1381 ;	../../../core/net/uip-fw.c:328: &netif->netmask)) {
   0426 A8*00              1382 	mov	r0,_bp
   0428 08                 1383 	inc	r0
   0429 74 07              1384 	mov	a,#0x07
   042B 26                 1385 	add	a,@r0
   042C FD                 1386 	mov	r5,a
   042D E4                 1387 	clr	a
   042E 08                 1388 	inc	r0
   042F 36                 1389 	addc	a,@r0
   0430 FE                 1390 	mov	r6,a
   0431 08                 1391 	inc	r0
   0432 86 07              1392 	mov	ar7,@r0
                           1393 ;	../../../core/net/uip-fw.c:327: if(ipaddr_maskcmp(&BUF->destipaddr, &netif->ipaddr,
   0434 A8*00              1394 	mov	r0,_bp
   0436 08                 1395 	inc	r0
   0437 74 03              1396 	mov	a,#0x03
   0439 26                 1397 	add	a,@r0
   043A FA                 1398 	mov	r2,a
   043B E4                 1399 	clr	a
   043C 08                 1400 	inc	r0
   043D 36                 1401 	addc	a,@r0
   043E FB                 1402 	mov	r3,a
   043F 08                 1403 	inc	r0
   0440 86 04              1404 	mov	ar4,@r0
   0442 C0 05              1405 	push	ar5
   0444 C0 06              1406 	push	ar6
   0446 C0 07              1407 	push	ar7
   0448 C0 02              1408 	push	ar2
   044A C0 03              1409 	push	ar3
   044C C0 04              1410 	push	ar4
   044E 90s00r1E           1411 	mov	dptr,#(_uip_aligned_buf + 0x001e)
   0451 75 F0 00           1412 	mov	b,#0x00
   0454 12s00r59           1413 	lcall	_ipaddr_maskcmp
   0457 AA 82              1414 	mov	r2,dpl
   0459 E5 81              1415 	mov	a,sp
   045B 24 FA              1416 	add	a,#0xfa
   045D F5 81              1417 	mov	sp,a
   045F EA                 1418 	mov	a,r2
   0460 60 0D              1419 	jz	00105$
                           1420 ;	../../../core/net/uip-fw.c:330: return netif;
   0462 A8*00              1421 	mov	r0,_bp
   0464 08                 1422 	inc	r0
   0465 86 82              1423 	mov	dpl,@r0
   0467 08                 1424 	inc	r0
   0468 86 83              1425 	mov	dph,@r0
   046A 08                 1426 	inc	r0
   046B 86 F0              1427 	mov	b,@r0
   046D 80 30              1428 	sjmp	00107$
   046F                    1429 00105$:
                           1430 ;	../../../core/net/uip-fw.c:326: for(netif = netifs; netif != NULL; netif = netif->next) {
   046F A8*00              1431 	mov	r0,_bp
   0471 08                 1432 	inc	r0
   0472 86 82              1433 	mov	dpl,@r0
   0474 08                 1434 	inc	r0
   0475 86 83              1435 	mov	dph,@r0
   0477 08                 1436 	inc	r0
   0478 86 F0              1437 	mov	b,@r0
   047A 12s00r00           1438 	lcall	__gptrget
   047D 18                 1439 	dec	r0
   047E 18                 1440 	dec	r0
   047F F6                 1441 	mov	@r0,a
   0480 A3                 1442 	inc	dptr
   0481 12s00r00           1443 	lcall	__gptrget
   0484 08                 1444 	inc	r0
   0485 F6                 1445 	mov	@r0,a
   0486 A3                 1446 	inc	dptr
   0487 12s00r00           1447 	lcall	__gptrget
   048A 08                 1448 	inc	r0
   048B F6                 1449 	mov	@r0,a
   048C 80 88              1450 	sjmp	00103$
   048E                    1451 00106$:
                           1452 ;	../../../core/net/uip-fw.c:335: return defaultnetif;
   048E 90s00r03           1453 	mov	dptr,#_defaultnetif
   0491 E0                 1454 	movx	a,@dptr
   0492 FA                 1455 	mov	r2,a
   0493 A3                 1456 	inc	dptr
   0494 E0                 1457 	movx	a,@dptr
   0495 FB                 1458 	mov	r3,a
   0496 A3                 1459 	inc	dptr
   0497 E0                 1460 	movx	a,@dptr
   0498 FC                 1461 	mov	r4,a
   0499 8A 82              1462 	mov	dpl,r2
   049B 8B 83              1463 	mov	dph,r3
   049D 8C F0              1464 	mov	b,r4
   049F                    1465 00107$:
   049F 85*00 81           1466 	mov	sp,_bp
   04A2 D0*00              1467 	pop	_bp
   04A4 22                 1468 	ret
                           1469 ;------------------------------------------------------------
                           1470 ;Allocation info for local variables in function 'uip_fw_output'
                           1471 ;------------------------------------------------------------
                           1472 ;netif                     Allocated to registers r2 r3 r4 
                           1473 ;------------------------------------------------------------
                           1474 ;	../../../core/net/uip-fw.c:355: uip_fw_output(void)
                           1475 ;	-----------------------------------------
                           1476 ;	 function uip_fw_output
                           1477 ;	-----------------------------------------
   04A5                    1478 _uip_fw_output:
                           1479 ;	../../../core/net/uip-fw.c:362: if(uip_len == 0) {
   04A5 90s00r00           1480 	mov	dptr,#_uip_len
   04A8 E0                 1481 	movx	a,@dptr
   04A9 FA                 1482 	mov	r2,a
   04AA A3                 1483 	inc	dptr
   04AB E0                 1484 	movx	a,@dptr
   04AC FB                 1485 	mov	r3,a
   04AD 4A                 1486 	orl	a,r2
   04AE 70 04              1487 	jnz	00102$
                           1488 ;	../../../core/net/uip-fw.c:363: return UIP_FW_ZEROLEN;
   04B0 75 82 02           1489 	mov	dpl,#0x02
   04B3 22                 1490 	ret
   04B4                    1491 00102$:
                           1492 ;	../../../core/net/uip-fw.c:366: fwcache_register();
   04B4 12s02r7F           1493 	lcall	_fwcache_register
                           1494 ;	../../../core/net/uip-fw.c:381: netif = find_netif();
   04B7 12s03rF5           1495 	lcall	_find_netif
   04BA AA 82              1496 	mov	r2,dpl
   04BC AB 83              1497 	mov	r3,dph
   04BE AC F0              1498 	mov	r4,b
                           1499 ;	../../../core/net/uip-fw.c:386: if(netif == NULL) {
   04C0 BA 00 0A           1500 	cjne	r2,#0x00,00104$
   04C3 BB 00 07           1501 	cjne	r3,#0x00,00104$
   04C6 BC 00 04           1502 	cjne	r4,#0x00,00104$
                           1503 ;	../../../core/net/uip-fw.c:387: return UIP_FW_NOROUTE;
   04C9 75 82 04           1504 	mov	dpl,#0x04
   04CC 22                 1505 	ret
   04CD                    1506 00104$:
                           1507 ;	../../../core/net/uip-fw.c:391: return netif->output();
   04CD 74 0B              1508 	mov	a,#0x0B
   04CF 2A                 1509 	add	a,r2
   04D0 FA                 1510 	mov	r2,a
   04D1 E4                 1511 	clr	a
   04D2 3B                 1512 	addc	a,r3
   04D3 FB                 1513 	mov	r3,a
   04D4 8A 82              1514 	mov	dpl,r2
   04D6 8B 83              1515 	mov	dph,r3
   04D8 8C F0              1516 	mov	b,r4
   04DA 12s00r00           1517 	lcall	__gptrget
   04DD FA                 1518 	mov	r2,a
   04DE A3                 1519 	inc	dptr
   04DF 12s00r00           1520 	lcall	__gptrget
   04E2 FB                 1521 	mov	r3,a
   04E3 C0 03              1522 	push	ar3
   04E5 8A 82              1523 	mov	dpl,r2
   04E7 8B 83              1524 	mov	dph,r3
   04E9 12s00r00           1525 	lcall	__sdcc_call_dptr
   04EC AA 82              1526 	mov	r2,dpl
   04EE D0 03              1527 	pop	ar3
   04F0 8A 82              1528 	mov	dpl,r2
   04F2 22                 1529 	ret
                           1530 ;------------------------------------------------------------
                           1531 ;Allocation info for local variables in function 'uip_fw_forward'
                           1532 ;------------------------------------------------------------
                           1533 ;fw                        Allocated to registers 
                           1534 ;sloc0                     Allocated to stack - offset 1
                           1535 ;------------------------------------------------------------
                           1536 ;	../../../core/net/uip-fw.c:404: uip_fw_forward(void)
                           1537 ;	-----------------------------------------
                           1538 ;	 function uip_fw_forward
                           1539 ;	-----------------------------------------
   04F3                    1540 _uip_fw_forward:
   04F3 C0*00              1541 	push	_bp
   04F5 85 81*00           1542 	mov	_bp,sp
   04F8 05 81              1543 	inc	sp
   04FA 05 81              1544 	inc	sp
                           1545 ;	../../../core/net/uip-fw.c:410: if(uip_ipaddr_cmp(&BUF->destipaddr, &uip_hostaddr)) {
   04FC 90s00r1E           1546 	mov	dptr,#(_uip_aligned_buf + 0x001e)
   04FF A8*00              1547 	mov	r0,_bp
   0501 08                 1548 	inc	r0
   0502 E0                 1549 	movx	a,@dptr
   0503 F6                 1550 	mov	@r0,a
   0504 A3                 1551 	inc	dptr
   0505 E0                 1552 	movx	a,@dptr
   0506 08                 1553 	inc	r0
   0507 F6                 1554 	mov	@r0,a
   0508 90s00r00           1555 	mov	dptr,#_uip_hostaddr
   050B E0                 1556 	movx	a,@dptr
   050C FC                 1557 	mov	r4,a
   050D A3                 1558 	inc	dptr
   050E E0                 1559 	movx	a,@dptr
   050F FD                 1560 	mov	r5,a
   0510 A8*00              1561 	mov	r0,_bp
   0512 08                 1562 	inc	r0
   0513 E6                 1563 	mov	a,@r0
   0514 B5 04 07           1564 	cjne	a,ar4,00144$
   0517 08                 1565 	inc	r0
   0518 E6                 1566 	mov	a,@r0
   0519 B5 05 02           1567 	cjne	a,ar5,00144$
   051C 80 02              1568 	sjmp	00145$
   051E                    1569 00144$:
   051E 80 1E              1570 	sjmp	00102$
   0520                    1571 00145$:
   0520 90s00r20           1572 	mov	dptr,#(_uip_aligned_buf + 0x0020)
   0523 E0                 1573 	movx	a,@dptr
   0524 FC                 1574 	mov	r4,a
   0525 A3                 1575 	inc	dptr
   0526 E0                 1576 	movx	a,@dptr
   0527 FD                 1577 	mov	r5,a
   0528 90s00r02           1578 	mov	dptr,#(_uip_hostaddr + 0x0002)
   052B E0                 1579 	movx	a,@dptr
   052C FE                 1580 	mov	r6,a
   052D A3                 1581 	inc	dptr
   052E E0                 1582 	movx	a,@dptr
   052F FF                 1583 	mov	r7,a
   0530 EC                 1584 	mov	a,r4
   0531 B5 06 0A           1585 	cjne	a,ar6,00102$
   0534 ED                 1586 	mov	a,r5
   0535 B5 07 06           1587 	cjne	a,ar7,00102$
                           1588 ;	../../../core/net/uip-fw.c:411: return UIP_FW_LOCAL;
   0538 75 82 00           1589 	mov	dpl,#0x00
   053B 02s07r65           1590 	ljmp	00126$
   053E                    1591 00102$:
                           1592 ;	../../../core/net/uip-fw.c:434: for(fw = fwcache; fw < &fwcache[FWCACHE_SIZE]; ++fw) {
   053E 7Cr00              1593 	mov	r4,#_fwcache
   0540 7Ds00              1594 	mov	r5,#(_fwcache >> 8)
   0542 7E 00              1595 	mov	r6,#0x00
   0544                    1596 00122$:
   0544 C3                 1597 	clr	c
   0545 EC                 1598 	mov	a,r4
   0546 94r1C              1599 	subb	a,#(_fwcache + 0x001c)
   0548 ED                 1600 	mov	a,r5
   0549 94s00              1601 	subb	a,#((_fwcache + 0x001c) >> 8)
   054B EE                 1602 	mov	a,r6
   054C 94 00              1603 	subb	a,#0x00
   054E 40 03              1604 	jc	00148$
   0550 02s06rC5           1605 	ljmp	00125$
   0553                    1606 00148$:
                           1607 ;	../../../core/net/uip-fw.c:435: if(fw->timer != 0 &&
   0553 8C 82              1608 	mov	dpl,r4
   0555 8D 83              1609 	mov	dph,r5
   0557 8E F0              1610 	mov	b,r6
   0559 12s00r00           1611 	lcall	__gptrget
   055C FF                 1612 	mov	r7,a
   055D A3                 1613 	inc	dptr
   055E 12s00r00           1614 	lcall	__gptrget
   0561 FA                 1615 	mov	r2,a
   0562 4F                 1616 	orl	a,r7
   0563 70 03              1617 	jnz	00149$
   0565 02s06rBB           1618 	ljmp	00124$
   0568                    1619 00149$:
                           1620 ;	../../../core/net/uip-fw.c:440: fw->ipid == BUF->ipid &&
   0568 74 0A              1621 	mov	a,#0x0A
   056A 2C                 1622 	add	a,r4
   056B FA                 1623 	mov	r2,a
   056C E4                 1624 	clr	a
   056D 3D                 1625 	addc	a,r5
   056E FB                 1626 	mov	r3,a
   056F 8E 07              1627 	mov	ar7,r6
   0571 8A 82              1628 	mov	dpl,r2
   0573 8B 83              1629 	mov	dph,r3
   0575 8F F0              1630 	mov	b,r7
   0577 12s00r00           1631 	lcall	__gptrget
   057A FA                 1632 	mov	r2,a
   057B A3                 1633 	inc	dptr
   057C 12s00r00           1634 	lcall	__gptrget
   057F FB                 1635 	mov	r3,a
   0580 C0 04              1636 	push	ar4
   0582 C0 05              1637 	push	ar5
   0584 C0 06              1638 	push	ar6
   0586 90s00r12           1639 	mov	dptr,#(_uip_aligned_buf + 0x0012)
   0589 E0                 1640 	movx	a,@dptr
   058A FF                 1641 	mov	r7,a
   058B A3                 1642 	inc	dptr
   058C E0                 1643 	movx	a,@dptr
   058D FC                 1644 	mov	r4,a
   058E EA                 1645 	mov	a,r2
   058F B5 07 06           1646 	cjne	a,ar7,00150$
   0592 EB                 1647 	mov	a,r3
   0593 B5 04 02           1648 	cjne	a,ar4,00150$
   0596 80 09              1649 	sjmp	00151$
   0598                    1650 00150$:
   0598 D0 06              1651 	pop	ar6
   059A D0 05              1652 	pop	ar5
   059C D0 04              1653 	pop	ar4
   059E 02s06rBB           1654 	ljmp	00124$
   05A1                    1655 00151$:
   05A1 D0 06              1656 	pop	ar6
   05A3 D0 05              1657 	pop	ar5
   05A5 D0 04              1658 	pop	ar4
                           1659 ;	../../../core/net/uip-fw.c:441: uip_ipaddr_cmp(&fw->srcipaddr, &BUF->srcipaddr) &&
   05A7 74 02              1660 	mov	a,#0x02
   05A9 2C                 1661 	add	a,r4
   05AA FA                 1662 	mov	r2,a
   05AB E4                 1663 	clr	a
   05AC 3D                 1664 	addc	a,r5
   05AD FB                 1665 	mov	r3,a
   05AE 8E 07              1666 	mov	ar7,r6
   05B0 8A 82              1667 	mov	dpl,r2
   05B2 8B 83              1668 	mov	dph,r3
   05B4 8F F0              1669 	mov	b,r7
   05B6 12s00r00           1670 	lcall	__gptrget
   05B9 FA                 1671 	mov	r2,a
   05BA A3                 1672 	inc	dptr
   05BB 12s00r00           1673 	lcall	__gptrget
   05BE FB                 1674 	mov	r3,a
   05BF C0 04              1675 	push	ar4
   05C1 C0 05              1676 	push	ar5
   05C3 C0 06              1677 	push	ar6
   05C5 90s00r1A           1678 	mov	dptr,#(_uip_aligned_buf + 0x001a)
   05C8 E0                 1679 	movx	a,@dptr
   05C9 FF                 1680 	mov	r7,a
   05CA A3                 1681 	inc	dptr
   05CB E0                 1682 	movx	a,@dptr
   05CC FC                 1683 	mov	r4,a
   05CD EA                 1684 	mov	a,r2
   05CE B5 07 06           1685 	cjne	a,ar7,00152$
   05D1 EB                 1686 	mov	a,r3
   05D2 B5 04 02           1687 	cjne	a,ar4,00152$
   05D5 80 09              1688 	sjmp	00153$
   05D7                    1689 00152$:
   05D7 D0 06              1690 	pop	ar6
   05D9 D0 05              1691 	pop	ar5
   05DB D0 04              1692 	pop	ar4
   05DD 02s06rBB           1693 	ljmp	00124$
   05E0                    1694 00153$:
   05E0 D0 06              1695 	pop	ar6
   05E2 D0 05              1696 	pop	ar5
   05E4 D0 04              1697 	pop	ar4
   05E6 74 02              1698 	mov	a,#0x02
   05E8 2C                 1699 	add	a,r4
   05E9 FA                 1700 	mov	r2,a
   05EA E4                 1701 	clr	a
   05EB 3D                 1702 	addc	a,r5
   05EC FB                 1703 	mov	r3,a
   05ED 8E 07              1704 	mov	ar7,r6
   05EF 74 02              1705 	mov	a,#0x02
   05F1 2A                 1706 	add	a,r2
   05F2 FA                 1707 	mov	r2,a
   05F3 E4                 1708 	clr	a
   05F4 3B                 1709 	addc	a,r3
   05F5 FB                 1710 	mov	r3,a
   05F6 8A 82              1711 	mov	dpl,r2
   05F8 8B 83              1712 	mov	dph,r3
   05FA 8F F0              1713 	mov	b,r7
   05FC 12s00r00           1714 	lcall	__gptrget
   05FF FA                 1715 	mov	r2,a
   0600 A3                 1716 	inc	dptr
   0601 12s00r00           1717 	lcall	__gptrget
   0604 FB                 1718 	mov	r3,a
   0605 C0 04              1719 	push	ar4
   0607 C0 05              1720 	push	ar5
   0609 C0 06              1721 	push	ar6
   060B 90s00r1C           1722 	mov	dptr,#(_uip_aligned_buf + 0x001c)
   060E E0                 1723 	movx	a,@dptr
   060F FF                 1724 	mov	r7,a
   0610 A3                 1725 	inc	dptr
   0611 E0                 1726 	movx	a,@dptr
   0612 FC                 1727 	mov	r4,a
   0613 EA                 1728 	mov	a,r2
   0614 B5 07 06           1729 	cjne	a,ar7,00154$
   0617 EB                 1730 	mov	a,r3
   0618 B5 04 02           1731 	cjne	a,ar4,00154$
   061B 80 09              1732 	sjmp	00155$
   061D                    1733 00154$:
   061D D0 06              1734 	pop	ar6
   061F D0 05              1735 	pop	ar5
   0621 D0 04              1736 	pop	ar4
   0623 02s06rBB           1737 	ljmp	00124$
   0626                    1738 00155$:
   0626 D0 06              1739 	pop	ar6
   0628 D0 05              1740 	pop	ar5
   062A D0 04              1741 	pop	ar4
                           1742 ;	../../../core/net/uip-fw.c:442: uip_ipaddr_cmp(&fw->destipaddr, &BUF->destipaddr) &&
   062C 74 06              1743 	mov	a,#0x06
   062E 2C                 1744 	add	a,r4
   062F FA                 1745 	mov	r2,a
   0630 E4                 1746 	clr	a
   0631 3D                 1747 	addc	a,r5
   0632 FB                 1748 	mov	r3,a
   0633 8E 07              1749 	mov	ar7,r6
   0635 8A 82              1750 	mov	dpl,r2
   0637 8B 83              1751 	mov	dph,r3
   0639 8F F0              1752 	mov	b,r7
   063B 12s00r00           1753 	lcall	__gptrget
   063E FA                 1754 	mov	r2,a
   063F A3                 1755 	inc	dptr
   0640 12s00r00           1756 	lcall	__gptrget
   0643 FB                 1757 	mov	r3,a
   0644 A8*00              1758 	mov	r0,_bp
   0646 08                 1759 	inc	r0
   0647 E6                 1760 	mov	a,@r0
   0648 B5 02 07           1761 	cjne	a,ar2,00156$
   064B 08                 1762 	inc	r0
   064C E6                 1763 	mov	a,@r0
   064D B5 03 02           1764 	cjne	a,ar3,00156$
   0650 80 02              1765 	sjmp	00157$
   0652                    1766 00156$:
   0652 80 67              1767 	sjmp	00124$
   0654                    1768 00157$:
   0654 74 06              1769 	mov	a,#0x06
   0656 2C                 1770 	add	a,r4
   0657 FA                 1771 	mov	r2,a
   0658 E4                 1772 	clr	a
   0659 3D                 1773 	addc	a,r5
   065A FB                 1774 	mov	r3,a
   065B 8E 07              1775 	mov	ar7,r6
   065D 74 02              1776 	mov	a,#0x02
   065F 2A                 1777 	add	a,r2
   0660 FA                 1778 	mov	r2,a
   0661 E4                 1779 	clr	a
   0662 3B                 1780 	addc	a,r3
   0663 FB                 1781 	mov	r3,a
   0664 8A 82              1782 	mov	dpl,r2
   0666 8B 83              1783 	mov	dph,r3
   0668 8F F0              1784 	mov	b,r7
   066A 12s00r00           1785 	lcall	__gptrget
   066D FA                 1786 	mov	r2,a
   066E A3                 1787 	inc	dptr
   066F 12s00r00           1788 	lcall	__gptrget
   0672 FB                 1789 	mov	r3,a
   0673 C0 04              1790 	push	ar4
   0675 C0 05              1791 	push	ar5
   0677 C0 06              1792 	push	ar6
   0679 90s00r20           1793 	mov	dptr,#(_uip_aligned_buf + 0x0020)
   067C E0                 1794 	movx	a,@dptr
   067D FF                 1795 	mov	r7,a
   067E A3                 1796 	inc	dptr
   067F E0                 1797 	movx	a,@dptr
   0680 FC                 1798 	mov	r4,a
   0681 EA                 1799 	mov	a,r2
   0682 B5 07 06           1800 	cjne	a,ar7,00158$
   0685 EB                 1801 	mov	a,r3
   0686 B5 04 02           1802 	cjne	a,ar4,00158$
   0689 80 08              1803 	sjmp	00159$
   068B                    1804 00158$:
   068B D0 06              1805 	pop	ar6
   068D D0 05              1806 	pop	ar5
   068F D0 04              1807 	pop	ar4
   0691 80 28              1808 	sjmp	00124$
   0693                    1809 00159$:
   0693 D0 06              1810 	pop	ar6
   0695 D0 05              1811 	pop	ar5
   0697 D0 04              1812 	pop	ar4
                           1813 ;	../../../core/net/uip-fw.c:447: fw->proto == BUF->proto) {
   0699 74 0C              1814 	mov	a,#0x0C
   069B 2C                 1815 	add	a,r4
   069C FA                 1816 	mov	r2,a
   069D E4                 1817 	clr	a
   069E 3D                 1818 	addc	a,r5
   069F FB                 1819 	mov	r3,a
   06A0 8E 07              1820 	mov	ar7,r6
   06A2 8A 82              1821 	mov	dpl,r2
   06A4 8B 83              1822 	mov	dph,r3
   06A6 8F F0              1823 	mov	b,r7
   06A8 12s00r00           1824 	lcall	__gptrget
   06AB FA                 1825 	mov	r2,a
   06AC 90s00r17           1826 	mov	dptr,#(_uip_aligned_buf + 0x0017)
   06AF E0                 1827 	movx	a,@dptr
   06B0 FB                 1828 	mov	r3,a
   06B1 EA                 1829 	mov	a,r2
   06B2 B5 03 06           1830 	cjne	a,ar3,00124$
                           1831 ;	../../../core/net/uip-fw.c:449: return UIP_FW_FORWARDED;
   06B5 75 82 01           1832 	mov	dpl,#0x01
   06B8 02s07r65           1833 	ljmp	00126$
   06BB                    1834 00124$:
                           1835 ;	../../../core/net/uip-fw.c:434: for(fw = fwcache; fw < &fwcache[FWCACHE_SIZE]; ++fw) {
   06BB 74 0E              1836 	mov	a,#0x0E
   06BD 2C                 1837 	add	a,r4
   06BE FC                 1838 	mov	r4,a
   06BF E4                 1839 	clr	a
   06C0 3D                 1840 	addc	a,r5
   06C1 FD                 1841 	mov	r5,a
   06C2 02s05r44           1842 	ljmp	00122$
   06C5                    1843 00125$:
                           1844 ;	../../../core/net/uip-fw.c:457: if(BUF->ttl <= 1) {
   06C5 90s00r16           1845 	mov	dptr,#(_uip_aligned_buf + 0x0016)
   06C8 E0                 1846 	movx	a,@dptr
   06C9 FA                 1847 	mov	r2,a
   06CA 74 01              1848 	mov	a,#0x01
   06CC B5 02 00           1849 	cjne	a,ar2,00162$
   06CF                    1850 00162$:
   06CF 40 3C              1851 	jc	00116$
                           1852 ;	../../../core/net/uip-fw.c:459: if(uip_ipaddr_cmp(&BUF->destipaddr, &uip_broadcast_addr)) {
   06D1 90s00r00           1853 	mov	dptr,#_uip_broadcast_addr
   06D4 E4                 1854 	clr	a
   06D5 93                 1855 	movc	a,@a+dptr
   06D6 FA                 1856 	mov	r2,a
   06D7 A3                 1857 	inc	dptr
   06D8 E4                 1858 	clr	a
   06D9 93                 1859 	movc	a,@a+dptr
   06DA FB                 1860 	mov	r3,a
   06DB A8*00              1861 	mov	r0,_bp
   06DD 08                 1862 	inc	r0
   06DE E6                 1863 	mov	a,@r0
   06DF B5 02 07           1864 	cjne	a,ar2,00164$
   06E2 08                 1865 	inc	r0
   06E3 E6                 1866 	mov	a,@r0
   06E4 B5 03 02           1867 	cjne	a,ar3,00164$
   06E7 80 02              1868 	sjmp	00165$
   06E9                    1869 00164$:
   06E9 80 1F              1870 	sjmp	00113$
   06EB                    1871 00165$:
   06EB 90s00r20           1872 	mov	dptr,#(_uip_aligned_buf + 0x0020)
   06EE E0                 1873 	movx	a,@dptr
   06EF FA                 1874 	mov	r2,a
   06F0 A3                 1875 	inc	dptr
   06F1 E0                 1876 	movx	a,@dptr
   06F2 FB                 1877 	mov	r3,a
   06F3 90s00r02           1878 	mov	dptr,#(_uip_broadcast_addr + 0x0002)
   06F6 E4                 1879 	clr	a
   06F7 93                 1880 	movc	a,@a+dptr
   06F8 FC                 1881 	mov	r4,a
   06F9 A3                 1882 	inc	dptr
   06FA E4                 1883 	clr	a
   06FB 93                 1884 	movc	a,@a+dptr
   06FC FD                 1885 	mov	r5,a
   06FD EA                 1886 	mov	a,r2
   06FE B5 04 09           1887 	cjne	a,ar4,00113$
   0701 EB                 1888 	mov	a,r3
   0702 B5 05 05           1889 	cjne	a,ar5,00113$
                           1890 ;	../../../core/net/uip-fw.c:460: return UIP_FW_LOCAL;
   0705 75 82 00           1891 	mov	dpl,#0x00
   0708 80 5B              1892 	sjmp	00126$
   070A                    1893 00113$:
                           1894 ;	../../../core/net/uip-fw.c:462: time_exceeded();
   070A 12s01r7C           1895 	lcall	_time_exceeded
   070D                    1896 00116$:
                           1897 ;	../../../core/net/uip-fw.c:466: BUF->ttl = BUF->ttl - 1;
   070D 90s00r16           1898 	mov	dptr,#(_uip_aligned_buf + 0x0016)
   0710 E0                 1899 	movx	a,@dptr
   0711 FA                 1900 	mov	r2,a
   0712 1A                 1901 	dec	r2
   0713 90s00r16           1902 	mov	dptr,#(_uip_aligned_buf + 0x0016)
   0716 EA                 1903 	mov	a,r2
   0717 F0                 1904 	movx	@dptr,a
                           1905 ;	../../../core/net/uip-fw.c:469: if(BUF->ipchksum >= HTONS(0xffff - 0x0100)) {
   0718 90s00r18           1906 	mov	dptr,#(_uip_aligned_buf + 0x0018)
   071B E0                 1907 	movx	a,@dptr
   071C FA                 1908 	mov	r2,a
   071D A3                 1909 	inc	dptr
   071E E0                 1910 	movx	a,@dptr
   071F FB                 1911 	mov	r3,a
   0720 C3                 1912 	clr	c
   0721 EA                 1913 	mov	a,r2
   0722 94 FE              1914 	subb	a,#0xFE
   0724 EB                 1915 	mov	a,r3
   0725 94 FF              1916 	subb	a,#0xFF
   0727 40 11              1917 	jc	00118$
                           1918 ;	../../../core/net/uip-fw.c:470: BUF->ipchksum = BUF->ipchksum + HTONS(0x0100) + 1;
   0729 74 02              1919 	mov	a,#0x02
   072B 2A                 1920 	add	a,r2
   072C FC                 1921 	mov	r4,a
   072D E4                 1922 	clr	a
   072E 3B                 1923 	addc	a,r3
   072F FD                 1924 	mov	r5,a
   0730 90s00r18           1925 	mov	dptr,#(_uip_aligned_buf + 0x0018)
   0733 EC                 1926 	mov	a,r4
   0734 F0                 1927 	movx	@dptr,a
   0735 A3                 1928 	inc	dptr
   0736 ED                 1929 	mov	a,r5
   0737 F0                 1930 	movx	@dptr,a
   0738 80 0D              1931 	sjmp	00119$
   073A                    1932 00118$:
                           1933 ;	../../../core/net/uip-fw.c:472: BUF->ipchksum = BUF->ipchksum + HTONS(0x0100);
   073A 0A                 1934 	inc	r2
   073B BA 00 01           1935 	cjne	r2,#0x00,00169$
   073E 0B                 1936 	inc	r3
   073F                    1937 00169$:
   073F 90s00r18           1938 	mov	dptr,#(_uip_aligned_buf + 0x0018)
   0742 EA                 1939 	mov	a,r2
   0743 F0                 1940 	movx	@dptr,a
   0744 A3                 1941 	inc	dptr
   0745 EB                 1942 	mov	a,r3
   0746 F0                 1943 	movx	@dptr,a
   0747                    1944 00119$:
                           1945 ;	../../../core/net/uip-fw.c:475: if(uip_len > 0) {
   0747 90s00r00           1946 	mov	dptr,#_uip_len
   074A E0                 1947 	movx	a,@dptr
   074B FA                 1948 	mov	r2,a
   074C A3                 1949 	inc	dptr
   074D E0                 1950 	movx	a,@dptr
   074E FB                 1951 	mov	r3,a
   074F 4A                 1952 	orl	a,r2
   0750 60 10              1953 	jz	00121$
                           1954 ;	../../../core/net/uip-fw.c:476: uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_TCPIP_HLEN];
   0752 90s00r00           1955 	mov	dptr,#_uip_appdata
   0755 74r36              1956 	mov	a,#(_uip_aligned_buf + 0x0036)
   0757 F0                 1957 	movx	@dptr,a
   0758 A3                 1958 	inc	dptr
   0759 74s00              1959 	mov	a,#((_uip_aligned_buf + 0x0036) >> 8)
   075B F0                 1960 	movx	@dptr,a
   075C A3                 1961 	inc	dptr
   075D E4                 1962 	clr	a
   075E F0                 1963 	movx	@dptr,a
                           1964 ;	../../../core/net/uip-fw.c:477: uip_fw_output();
   075F 12s04rA5           1965 	lcall	_uip_fw_output
   0762                    1966 00121$:
                           1967 ;	../../../core/net/uip-fw.c:488: return UIP_FW_FORWARDED;
   0762 75 82 01           1968 	mov	dpl,#0x01
   0765                    1969 00126$:
   0765 85*00 81           1970 	mov	sp,_bp
   0768 D0*00              1971 	pop	_bp
   076A 22                 1972 	ret
                           1973 ;------------------------------------------------------------
                           1974 ;Allocation info for local variables in function 'uip_fw_register'
                           1975 ;------------------------------------------------------------
                           1976 ;netif                     Allocated to registers r2 r3 r4 
                           1977 ;------------------------------------------------------------
                           1978 ;	../../../core/net/uip-fw.c:499: uip_fw_register(struct uip_fw_netif *netif)
                           1979 ;	-----------------------------------------
                           1980 ;	 function uip_fw_register
                           1981 ;	-----------------------------------------
   076B                    1982 _uip_fw_register:
   076B AA 82              1983 	mov	r2,dpl
   076D AB 83              1984 	mov	r3,dph
   076F AC F0              1985 	mov	r4,b
                           1986 ;	../../../core/net/uip-fw.c:501: netif->next = netifs;
   0771 90s00r00           1987 	mov	dptr,#_netifs
   0774 E0                 1988 	movx	a,@dptr
   0775 FD                 1989 	mov	r5,a
   0776 A3                 1990 	inc	dptr
   0777 E0                 1991 	movx	a,@dptr
   0778 FE                 1992 	mov	r6,a
   0779 A3                 1993 	inc	dptr
   077A E0                 1994 	movx	a,@dptr
   077B FF                 1995 	mov	r7,a
   077C 8A 82              1996 	mov	dpl,r2
   077E 8B 83              1997 	mov	dph,r3
   0780 8C F0              1998 	mov	b,r4
   0782 ED                 1999 	mov	a,r5
   0783 12s00r00           2000 	lcall	__gptrput
   0786 A3                 2001 	inc	dptr
   0787 EE                 2002 	mov	a,r6
   0788 12s00r00           2003 	lcall	__gptrput
   078B A3                 2004 	inc	dptr
   078C EF                 2005 	mov	a,r7
   078D 12s00r00           2006 	lcall	__gptrput
                           2007 ;	../../../core/net/uip-fw.c:502: netifs = netif;
   0790 90s00r00           2008 	mov	dptr,#_netifs
   0793 EA                 2009 	mov	a,r2
   0794 F0                 2010 	movx	@dptr,a
   0795 A3                 2011 	inc	dptr
   0796 EB                 2012 	mov	a,r3
   0797 F0                 2013 	movx	@dptr,a
   0798 A3                 2014 	inc	dptr
   0799 EC                 2015 	mov	a,r4
   079A F0                 2016 	movx	@dptr,a
   079B 22                 2017 	ret
                           2018 ;------------------------------------------------------------
                           2019 ;Allocation info for local variables in function 'uip_fw_default'
                           2020 ;------------------------------------------------------------
                           2021 ;netif                     Allocated to registers 
                           2022 ;------------------------------------------------------------
                           2023 ;	../../../core/net/uip-fw.c:516: uip_fw_default(struct uip_fw_netif *netif)
                           2024 ;	-----------------------------------------
                           2025 ;	 function uip_fw_default
                           2026 ;	-----------------------------------------
   079C                    2027 _uip_fw_default:
   079C AA F0              2028 	mov	r2,b
   079E AB 83              2029 	mov	r3,dph
   07A0 E5 82              2030 	mov	a,dpl
   07A2 90s00r03           2031 	mov	dptr,#_defaultnetif
   07A5 F0                 2032 	movx	@dptr,a
   07A6 A3                 2033 	inc	dptr
   07A7 EB                 2034 	mov	a,r3
   07A8 F0                 2035 	movx	@dptr,a
   07A9 A3                 2036 	inc	dptr
   07AA EA                 2037 	mov	a,r2
   07AB F0                 2038 	movx	@dptr,a
                           2039 ;	../../../core/net/uip-fw.c:518: defaultnetif = netif;
   07AC 22                 2040 	ret
                           2041 ;------------------------------------------------------------
                           2042 ;Allocation info for local variables in function 'uip_fw_periodic'
                           2043 ;------------------------------------------------------------
                           2044 ;fw                        Allocated to registers 
                           2045 ;------------------------------------------------------------
                           2046 ;	../../../core/net/uip-fw.c:526: uip_fw_periodic(void)
                           2047 ;	-----------------------------------------
                           2048 ;	 function uip_fw_periodic
                           2049 ;	-----------------------------------------
   07AD                    2050 _uip_fw_periodic:
                           2051 ;	../../../core/net/uip-fw.c:529: for(fw = fwcache; fw < &fwcache[FWCACHE_SIZE]; ++fw) {
   07AD 7Ar00              2052 	mov	r2,#_fwcache
   07AF 7Bs00              2053 	mov	r3,#(_fwcache >> 8)
   07B1 7C 00              2054 	mov	r4,#0x00
   07B3                    2055 00103$:
   07B3 C3                 2056 	clr	c
   07B4 EA                 2057 	mov	a,r2
   07B5 94r1C              2058 	subb	a,#(_fwcache + 0x001c)
   07B7 EB                 2059 	mov	a,r3
   07B8 94s00              2060 	subb	a,#((_fwcache + 0x001c) >> 8)
   07BA EC                 2061 	mov	a,r4
   07BB 94 00              2062 	subb	a,#0x00
   07BD 50 2F              2063 	jnc	00107$
                           2064 ;	../../../core/net/uip-fw.c:530: if(fw->timer > 0) {
   07BF 8A 82              2065 	mov	dpl,r2
   07C1 8B 83              2066 	mov	dph,r3
   07C3 8C F0              2067 	mov	b,r4
   07C5 12s00r00           2068 	lcall	__gptrget
   07C8 FD                 2069 	mov	r5,a
   07C9 A3                 2070 	inc	dptr
   07CA 12s00r00           2071 	lcall	__gptrget
   07CD FE                 2072 	mov	r6,a
   07CE 4D                 2073 	orl	a,r5
   07CF 60 14              2074 	jz	00105$
                           2075 ;	../../../core/net/uip-fw.c:531: --fw->timer;
   07D1 1D                 2076 	dec	r5
   07D2 BD FF 01           2077 	cjne	r5,#0xff,00115$
   07D5 1E                 2078 	dec	r6
   07D6                    2079 00115$:
   07D6 8A 82              2080 	mov	dpl,r2
   07D8 8B 83              2081 	mov	dph,r3
   07DA 8C F0              2082 	mov	b,r4
   07DC ED                 2083 	mov	a,r5
   07DD 12s00r00           2084 	lcall	__gptrput
   07E0 A3                 2085 	inc	dptr
   07E1 EE                 2086 	mov	a,r6
   07E2 12s00r00           2087 	lcall	__gptrput
   07E5                    2088 00105$:
                           2089 ;	../../../core/net/uip-fw.c:529: for(fw = fwcache; fw < &fwcache[FWCACHE_SIZE]; ++fw) {
   07E5 74 0E              2090 	mov	a,#0x0E
   07E7 2A                 2091 	add	a,r2
   07E8 FA                 2092 	mov	r2,a
   07E9 E4                 2093 	clr	a
   07EA 3B                 2094 	addc	a,r3
   07EB FB                 2095 	mov	r3,a
   07EC 80 C5              2096 	sjmp	00103$
   07EE                    2097 00107$:
   07EE 22                 2098 	ret
                           2099 	.area CSEG    (CODE)
                           2100 	.area CONST   (CODE)
                           2101 	.area XINIT   (CODE)
   0000                    2102 __xinit__netifs:
                           2103 ; generic printIvalPtr
   0000 00 00 00           2104 	.byte #0x00,#0x00,#0x00
   0003                    2105 __xinit__defaultnetif:
                           2106 ; generic printIvalPtr
   0003 00 00 00           2107 	.byte #0x00,#0x00,#0x00
                           2108 	.area CABS    (ABS,CODE)
