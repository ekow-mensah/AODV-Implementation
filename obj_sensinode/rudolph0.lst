                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6121 (Nov 17 2015) (CYGWIN)
                              4 ; This file was generated Sat Jan 27 13:25:31 2018
                              5 ;--------------------------------------------------------
                              6 	.module rudolph0
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _IRCON2_P2IF
                             13 	.globl _IRCON2_UTX0IF
                             14 	.globl _IRCON2_UTX1IF
                             15 	.globl _IRCON2_P1IF
                             16 	.globl _IRCON2_WDTIF
                             17 	.globl _CY
                             18 	.globl _AC
                             19 	.globl _F0
                             20 	.globl _RS1
                             21 	.globl _RS0
                             22 	.globl _OV
                             23 	.globl _F1
                             24 	.globl _P
                             25 	.globl _IRCON_DMAIF
                             26 	.globl _IRCON_T1IF
                             27 	.globl _IRCON_T2IF
                             28 	.globl _IRCON_T3IF
                             29 	.globl _IRCON_T4IF
                             30 	.globl _IRCON_P0IF
                             31 	.globl _IRCON_STIF
                             32 	.globl _IEN1_DMAIE
                             33 	.globl _IEN1_T1IE
                             34 	.globl _IEN1_T2IE
                             35 	.globl _IEN1_T3IE
                             36 	.globl _IEN1_T4IE
                             37 	.globl _IEN1_P0IE
                             38 	.globl _IEN0_RFERRIE
                             39 	.globl _IEN0_ADCIE
                             40 	.globl _IEN0_URX0IE
                             41 	.globl _IEN0_URX1IE
                             42 	.globl _IEN0_ENCIE
                             43 	.globl _IEN0_STIE
                             44 	.globl _IEN0_EA
                             45 	.globl _EA
                             46 	.globl _P2_4
                             47 	.globl _P2_3
                             48 	.globl _P2_2
                             49 	.globl _P2_1
                             50 	.globl _P2_0
                             51 	.globl _S0CON_ENCIF_0
                             52 	.globl _S0CON_ENCIF_1
                             53 	.globl _P1_7
                             54 	.globl _P1_6
                             55 	.globl _P1_5
                             56 	.globl _P1_4
                             57 	.globl _P1_3
                             58 	.globl _P1_2
                             59 	.globl _P1_1
                             60 	.globl _P1_0
                             61 	.globl _TCON_IT0
                             62 	.globl _TCON_RFERRIF
                             63 	.globl _TCON_IT1
                             64 	.globl _TCON_URX0IF
                             65 	.globl _TCON_ADCIF
                             66 	.globl _TCON_URX1IF
                             67 	.globl _P0_0
                             68 	.globl _P0_1
                             69 	.globl _P0_2
                             70 	.globl _P0_3
                             71 	.globl _P0_4
                             72 	.globl _P0_5
                             73 	.globl _P0_6
                             74 	.globl _P0_7
                             75 	.globl _P2DIR
                             76 	.globl _P1DIR
                             77 	.globl _P0DIR
                             78 	.globl _U1GCR
                             79 	.globl _U1UCR
                             80 	.globl _U1BAUD
                             81 	.globl _U1BUF
                             82 	.globl _U1CSR
                             83 	.globl _P2INP
                             84 	.globl _P1INP
                             85 	.globl _P2SEL
                             86 	.globl _P1SEL
                             87 	.globl _P0SEL
                             88 	.globl _ADCCFG
                             89 	.globl _PERCFG
                             90 	.globl _B
                             91 	.globl _T4CC1
                             92 	.globl _T4CCTL1
                             93 	.globl _T4CC0
                             94 	.globl _T4CCTL0
                             95 	.globl _T4CTL
                             96 	.globl _T4CNT
                             97 	.globl _RFIF
                             98 	.globl _IRCON2
                             99 	.globl _T1CCTL2
                            100 	.globl _T1CCTL1
                            101 	.globl _T1CCTL0
                            102 	.globl _T1CTL
                            103 	.globl _T1CNTH
                            104 	.globl _T1CNTL
                            105 	.globl _RFST
                            106 	.globl _ACC
                            107 	.globl _T1CC2H
                            108 	.globl _T1CC2L
                            109 	.globl _T1CC1H
                            110 	.globl _T1CC1L
                            111 	.globl _T1CC0H
                            112 	.globl _T1CC0L
                            113 	.globl _RFD
                            114 	.globl _TIMIF
                            115 	.globl _DMAREQ
                            116 	.globl _DMAARM
                            117 	.globl _DMA0CFGH
                            118 	.globl _DMA0CFGL
                            119 	.globl _DMA1CFGH
                            120 	.globl _DMA1CFGL
                            121 	.globl _DMAIRQ
                            122 	.globl _PSW
                            123 	.globl _T3CC1
                            124 	.globl _T3CCTL1
                            125 	.globl _T3CC0
                            126 	.globl _T3CCTL0
                            127 	.globl _T3CTL
                            128 	.globl _T3CNT
                            129 	.globl _WDCTL
                            130 	.globl _T2CON
                            131 	.globl _MEMCTR
                            132 	.globl _CLKCON
                            133 	.globl _U0GCR
                            134 	.globl _U0UCR
                            135 	.globl _T2CNF
                            136 	.globl _U0BAUD
                            137 	.globl _U0BUF
                            138 	.globl _IRCON
                            139 	.globl _SLEEP
                            140 	.globl _RNDH
                            141 	.globl _RNDL
                            142 	.globl _ADCH
                            143 	.globl _ADCL
                            144 	.globl _IP1
                            145 	.globl _IEN1
                            146 	.globl _RCCTL
                            147 	.globl _ADCCON3
                            148 	.globl _ADCCON2
                            149 	.globl _ADCCON1
                            150 	.globl _ENCCS
                            151 	.globl _ENCDO
                            152 	.globl _ENCDI
                            153 	.globl _FWDATA
                            154 	.globl _FCTL
                            155 	.globl _FADDRH
                            156 	.globl _FADDRL
                            157 	.globl _FWT
                            158 	.globl _IP0
                            159 	.globl _IEN0
                            160 	.globl _IE
                            161 	.globl _T2THD
                            162 	.globl _T2TLD
                            163 	.globl _T2CAPHPH
                            164 	.globl _T2CAPLPL
                            165 	.globl _T2OF2
                            166 	.globl _T2OF1
                            167 	.globl _T2OF0
                            168 	.globl _P2
                            169 	.globl _PSBANK
                            170 	.globl _FMAP
                            171 	.globl _T2PEROF2
                            172 	.globl _T2PEROF1
                            173 	.globl _T2PEROF0
                            174 	.globl _S1CON
                            175 	.globl _IEN2
                            176 	.globl _HSRC
                            177 	.globl _S0CON
                            178 	.globl _ST2
                            179 	.globl _ST1
                            180 	.globl _ST0
                            181 	.globl _T2CMP
                            182 	.globl __XPAGE
                            183 	.globl _DPS
                            184 	.globl _RFIM
                            185 	.globl _P1
                            186 	.globl _P0INP
                            187 	.globl _P1IEN
                            188 	.globl _PICTL
                            189 	.globl _P2IFG
                            190 	.globl _P1IFG
                            191 	.globl _P0IFG
                            192 	.globl _TCON
                            193 	.globl _PCON
                            194 	.globl _U0CSR
                            195 	.globl _DPH1
                            196 	.globl _DPL1
                            197 	.globl _DPH0
                            198 	.globl _DPL0
                            199 	.globl _SP
                            200 	.globl _P0
                            201 	.globl _ADC_SHADOW
                            202 	.globl _U1BUF_SHADOW
                            203 	.globl _RFD_SHADOW
                            204 	.globl _U0BUF_SHADOW
                            205 	.globl _RFSTATUS
                            206 	.globl _CHIPID
                            207 	.globl _CHVER
                            208 	.globl _FSMTC1
                            209 	.globl _RXFIFOCNT
                            210 	.globl _IOCFG3
                            211 	.globl _IOCFG2
                            212 	.globl _IOCFG1
                            213 	.globl _IOCFG0
                            214 	.globl _SHORTADDRL
                            215 	.globl _SHORTADDRH
                            216 	.globl _PANIDL
                            217 	.globl _PANIDH
                            218 	.globl _IEEE_ADDR7
                            219 	.globl _IEEE_ADDR6
                            220 	.globl _IEEE_ADDR5
                            221 	.globl _IEEE_ADDR4
                            222 	.globl _IEEE_ADDR3
                            223 	.globl _IEEE_ADDR2
                            224 	.globl _IEEE_ADDR1
                            225 	.globl _IEEE_ADDR0
                            226 	.globl _DACTSTL
                            227 	.globl _DACTSTH
                            228 	.globl _ADCTSTL
                            229 	.globl _ADCTSTH
                            230 	.globl _FSMSTATE
                            231 	.globl _AGCCTRLL
                            232 	.globl _AGCCTRLH
                            233 	.globl _MANORL
                            234 	.globl _MANORH
                            235 	.globl _MANANDL
                            236 	.globl _MANANDH
                            237 	.globl _FSMTCL
                            238 	.globl _FSMTCH
                            239 	.globl _RFPWR
                            240 	.globl _CSPT
                            241 	.globl _CSPCTRL
                            242 	.globl _CSPZ
                            243 	.globl _CSPY
                            244 	.globl _CSPX
                            245 	.globl _FSCTRLL
                            246 	.globl _FSCTRLH
                            247 	.globl _RXCTRL1L
                            248 	.globl _RXCTRL1H
                            249 	.globl _RXCTRL0L
                            250 	.globl _RXCTRL0H
                            251 	.globl _TXCTRLL
                            252 	.globl _TXCTRLH
                            253 	.globl _SYNCWORDL
                            254 	.globl _SYNCWORDH
                            255 	.globl _RSSIL
                            256 	.globl _RSSIH
                            257 	.globl _MDMCTRL1L
                            258 	.globl _MDMCTRL1H
                            259 	.globl _MDMCTRL0L
                            260 	.globl _MDMCTRL0H
                            261 	.globl _rudolph0_open
                            262 	.globl _rudolph0_close
                            263 	.globl _rudolph0_send
                            264 	.globl _rudolph0_force_restart
                            265 	.globl _rudolph0_stop
                            266 	.globl _rudolph0_version
                            267 	.globl _rudolph0_set_version
                            268 ;--------------------------------------------------------
                            269 ; special function registers
                            270 ;--------------------------------------------------------
                            271 	.area RSEG    (ABS,DATA)
   0000                     272 	.org 0x0000
                    0080    273 _P0	=	0x0080
                    0081    274 _SP	=	0x0081
                    0082    275 _DPL0	=	0x0082
                    0083    276 _DPH0	=	0x0083
                    0084    277 _DPL1	=	0x0084
                    0085    278 _DPH1	=	0x0085
                    0086    279 _U0CSR	=	0x0086
                    0087    280 _PCON	=	0x0087
                    0088    281 _TCON	=	0x0088
                    0089    282 _P0IFG	=	0x0089
                    008A    283 _P1IFG	=	0x008a
                    008B    284 _P2IFG	=	0x008b
                    008C    285 _PICTL	=	0x008c
                    008D    286 _P1IEN	=	0x008d
                    008F    287 _P0INP	=	0x008f
                    0090    288 _P1	=	0x0090
                    0091    289 _RFIM	=	0x0091
                    0092    290 _DPS	=	0x0092
                    0093    291 __XPAGE	=	0x0093
                    0094    292 _T2CMP	=	0x0094
                    0095    293 _ST0	=	0x0095
                    0096    294 _ST1	=	0x0096
                    0097    295 _ST2	=	0x0097
                    0098    296 _S0CON	=	0x0098
                    0099    297 _HSRC	=	0x0099
                    009A    298 _IEN2	=	0x009a
                    009B    299 _S1CON	=	0x009b
                    009C    300 _T2PEROF0	=	0x009c
                    009D    301 _T2PEROF1	=	0x009d
                    009E    302 _T2PEROF2	=	0x009e
                    009F    303 _FMAP	=	0x009f
                    009F    304 _PSBANK	=	0x009f
                    00A0    305 _P2	=	0x00a0
                    00A1    306 _T2OF0	=	0x00a1
                    00A2    307 _T2OF1	=	0x00a2
                    00A3    308 _T2OF2	=	0x00a3
                    00A4    309 _T2CAPLPL	=	0x00a4
                    00A5    310 _T2CAPHPH	=	0x00a5
                    00A6    311 _T2TLD	=	0x00a6
                    00A7    312 _T2THD	=	0x00a7
                    00A8    313 _IE	=	0x00a8
                    00A8    314 _IEN0	=	0x00a8
                    00A9    315 _IP0	=	0x00a9
                    00AB    316 _FWT	=	0x00ab
                    00AC    317 _FADDRL	=	0x00ac
                    00AD    318 _FADDRH	=	0x00ad
                    00AE    319 _FCTL	=	0x00ae
                    00AF    320 _FWDATA	=	0x00af
                    00B1    321 _ENCDI	=	0x00b1
                    00B2    322 _ENCDO	=	0x00b2
                    00B3    323 _ENCCS	=	0x00b3
                    00B4    324 _ADCCON1	=	0x00b4
                    00B5    325 _ADCCON2	=	0x00b5
                    00B6    326 _ADCCON3	=	0x00b6
                    00B7    327 _RCCTL	=	0x00b7
                    00B8    328 _IEN1	=	0x00b8
                    00B9    329 _IP1	=	0x00b9
                    00BA    330 _ADCL	=	0x00ba
                    00BB    331 _ADCH	=	0x00bb
                    00BC    332 _RNDL	=	0x00bc
                    00BD    333 _RNDH	=	0x00bd
                    00BE    334 _SLEEP	=	0x00be
                    00C0    335 _IRCON	=	0x00c0
                    00C1    336 _U0BUF	=	0x00c1
                    00C2    337 _U0BAUD	=	0x00c2
                    00C3    338 _T2CNF	=	0x00c3
                    00C4    339 _U0UCR	=	0x00c4
                    00C5    340 _U0GCR	=	0x00c5
                    00C6    341 _CLKCON	=	0x00c6
                    00C7    342 _MEMCTR	=	0x00c7
                    00C8    343 _T2CON	=	0x00c8
                    00C9    344 _WDCTL	=	0x00c9
                    00CA    345 _T3CNT	=	0x00ca
                    00CB    346 _T3CTL	=	0x00cb
                    00CC    347 _T3CCTL0	=	0x00cc
                    00CD    348 _T3CC0	=	0x00cd
                    00CE    349 _T3CCTL1	=	0x00ce
                    00CF    350 _T3CC1	=	0x00cf
                    00D0    351 _PSW	=	0x00d0
                    00D1    352 _DMAIRQ	=	0x00d1
                    00D2    353 _DMA1CFGL	=	0x00d2
                    00D3    354 _DMA1CFGH	=	0x00d3
                    00D4    355 _DMA0CFGL	=	0x00d4
                    00D5    356 _DMA0CFGH	=	0x00d5
                    00D6    357 _DMAARM	=	0x00d6
                    00D7    358 _DMAREQ	=	0x00d7
                    00D8    359 _TIMIF	=	0x00d8
                    00D9    360 _RFD	=	0x00d9
                    00DA    361 _T1CC0L	=	0x00da
                    00DB    362 _T1CC0H	=	0x00db
                    00DC    363 _T1CC1L	=	0x00dc
                    00DD    364 _T1CC1H	=	0x00dd
                    00DE    365 _T1CC2L	=	0x00de
                    00DF    366 _T1CC2H	=	0x00df
                    00E0    367 _ACC	=	0x00e0
                    00E1    368 _RFST	=	0x00e1
                    00E2    369 _T1CNTL	=	0x00e2
                    00E3    370 _T1CNTH	=	0x00e3
                    00E4    371 _T1CTL	=	0x00e4
                    00E5    372 _T1CCTL0	=	0x00e5
                    00E6    373 _T1CCTL1	=	0x00e6
                    00E7    374 _T1CCTL2	=	0x00e7
                    00E8    375 _IRCON2	=	0x00e8
                    00E9    376 _RFIF	=	0x00e9
                    00EA    377 _T4CNT	=	0x00ea
                    00EB    378 _T4CTL	=	0x00eb
                    00EC    379 _T4CCTL0	=	0x00ec
                    00ED    380 _T4CC0	=	0x00ed
                    00EE    381 _T4CCTL1	=	0x00ee
                    00EF    382 _T4CC1	=	0x00ef
                    00F0    383 _B	=	0x00f0
                    00F1    384 _PERCFG	=	0x00f1
                    00F2    385 _ADCCFG	=	0x00f2
                    00F3    386 _P0SEL	=	0x00f3
                    00F4    387 _P1SEL	=	0x00f4
                    00F5    388 _P2SEL	=	0x00f5
                    00F6    389 _P1INP	=	0x00f6
                    00F7    390 _P2INP	=	0x00f7
                    00F8    391 _U1CSR	=	0x00f8
                    00F9    392 _U1BUF	=	0x00f9
                    00FA    393 _U1BAUD	=	0x00fa
                    00FB    394 _U1UCR	=	0x00fb
                    00FC    395 _U1GCR	=	0x00fc
                    00FD    396 _P0DIR	=	0x00fd
                    00FE    397 _P1DIR	=	0x00fe
                    00FF    398 _P2DIR	=	0x00ff
                            399 ;--------------------------------------------------------
                            400 ; special function bits
                            401 ;--------------------------------------------------------
                            402 	.area RSEG    (ABS,DATA)
   0000                     403 	.org 0x0000
                    0087    404 _P0_7	=	0x0087
                    0086    405 _P0_6	=	0x0086
                    0085    406 _P0_5	=	0x0085
                    0084    407 _P0_4	=	0x0084
                    0083    408 _P0_3	=	0x0083
                    0082    409 _P0_2	=	0x0082
                    0081    410 _P0_1	=	0x0081
                    0080    411 _P0_0	=	0x0080
                    008F    412 _TCON_URX1IF	=	0x008f
                    008D    413 _TCON_ADCIF	=	0x008d
                    008B    414 _TCON_URX0IF	=	0x008b
                    008A    415 _TCON_IT1	=	0x008a
                    0089    416 _TCON_RFERRIF	=	0x0089
                    0088    417 _TCON_IT0	=	0x0088
                    0090    418 _P1_0	=	0x0090
                    0091    419 _P1_1	=	0x0091
                    0092    420 _P1_2	=	0x0092
                    0093    421 _P1_3	=	0x0093
                    0094    422 _P1_4	=	0x0094
                    0095    423 _P1_5	=	0x0095
                    0096    424 _P1_6	=	0x0096
                    0097    425 _P1_7	=	0x0097
                    0099    426 _S0CON_ENCIF_1	=	0x0099
                    0098    427 _S0CON_ENCIF_0	=	0x0098
                    00A0    428 _P2_0	=	0x00a0
                    00A1    429 _P2_1	=	0x00a1
                    00A2    430 _P2_2	=	0x00a2
                    00A3    431 _P2_3	=	0x00a3
                    00A4    432 _P2_4	=	0x00a4
                    00AF    433 _EA	=	0x00af
                    00AF    434 _IEN0_EA	=	0x00af
                    00AD    435 _IEN0_STIE	=	0x00ad
                    00AC    436 _IEN0_ENCIE	=	0x00ac
                    00AB    437 _IEN0_URX1IE	=	0x00ab
                    00AA    438 _IEN0_URX0IE	=	0x00aa
                    00A9    439 _IEN0_ADCIE	=	0x00a9
                    00A8    440 _IEN0_RFERRIE	=	0x00a8
                    00BD    441 _IEN1_P0IE	=	0x00bd
                    00BC    442 _IEN1_T4IE	=	0x00bc
                    00BB    443 _IEN1_T3IE	=	0x00bb
                    00BA    444 _IEN1_T2IE	=	0x00ba
                    00B9    445 _IEN1_T1IE	=	0x00b9
                    00B8    446 _IEN1_DMAIE	=	0x00b8
                    00C7    447 _IRCON_STIF	=	0x00c7
                    00C5    448 _IRCON_P0IF	=	0x00c5
                    00C4    449 _IRCON_T4IF	=	0x00c4
                    00C3    450 _IRCON_T3IF	=	0x00c3
                    00C2    451 _IRCON_T2IF	=	0x00c2
                    00C1    452 _IRCON_T1IF	=	0x00c1
                    00C0    453 _IRCON_DMAIF	=	0x00c0
                    00D0    454 _P	=	0x00d0
                    00D1    455 _F1	=	0x00d1
                    00D2    456 _OV	=	0x00d2
                    00D3    457 _RS0	=	0x00d3
                    00D4    458 _RS1	=	0x00d4
                    00D5    459 _F0	=	0x00d5
                    00D6    460 _AC	=	0x00d6
                    00D7    461 _CY	=	0x00d7
                    00EC    462 _IRCON2_WDTIF	=	0x00ec
                    00EB    463 _IRCON2_P1IF	=	0x00eb
                    00EA    464 _IRCON2_UTX1IF	=	0x00ea
                    00E9    465 _IRCON2_UTX0IF	=	0x00e9
                    00E8    466 _IRCON2_P2IF	=	0x00e8
                            467 ;--------------------------------------------------------
                            468 ; overlayable register banks
                            469 ;--------------------------------------------------------
                            470 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     471 	.ds 8
                            472 ;--------------------------------------------------------
                            473 ; internal ram data
                            474 ;--------------------------------------------------------
                            475 	.area DSEG    (DATA)
                            476 ;--------------------------------------------------------
                            477 ; overlayable items in internal ram 
                            478 ;--------------------------------------------------------
                            479 	.area OSEG    (OVR,DATA)
                            480 ;--------------------------------------------------------
                            481 ; indirectly addressable internal ram data
                            482 ;--------------------------------------------------------
                            483 	.area ISEG    (DATA)
                            484 ;--------------------------------------------------------
                            485 ; absolute internal ram data
                            486 ;--------------------------------------------------------
                            487 	.area IABS    (ABS,DATA)
                            488 	.area IABS    (ABS,DATA)
                            489 ;--------------------------------------------------------
                            490 ; bit data
                            491 ;--------------------------------------------------------
                            492 	.area BSEG    (BIT)
                            493 ;--------------------------------------------------------
                            494 ; paged external ram data
                            495 ;--------------------------------------------------------
                            496 	.area PSEG    (PAG,XDATA)
                            497 ;--------------------------------------------------------
                            498 ; external ram data
                            499 ;--------------------------------------------------------
                            500 	.area XSEG    (XDATA)
                    DF02    501 _MDMCTRL0H	=	0xdf02
                    DF03    502 _MDMCTRL0L	=	0xdf03
                    DF04    503 _MDMCTRL1H	=	0xdf04
                    DF05    504 _MDMCTRL1L	=	0xdf05
                    DF06    505 _RSSIH	=	0xdf06
                    DF07    506 _RSSIL	=	0xdf07
                    DF08    507 _SYNCWORDH	=	0xdf08
                    DF09    508 _SYNCWORDL	=	0xdf09
                    DF0A    509 _TXCTRLH	=	0xdf0a
                    DF0B    510 _TXCTRLL	=	0xdf0b
                    DF0C    511 _RXCTRL0H	=	0xdf0c
                    DF0D    512 _RXCTRL0L	=	0xdf0d
                    DF0E    513 _RXCTRL1H	=	0xdf0e
                    DF0F    514 _RXCTRL1L	=	0xdf0f
                    DF10    515 _FSCTRLH	=	0xdf10
                    DF11    516 _FSCTRLL	=	0xdf11
                    DF12    517 _CSPX	=	0xdf12
                    DF13    518 _CSPY	=	0xdf13
                    DF14    519 _CSPZ	=	0xdf14
                    DF15    520 _CSPCTRL	=	0xdf15
                    DF16    521 _CSPT	=	0xdf16
                    DF17    522 _RFPWR	=	0xdf17
                    DF20    523 _FSMTCH	=	0xdf20
                    DF21    524 _FSMTCL	=	0xdf21
                    DF22    525 _MANANDH	=	0xdf22
                    DF23    526 _MANANDL	=	0xdf23
                    DF24    527 _MANORH	=	0xdf24
                    DF25    528 _MANORL	=	0xdf25
                    DF26    529 _AGCCTRLH	=	0xdf26
                    DF27    530 _AGCCTRLL	=	0xdf27
                    DF39    531 _FSMSTATE	=	0xdf39
                    DF3A    532 _ADCTSTH	=	0xdf3a
                    DF3B    533 _ADCTSTL	=	0xdf3b
                    DF3C    534 _DACTSTH	=	0xdf3c
                    DF3D    535 _DACTSTL	=	0xdf3d
                    DF43    536 _IEEE_ADDR0	=	0xdf43
                    DF44    537 _IEEE_ADDR1	=	0xdf44
                    DF45    538 _IEEE_ADDR2	=	0xdf45
                    DF46    539 _IEEE_ADDR3	=	0xdf46
                    DF47    540 _IEEE_ADDR4	=	0xdf47
                    DF48    541 _IEEE_ADDR5	=	0xdf48
                    DF49    542 _IEEE_ADDR6	=	0xdf49
                    DF4A    543 _IEEE_ADDR7	=	0xdf4a
                    DF4B    544 _PANIDH	=	0xdf4b
                    DF4C    545 _PANIDL	=	0xdf4c
                    DF4D    546 _SHORTADDRH	=	0xdf4d
                    DF4E    547 _SHORTADDRL	=	0xdf4e
                    DF4F    548 _IOCFG0	=	0xdf4f
                    DF50    549 _IOCFG1	=	0xdf50
                    DF51    550 _IOCFG2	=	0xdf51
                    DF52    551 _IOCFG3	=	0xdf52
                    DF53    552 _RXFIFOCNT	=	0xdf53
                    DF54    553 _FSMTC1	=	0xdf54
                    DF60    554 _CHVER	=	0xdf60
                    DF61    555 _CHIPID	=	0xdf61
                    DF62    556 _RFSTATUS	=	0xdf62
                    DFC1    557 _U0BUF_SHADOW	=	0xdfc1
                    DFD9    558 _RFD_SHADOW	=	0xdfd9
                    DFF9    559 _U1BUF_SHADOW	=	0xdff9
                    DFBA    560 _ADC_SHADOW	=	0xdfba
                            561 ;--------------------------------------------------------
                            562 ; absolute external ram data
                            563 ;--------------------------------------------------------
                            564 	.area XABS    (ABS,XDATA)
                            565 ;--------------------------------------------------------
                            566 ; external initialized ram data
                            567 ;--------------------------------------------------------
                            568 	.area XISEG   (XDATA)
                            569 	.area HOME    (CODE)
                            570 	.area GSINIT0 (CODE)
                            571 	.area GSINIT1 (CODE)
                            572 	.area GSINIT2 (CODE)
                            573 	.area GSINIT3 (CODE)
                            574 	.area GSINIT4 (CODE)
                            575 	.area GSINIT5 (CODE)
                            576 	.area GSINIT  (CODE)
                            577 	.area GSFINAL (CODE)
                            578 	.area CSEG    (CODE)
                            579 ;--------------------------------------------------------
                            580 ; global & static initialisations
                            581 ;--------------------------------------------------------
                            582 	.area HOME    (CODE)
                            583 	.area GSINIT  (CODE)
                            584 	.area GSFINAL (CODE)
                            585 	.area GSINIT  (CODE)
                            586 ;--------------------------------------------------------
                            587 ; Home
                            588 ;--------------------------------------------------------
                            589 	.area HOME    (CODE)
                            590 	.area HOME    (CODE)
                            591 ;--------------------------------------------------------
                            592 ; code
                            593 ;--------------------------------------------------------
                            594 	.area CSEG    (CODE)
                            595 ;------------------------------------------------------------
                            596 ;Allocation info for local variables in function 'read_new_datapacket'
                            597 ;------------------------------------------------------------
                            598 ;c                         Allocated to stack - offset 1
                            599 ;len                       Allocated to registers r5 r6 
                            600 ;sloc0                     Allocated to stack - offset 4
                            601 ;sloc1                     Allocated to stack - offset 8
                            602 ;sloc2                     Allocated to stack - offset 6
                            603 ;------------------------------------------------------------
                            604 ;	../../../core/net/rime/rudolph0.c:76: read_new_datapacket(struct rudolph0_conn *c)
                            605 ;	-----------------------------------------
                            606 ;	 function read_new_datapacket
                            607 ;	-----------------------------------------
   0000                     608 _read_new_datapacket:
                    0002    609 	ar2 = 0x02
                    0003    610 	ar3 = 0x03
                    0004    611 	ar4 = 0x04
                    0005    612 	ar5 = 0x05
                    0006    613 	ar6 = 0x06
                    0007    614 	ar7 = 0x07
                    0000    615 	ar0 = 0x00
                    0001    616 	ar1 = 0x01
   0000 C0*00               617 	push	_bp
   0002 85 81*00            618 	mov	_bp,sp
   0005 C0 82               619 	push	dpl
   0007 C0 83               620 	push	dph
   0009 C0 F0               621 	push	b
   000B E5 81               622 	mov	a,sp
   000D 24 08               623 	add	a,#0x08
   000F F5 81               624 	mov	sp,a
                            625 ;	../../../core/net/rime/rudolph0.c:78: int len = 0;
   0011 7D 00               626 	mov	r5,#0x00
   0013 7E 00               627 	mov	r6,#0x00
                            628 ;	../../../core/net/rime/rudolph0.c:80: if(c->cb->read_chunk) {
   0015 A8*00               629 	mov	r0,_bp
   0017 08                  630 	inc	r0
   0018 74 52               631 	mov	a,#0x52
   001A 26                  632 	add	a,@r0
   001B FF                  633 	mov	r7,a
   001C E4                  634 	clr	a
   001D 08                  635 	inc	r0
   001E 36                  636 	addc	a,@r0
   001F FA                  637 	mov	r2,a
   0020 08                  638 	inc	r0
   0021 86 03               639 	mov	ar3,@r0
   0023 8F 82               640 	mov	dpl,r7
   0025 8A 83               641 	mov	dph,r2
   0027 8B F0               642 	mov	b,r3
   0029 12s00r00            643 	lcall	__gptrget
   002C FF                  644 	mov	r7,a
   002D A3                  645 	inc	dptr
   002E 12s00r00            646 	lcall	__gptrget
   0031 FA                  647 	mov	r2,a
   0032 A3                  648 	inc	dptr
   0033 12s00r00            649 	lcall	__gptrget
   0036 FB                  650 	mov	r3,a
   0037 74 02               651 	mov	a,#0x02
   0039 2F                  652 	add	a,r7
   003A FF                  653 	mov	r7,a
   003B E4                  654 	clr	a
   003C 3A                  655 	addc	a,r2
   003D FA                  656 	mov	r2,a
   003E 8F 82               657 	mov	dpl,r7
   0040 8A 83               658 	mov	dph,r2
   0042 8B F0               659 	mov	b,r3
   0044 E5*00               660 	mov	a,_bp
   0046 24 04               661 	add	a,#0x04
   0048 F8                  662 	mov	r0,a
   0049 12s00r00            663 	lcall	__gptrget
   004C F6                  664 	mov	@r0,a
   004D A3                  665 	inc	dptr
   004E 12s00r00            666 	lcall	__gptrget
   0051 08                  667 	inc	r0
   0052 F6                  668 	mov	@r0,a
   0053 E5*00               669 	mov	a,_bp
   0055 24 04               670 	add	a,#0x04
   0057 F8                  671 	mov	r0,a
   0058 E6                  672 	mov	a,@r0
   0059 08                  673 	inc	r0
   005A 46                  674 	orl	a,@r0
   005B 70 03               675 	jnz	00106$
   005D 02s00rEC            676 	ljmp	00102$
   0060                     677 00106$:
                            678 ;	../../../core/net/rime/rudolph0.c:82: c->current.data, RUDOLPH0_DATASIZE);
   0060 A8*00               679 	mov	r0,_bp
   0062 08                  680 	inc	r0
   0063 74 58               681 	mov	a,#0x58
   0065 26                  682 	add	a,@r0
   0066 FC                  683 	mov	r4,a
   0067 E4                  684 	clr	a
   0068 08                  685 	inc	r0
   0069 36                  686 	addc	a,@r0
   006A FA                  687 	mov	r2,a
   006B 08                  688 	inc	r0
   006C 86 03               689 	mov	ar3,@r0
   006E E5*00               690 	mov	a,_bp
   0070 24 06               691 	add	a,#0x06
   0072 F8                  692 	mov	r0,a
   0073 74 05               693 	mov	a,#0x05
   0075 2C                  694 	add	a,r4
   0076 F6                  695 	mov	@r0,a
   0077 E4                  696 	clr	a
   0078 3A                  697 	addc	a,r2
   0079 08                  698 	inc	r0
   007A F6                  699 	mov	@r0,a
   007B 08                  700 	inc	r0
   007C A6 03               701 	mov	@r0,ar3
                            702 ;	../../../core/net/rime/rudolph0.c:81: len = c->cb->read_chunk(c, c->current.h.chunk * RUDOLPH0_DATASIZE,
   007E 74 02               703 	mov	a,#0x02
   0080 2C                  704 	add	a,r4
   0081 FF                  705 	mov	r7,a
   0082 E4                  706 	clr	a
   0083 3A                  707 	addc	a,r2
   0084 FA                  708 	mov	r2,a
   0085 8F 82               709 	mov	dpl,r7
   0087 8A 83               710 	mov	dph,r2
   0089 8B F0               711 	mov	b,r3
   008B 12s00r00            712 	lcall	__gptrget
   008E FF                  713 	mov	r7,a
   008F A3                  714 	inc	dptr
   0090 12s00r00            715 	lcall	__gptrget
   0093 54 03               716 	anl	a,#0x03
   0095 A2 E0               717 	mov	c,acc.0
   0097 CF                  718 	xch	a,r7
   0098 13                  719 	rrc	a
   0099 CF                  720 	xch	a,r7
   009A 13                  721 	rrc	a
   009B A2 E0               722 	mov	c,acc.0
   009D CF                  723 	xch	a,r7
   009E 13                  724 	rrc	a
   009F CF                  725 	xch	a,r7
   00A0 13                  726 	rrc	a
   00A1 CF                  727 	xch	a,r7
   00A2 FA                  728 	mov	r2,a
   00A3 74 40               729 	mov	a,#0x40
   00A5 C0 E0               730 	push	acc
   00A7 E4                  731 	clr	a
   00A8 C0 E0               732 	push	acc
   00AA E5*00               733 	mov	a,_bp
   00AC 24 06               734 	add	a,#0x06
   00AE F8                  735 	mov	r0,a
   00AF E6                  736 	mov	a,@r0
   00B0 C0 E0               737 	push	acc
   00B2 08                  738 	inc	r0
   00B3 E6                  739 	mov	a,@r0
   00B4 C0 E0               740 	push	acc
   00B6 08                  741 	inc	r0
   00B7 E6                  742 	mov	a,@r0
   00B8 C0 E0               743 	push	acc
   00BA C0 07               744 	push	ar7
   00BC C0 02               745 	push	ar2
   00BE 74rDE               746 	mov	a,#00107$
   00C0 C0 E0               747 	push	acc
   00C2 74s00               748 	mov	a,#(00107$ >> 8)
   00C4 C0 E0               749 	push	acc
   00C6 E5*00               750 	mov	a,_bp
   00C8 24 04               751 	add	a,#0x04
   00CA F8                  752 	mov	r0,a
   00CB E6                  753 	mov	a,@r0
   00CC C0 E0               754 	push	acc
   00CE 08                  755 	inc	r0
   00CF E6                  756 	mov	a,@r0
   00D0 C0 E0               757 	push	acc
   00D2 A8*00               758 	mov	r0,_bp
   00D4 08                  759 	inc	r0
   00D5 86 82               760 	mov	dpl,@r0
   00D7 08                  761 	inc	r0
   00D8 86 83               762 	mov	dph,@r0
   00DA 08                  763 	inc	r0
   00DB 86 F0               764 	mov	b,@r0
   00DD 22                  765 	ret
   00DE                     766 00107$:
   00DE AA 82               767 	mov	r2,dpl
   00E0 AB 83               768 	mov	r3,dph
   00E2 E5 81               769 	mov	a,sp
   00E4 24 F9               770 	add	a,#0xf9
   00E6 F5 81               771 	mov	sp,a
   00E8 8A 05               772 	mov	ar5,r2
   00EA 8B 06               773 	mov	ar6,r3
   00EC                     774 00102$:
                            775 ;	../../../core/net/rime/rudolph0.c:84: c->current.datalen = len;
   00EC A8*00               776 	mov	r0,_bp
   00EE 08                  777 	inc	r0
   00EF 74 58               778 	mov	a,#0x58
   00F1 26                  779 	add	a,@r0
   00F2 FA                  780 	mov	r2,a
   00F3 E4                  781 	clr	a
   00F4 08                  782 	inc	r0
   00F5 36                  783 	addc	a,@r0
   00F6 FB                  784 	mov	r3,a
   00F7 08                  785 	inc	r0
   00F8 86 04               786 	mov	ar4,@r0
   00FA 74 04               787 	mov	a,#0x04
   00FC 2A                  788 	add	a,r2
   00FD FA                  789 	mov	r2,a
   00FE E4                  790 	clr	a
   00FF 3B                  791 	addc	a,r3
   0100 FB                  792 	mov	r3,a
   0101 8A 82               793 	mov	dpl,r2
   0103 8B 83               794 	mov	dph,r3
   0105 8C F0               795 	mov	b,r4
   0107 ED                  796 	mov	a,r5
   0108 12s00r00            797 	lcall	__gptrput
   010B 85*00 81            798 	mov	sp,_bp
   010E D0*00               799 	pop	_bp
   0110 22                  800 	ret
                            801 ;------------------------------------------------------------
                            802 ;Allocation info for local variables in function 'send_nack'
                            803 ;------------------------------------------------------------
                            804 ;c                         Allocated to stack - offset 1
                            805 ;hdr                       Allocated to stack - offset 4
                            806 ;sloc0                     Allocated to stack - offset 7
                            807 ;------------------------------------------------------------
                            808 ;	../../../core/net/rime/rudolph0.c:90: send_nack(struct rudolph0_conn *c)
                            809 ;	-----------------------------------------
                            810 ;	 function send_nack
                            811 ;	-----------------------------------------
   0111                     812 _send_nack:
   0111 C0*00               813 	push	_bp
   0113 85 81*00            814 	mov	_bp,sp
   0116 C0 82               815 	push	dpl
   0118 C0 83               816 	push	dph
   011A C0 F0               817 	push	b
   011C E5 81               818 	mov	a,sp
   011E 24 09               819 	add	a,#0x09
   0120 F5 81               820 	mov	sp,a
                            821 ;	../../../core/net/rime/rudolph0.c:93: packetbuf_clear();
   0122 12s00r00            822 	lcall	_packetbuf_clear
                            823 ;	../../../core/net/rime/rudolph0.c:94: packetbuf_hdralloc(sizeof(struct rudolph0_hdr));
   0125 90 00 04            824 	mov	dptr,#0x0004
   0128 12s00r00            825 	lcall	_packetbuf_hdralloc
                            826 ;	../../../core/net/rime/rudolph0.c:95: hdr = packetbuf_hdrptr();
   012B 12s00r00            827 	lcall	_packetbuf_hdrptr
   012E AD 82               828 	mov	r5,dpl
   0130 AE 83               829 	mov	r6,dph
   0132 AF F0               830 	mov	r7,b
   0134 E5*00               831 	mov	a,_bp
   0136 24 04               832 	add	a,#0x04
   0138 F8                  833 	mov	r0,a
   0139 A6 05               834 	mov	@r0,ar5
   013B 08                  835 	inc	r0
   013C A6 06               836 	mov	@r0,ar6
   013E 08                  837 	inc	r0
   013F A6 07               838 	mov	@r0,ar7
                            839 ;	../../../core/net/rime/rudolph0.c:97: hdr->type = TYPE_NACK;
   0141 E5*00               840 	mov	a,_bp
   0143 24 04               841 	add	a,#0x04
   0145 F8                  842 	mov	r0,a
   0146 86 82               843 	mov	dpl,@r0
   0148 08                  844 	inc	r0
   0149 86 83               845 	mov	dph,@r0
   014B 08                  846 	inc	r0
   014C 86 F0               847 	mov	b,@r0
   014E 74 01               848 	mov	a,#0x01
   0150 12s00r00            849 	lcall	__gptrput
                            850 ;	../../../core/net/rime/rudolph0.c:98: hdr->version = c->current.h.version;
   0153 E5*00               851 	mov	a,_bp
   0155 24 04               852 	add	a,#0x04
   0157 F8                  853 	mov	r0,a
   0158 E5*00               854 	mov	a,_bp
   015A 24 07               855 	add	a,#0x07
   015C F9                  856 	mov	r1,a
   015D 74 01               857 	mov	a,#0x01
   015F 26                  858 	add	a,@r0
   0160 F7                  859 	mov	@r1,a
   0161 E4                  860 	clr	a
   0162 08                  861 	inc	r0
   0163 36                  862 	addc	a,@r0
   0164 09                  863 	inc	r1
   0165 F7                  864 	mov	@r1,a
   0166 08                  865 	inc	r0
   0167 09                  866 	inc	r1
   0168 E6                  867 	mov	a,@r0
   0169 F7                  868 	mov	@r1,a
   016A A8*00               869 	mov	r0,_bp
   016C 08                  870 	inc	r0
   016D 74 58               871 	mov	a,#0x58
   016F 26                  872 	add	a,@r0
   0170 FD                  873 	mov	r5,a
   0171 E4                  874 	clr	a
   0172 08                  875 	inc	r0
   0173 36                  876 	addc	a,@r0
   0174 FE                  877 	mov	r6,a
   0175 08                  878 	inc	r0
   0176 86 07               879 	mov	ar7,@r0
   0178 74 01               880 	mov	a,#0x01
   017A 2D                  881 	add	a,r5
   017B FA                  882 	mov	r2,a
   017C E4                  883 	clr	a
   017D 3E                  884 	addc	a,r6
   017E FB                  885 	mov	r3,a
   017F 8F 04               886 	mov	ar4,r7
   0181 8A 82               887 	mov	dpl,r2
   0183 8B 83               888 	mov	dph,r3
   0185 8C F0               889 	mov	b,r4
   0187 12s00r00            890 	lcall	__gptrget
   018A FA                  891 	mov	r2,a
   018B E5*00               892 	mov	a,_bp
   018D 24 07               893 	add	a,#0x07
   018F F8                  894 	mov	r0,a
   0190 86 82               895 	mov	dpl,@r0
   0192 08                  896 	inc	r0
   0193 86 83               897 	mov	dph,@r0
   0195 08                  898 	inc	r0
   0196 86 F0               899 	mov	b,@r0
   0198 EA                  900 	mov	a,r2
   0199 12s00r00            901 	lcall	__gptrput
                            902 ;	../../../core/net/rime/rudolph0.c:99: hdr->chunk = c->current.h.chunk;
   019C E5*00               903 	mov	a,_bp
   019E 24 04               904 	add	a,#0x04
   01A0 F8                  905 	mov	r0,a
   01A1 74 02               906 	mov	a,#0x02
   01A3 26                  907 	add	a,@r0
   01A4 FA                  908 	mov	r2,a
   01A5 E4                  909 	clr	a
   01A6 08                  910 	inc	r0
   01A7 36                  911 	addc	a,@r0
   01A8 FB                  912 	mov	r3,a
   01A9 08                  913 	inc	r0
   01AA 86 04               914 	mov	ar4,@r0
   01AC 74 02               915 	mov	a,#0x02
   01AE 2D                  916 	add	a,r5
   01AF FD                  917 	mov	r5,a
   01B0 E4                  918 	clr	a
   01B1 3E                  919 	addc	a,r6
   01B2 FE                  920 	mov	r6,a
   01B3 8D 82               921 	mov	dpl,r5
   01B5 8E 83               922 	mov	dph,r6
   01B7 8F F0               923 	mov	b,r7
   01B9 12s00r00            924 	lcall	__gptrget
   01BC FD                  925 	mov	r5,a
   01BD A3                  926 	inc	dptr
   01BE 12s00r00            927 	lcall	__gptrget
   01C1 FE                  928 	mov	r6,a
   01C2 8A 82               929 	mov	dpl,r2
   01C4 8B 83               930 	mov	dph,r3
   01C6 8C F0               931 	mov	b,r4
   01C8 ED                  932 	mov	a,r5
   01C9 12s00r00            933 	lcall	__gptrput
   01CC A3                  934 	inc	dptr
   01CD EE                  935 	mov	a,r6
   01CE 12s00r00            936 	lcall	__gptrput
                            937 ;	../../../core/net/rime/rudolph0.c:102: polite_send(&c->nackc, c->send_interval / 2, sizeof(struct rudolph0_hdr));
   01D1 A8*00               938 	mov	r0,_bp
   01D3 08                  939 	inc	r0
   01D4 74 55               940 	mov	a,#0x55
   01D6 26                  941 	add	a,@r0
   01D7 FA                  942 	mov	r2,a
   01D8 E4                  943 	clr	a
   01D9 08                  944 	inc	r0
   01DA 36                  945 	addc	a,@r0
   01DB FB                  946 	mov	r3,a
   01DC 08                  947 	inc	r0
   01DD 86 04               948 	mov	ar4,@r0
   01DF 8A 82               949 	mov	dpl,r2
   01E1 8B 83               950 	mov	dph,r3
   01E3 8C F0               951 	mov	b,r4
   01E5 12s00r00            952 	lcall	__gptrget
   01E8 FA                  953 	mov	r2,a
   01E9 A3                  954 	inc	dptr
   01EA 12s00r00            955 	lcall	__gptrget
   01ED C3                  956 	clr	c
   01EE 13                  957 	rrc	a
   01EF CA                  958 	xch	a,r2
   01F0 13                  959 	rrc	a
   01F1 CA                  960 	xch	a,r2
   01F2 FB                  961 	mov	r3,a
   01F3 A8*00               962 	mov	r0,_bp
   01F5 08                  963 	inc	r0
   01F6 74 2A               964 	mov	a,#0x2A
   01F8 26                  965 	add	a,@r0
   01F9 FC                  966 	mov	r4,a
   01FA E4                  967 	clr	a
   01FB 08                  968 	inc	r0
   01FC 36                  969 	addc	a,@r0
   01FD FD                  970 	mov	r5,a
   01FE 08                  971 	inc	r0
   01FF 86 06               972 	mov	ar6,@r0
   0201 74 04               973 	mov	a,#0x04
   0203 C0 E0               974 	push	acc
   0205 C0 02               975 	push	ar2
   0207 C0 03               976 	push	ar3
   0209 8C 82               977 	mov	dpl,r4
   020B 8D 83               978 	mov	dph,r5
   020D 8E F0               979 	mov	b,r6
   020F 12s00r00            980 	lcall	_polite_send
   0212 15 81               981 	dec	sp
   0214 15 81               982 	dec	sp
   0216 15 81               983 	dec	sp
   0218 85*00 81            984 	mov	sp,_bp
   021B D0*00               985 	pop	_bp
   021D 22                  986 	ret
                            987 ;------------------------------------------------------------
                            988 ;Allocation info for local variables in function 'sent'
                            989 ;------------------------------------------------------------
                            990 ;stbroadcast               Allocated to stack - offset 1
                            991 ;c                         Allocated to registers 
                            992 ;sloc0                     Allocated to stack - offset 7
                            993 ;------------------------------------------------------------
                            994 ;	../../../core/net/rime/rudolph0.c:106: sent(struct stbroadcast_conn *stbroadcast)
                            995 ;	-----------------------------------------
                            996 ;	 function sent
                            997 ;	-----------------------------------------
   021E                     998 _sent:
   021E C0*00               999 	push	_bp
   0220 85 81*00           1000 	mov	_bp,sp
   0223 C0 82              1001 	push	dpl
   0225 C0 83              1002 	push	dph
   0227 C0 F0              1003 	push	b
                           1004 ;	../../../core/net/rime/rudolph0.c:110: if(c->current.datalen == RUDOLPH0_DATASIZE) {
   0229 A8*00              1005 	mov	r0,_bp
   022B 08                 1006 	inc	r0
   022C 74 58              1007 	mov	a,#0x58
   022E 26                 1008 	add	a,@r0
   022F FD                 1009 	mov	r5,a
   0230 E4                 1010 	clr	a
   0231 08                 1011 	inc	r0
   0232 36                 1012 	addc	a,@r0
   0233 FE                 1013 	mov	r6,a
   0234 08                 1014 	inc	r0
   0235 86 07              1015 	mov	ar7,@r0
   0237 74 04              1016 	mov	a,#0x04
   0239 2D                 1017 	add	a,r5
   023A FA                 1018 	mov	r2,a
   023B E4                 1019 	clr	a
   023C 3E                 1020 	addc	a,r6
   023D FB                 1021 	mov	r3,a
   023E 8F 04              1022 	mov	ar4,r7
   0240 8A 82              1023 	mov	dpl,r2
   0242 8B 83              1024 	mov	dph,r3
   0244 8C F0              1025 	mov	b,r4
   0246 12s00r00           1026 	lcall	__gptrget
   0249 FB                 1027 	mov	r3,a
   024A BB 40 3A           1028 	cjne	r3,#0x40,00102$
                           1029 ;	../../../core/net/rime/rudolph0.c:111: c->current.h.chunk++;
   024D 74 02              1030 	mov	a,#0x02
   024F 2D                 1031 	add	a,r5
   0250 FD                 1032 	mov	r5,a
   0251 E4                 1033 	clr	a
   0252 3E                 1034 	addc	a,r6
   0253 FE                 1035 	mov	r6,a
   0254 8D 82              1036 	mov	dpl,r5
   0256 8E 83              1037 	mov	dph,r6
   0258 8F F0              1038 	mov	b,r7
   025A 12s00r00           1039 	lcall	__gptrget
   025D FB                 1040 	mov	r3,a
   025E A3                 1041 	inc	dptr
   025F 12s00r00           1042 	lcall	__gptrget
   0262 FC                 1043 	mov	r4,a
   0263 0B                 1044 	inc	r3
   0264 BB 00 01           1045 	cjne	r3,#0x00,00109$
   0267 0C                 1046 	inc	r4
   0268                    1047 00109$:
   0268 8D 82              1048 	mov	dpl,r5
   026A 8E 83              1049 	mov	dph,r6
   026C 8F F0              1050 	mov	b,r7
   026E EB                 1051 	mov	a,r3
   026F 12s00r00           1052 	lcall	__gptrput
   0272 A3                 1053 	inc	dptr
   0273 EC                 1054 	mov	a,r4
   0274 12s00r00           1055 	lcall	__gptrput
                           1056 ;	../../../core/net/rime/rudolph0.c:113: read_new_datapacket(c);
   0277 A8*00              1057 	mov	r0,_bp
   0279 08                 1058 	inc	r0
   027A 86 82              1059 	mov	dpl,@r0
   027C 08                 1060 	inc	r0
   027D 86 83              1061 	mov	dph,@r0
   027F 08                 1062 	inc	r0
   0280 86 F0              1063 	mov	b,@r0
   0282 12s00r00           1064 	lcall	_read_new_datapacket
   0285 80 19              1065 	sjmp	00104$
   0287                    1066 00102$:
                           1067 ;	../../../core/net/rime/rudolph0.c:115: stbroadcast_set_timer(&c->c, STEADY_TIME);
   0287 E4                 1068 	clr	a
   0288 C0 E0              1069 	push	acc
   028A 74 01              1070 	mov	a,#0x01
   028C C0 E0              1071 	push	acc
   028E A8*00              1072 	mov	r0,_bp
   0290 08                 1073 	inc	r0
   0291 86 82              1074 	mov	dpl,@r0
   0293 08                 1075 	inc	r0
   0294 86 83              1076 	mov	dph,@r0
   0296 08                 1077 	inc	r0
   0297 86 F0              1078 	mov	b,@r0
   0299 12s00r00           1079 	lcall	_stbroadcast_set_timer
   029C 15 81              1080 	dec	sp
   029E 15 81              1081 	dec	sp
   02A0                    1082 00104$:
   02A0 85*00 81           1083 	mov	sp,_bp
   02A3 D0*00              1084 	pop	_bp
   02A5 22                 1085 	ret
                           1086 ;------------------------------------------------------------
                           1087 ;Allocation info for local variables in function 'recv'
                           1088 ;------------------------------------------------------------
                           1089 ;stbroadcast               Allocated to stack - offset 1
                           1090 ;c                         Allocated to stack - offset 4
                           1091 ;p                         Allocated to stack - offset 7
                           1092 ;sloc0                     Allocated to stack - offset 10
                           1093 ;sloc1                     Allocated to stack - offset 13
                           1094 ;sloc2                     Allocated to stack - offset 14
                           1095 ;sloc3                     Allocated to stack - offset 17
                           1096 ;sloc4                     Allocated to stack - offset 19
                           1097 ;sloc5                     Allocated to stack - offset 19
                           1098 ;------------------------------------------------------------
                           1099 ;	../../../core/net/rime/rudolph0.c:122: recv(struct stbroadcast_conn *stbroadcast)
                           1100 ;	-----------------------------------------
                           1101 ;	 function recv
                           1102 ;	-----------------------------------------
   02A6                    1103 _recv:
   02A6 C0*00              1104 	push	_bp
   02A8 85 81*00           1105 	mov	_bp,sp
   02AB C0 82              1106 	push	dpl
   02AD C0 83              1107 	push	dph
   02AF C0 F0              1108 	push	b
   02B1 E5 81              1109 	mov	a,sp
   02B3 24 15              1110 	add	a,#0x15
   02B5 F5 81              1111 	mov	sp,a
                           1112 ;	../../../core/net/rime/rudolph0.c:124: struct rudolph0_conn *c = (struct rudolph0_conn *)stbroadcast;
   02B7 A8*00              1113 	mov	r0,_bp
   02B9 08                 1114 	inc	r0
   02BA E5*00              1115 	mov	a,_bp
   02BC 24 04              1116 	add	a,#0x04
   02BE F9                 1117 	mov	r1,a
   02BF E6                 1118 	mov	a,@r0
   02C0 F7                 1119 	mov	@r1,a
   02C1 08                 1120 	inc	r0
   02C2 09                 1121 	inc	r1
   02C3 E6                 1122 	mov	a,@r0
   02C4 F7                 1123 	mov	@r1,a
   02C5 08                 1124 	inc	r0
   02C6 09                 1125 	inc	r1
   02C7 E6                 1126 	mov	a,@r0
   02C8 F7                 1127 	mov	@r1,a
                           1128 ;	../../../core/net/rime/rudolph0.c:125: struct rudolph0_datapacket *p = packetbuf_dataptr();
   02C9 12s00r00           1129 	lcall	_packetbuf_dataptr
   02CC AD 82              1130 	mov	r5,dpl
   02CE AE 83              1131 	mov	r6,dph
   02D0 AF F0              1132 	mov	r7,b
   02D2 E5*00              1133 	mov	a,_bp
   02D4 24 07              1134 	add	a,#0x07
   02D6 F8                 1135 	mov	r0,a
   02D7 A6 05              1136 	mov	@r0,ar5
   02D9 08                 1137 	inc	r0
   02DA A6 06              1138 	mov	@r0,ar6
   02DC 08                 1139 	inc	r0
   02DD A6 07              1140 	mov	@r0,ar7
                           1141 ;	../../../core/net/rime/rudolph0.c:127: if(p->h.type == TYPE_DATA) {
   02DF E5*00              1142 	mov	a,_bp
   02E1 24 07              1143 	add	a,#0x07
   02E3 F8                 1144 	mov	r0,a
   02E4 86 82              1145 	mov	dpl,@r0
   02E6 08                 1146 	inc	r0
   02E7 86 83              1147 	mov	dph,@r0
   02E9 08                 1148 	inc	r0
   02EA 86 F0              1149 	mov	b,@r0
   02EC 12s00r00           1150 	lcall	__gptrget
   02EF 60 03              1151 	jz	00128$
   02F1 02s07r4B           1152 	ljmp	00119$
   02F4                    1153 00128$:
                           1154 ;	../../../core/net/rime/rudolph0.c:128: if(c->current.h.version != p->h.version) {
   02F4 A8*00              1155 	mov	r0,_bp
   02F6 08                 1156 	inc	r0
   02F7 E5*00              1157 	mov	a,_bp
   02F9 24 0E              1158 	add	a,#0x0e
   02FB F9                 1159 	mov	r1,a
   02FC 74 58              1160 	mov	a,#0x58
   02FE 26                 1161 	add	a,@r0
   02FF F7                 1162 	mov	@r1,a
   0300 E4                 1163 	clr	a
   0301 08                 1164 	inc	r0
   0302 36                 1165 	addc	a,@r0
   0303 09                 1166 	inc	r1
   0304 F7                 1167 	mov	@r1,a
   0305 08                 1168 	inc	r0
   0306 09                 1169 	inc	r1
   0307 E6                 1170 	mov	a,@r0
   0308 F7                 1171 	mov	@r1,a
   0309 E5*00              1172 	mov	a,_bp
   030B 24 0E              1173 	add	a,#0x0e
   030D F8                 1174 	mov	r0,a
   030E 74 01              1175 	mov	a,#0x01
   0310 26                 1176 	add	a,@r0
   0311 FA                 1177 	mov	r2,a
   0312 E4                 1178 	clr	a
   0313 08                 1179 	inc	r0
   0314 36                 1180 	addc	a,@r0
   0315 FB                 1181 	mov	r3,a
   0316 08                 1182 	inc	r0
   0317 86 04              1183 	mov	ar4,@r0
   0319 8A 82              1184 	mov	dpl,r2
   031B 8B 83              1185 	mov	dph,r3
   031D 8C F0              1186 	mov	b,r4
   031F E5*00              1187 	mov	a,_bp
   0321 24 0D              1188 	add	a,#0x0d
   0323 F8                 1189 	mov	r0,a
   0324 12s00r00           1190 	lcall	__gptrget
   0327 F6                 1191 	mov	@r0,a
   0328 E5*00              1192 	mov	a,_bp
   032A 24 07              1193 	add	a,#0x07
   032C F8                 1194 	mov	r0,a
   032D 74 01              1195 	mov	a,#0x01
   032F 26                 1196 	add	a,@r0
   0330 FE                 1197 	mov	r6,a
   0331 E4                 1198 	clr	a
   0332 08                 1199 	inc	r0
   0333 36                 1200 	addc	a,@r0
   0334 FF                 1201 	mov	r7,a
   0335 08                 1202 	inc	r0
   0336 86 05              1203 	mov	ar5,@r0
   0338 8E 82              1204 	mov	dpl,r6
   033A 8F 83              1205 	mov	dph,r7
   033C 8D F0              1206 	mov	b,r5
   033E 12s00r00           1207 	lcall	__gptrget
   0341 FD                 1208 	mov	r5,a
   0342 E5*00              1209 	mov	a,_bp
   0344 24 0D              1210 	add	a,#0x0d
   0346 F8                 1211 	mov	r0,a
   0347 E6                 1212 	mov	a,@r0
   0348 B5 05 04           1213 	cjne	a,ar5,00129$
   034B 74 01              1214 	mov	a,#0x01
   034D 80 01              1215 	sjmp	00130$
   034F                    1216 00129$:
   034F E4                 1217 	clr	a
   0350                    1218 00130$:
   0350 FE                 1219 	mov	r6,a
   0351 60 03              1220 	jz	00131$
   0353 02s05r12           1221 	ljmp	00115$
   0356                    1222 00131$:
                           1223 ;	../../../core/net/rime/rudolph0.c:130: c->current.h.version = p->h.version;
   0356 8A 82              1224 	mov	dpl,r2
   0358 8B 83              1225 	mov	dph,r3
   035A 8C F0              1226 	mov	b,r4
   035C ED                 1227 	mov	a,r5
   035D 12s00r00           1228 	lcall	__gptrput
                           1229 ;	../../../core/net/rime/rudolph0.c:131: c->current.h.chunk = 0;
   0360 E5*00              1230 	mov	a,_bp
   0362 24 0E              1231 	add	a,#0x0e
   0364 F8                 1232 	mov	r0,a
   0365 74 02              1233 	mov	a,#0x02
   0367 26                 1234 	add	a,@r0
   0368 FD                 1235 	mov	r5,a
   0369 E4                 1236 	clr	a
   036A 08                 1237 	inc	r0
   036B 36                 1238 	addc	a,@r0
   036C FF                 1239 	mov	r7,a
   036D 08                 1240 	inc	r0
   036E 86 02              1241 	mov	ar2,@r0
   0370 8D 82              1242 	mov	dpl,r5
   0372 8F 83              1243 	mov	dph,r7
   0374 8A F0              1244 	mov	b,r2
   0376 E4                 1245 	clr	a
   0377 12s00r00           1246 	lcall	__gptrput
   037A A3                 1247 	inc	dptr
   037B E4                 1248 	clr	a
   037C 12s00r00           1249 	lcall	__gptrput
                           1250 ;	../../../core/net/rime/rudolph0.c:132: c->cb->write_chunk(c, 0, RUDOLPH0_FLAG_NEWFILE, p->data, 0);
   037F A8*00              1251 	mov	r0,_bp
   0381 08                 1252 	inc	r0
   0382 74 52              1253 	mov	a,#0x52
   0384 26                 1254 	add	a,@r0
   0385 FA                 1255 	mov	r2,a
   0386 E4                 1256 	clr	a
   0387 08                 1257 	inc	r0
   0388 36                 1258 	addc	a,@r0
   0389 FB                 1259 	mov	r3,a
   038A 08                 1260 	inc	r0
   038B 86 04              1261 	mov	ar4,@r0
   038D 8A 82              1262 	mov	dpl,r2
   038F 8B 83              1263 	mov	dph,r3
   0391 8C F0              1264 	mov	b,r4
   0393 12s00r00           1265 	lcall	__gptrget
   0396 FA                 1266 	mov	r2,a
   0397 A3                 1267 	inc	dptr
   0398 12s00r00           1268 	lcall	__gptrget
   039B FB                 1269 	mov	r3,a
   039C A3                 1270 	inc	dptr
   039D 12s00r00           1271 	lcall	__gptrget
   03A0 FC                 1272 	mov	r4,a
   03A1 8A 82              1273 	mov	dpl,r2
   03A3 8B 83              1274 	mov	dph,r3
   03A5 8C F0              1275 	mov	b,r4
   03A7 12s00r00           1276 	lcall	__gptrget
   03AA FA                 1277 	mov	r2,a
   03AB A3                 1278 	inc	dptr
   03AC 12s00r00           1279 	lcall	__gptrget
   03AF FB                 1280 	mov	r3,a
   03B0 E5*00              1281 	mov	a,_bp
   03B2 24 07              1282 	add	a,#0x07
   03B4 F8                 1283 	mov	r0,a
   03B5 74 05              1284 	mov	a,#0x05
   03B7 26                 1285 	add	a,@r0
   03B8 FC                 1286 	mov	r4,a
   03B9 E4                 1287 	clr	a
   03BA 08                 1288 	inc	r0
   03BB 36                 1289 	addc	a,@r0
   03BC FD                 1290 	mov	r5,a
   03BD 08                 1291 	inc	r0
   03BE 86 07              1292 	mov	ar7,@r0
   03C0 C0 02              1293 	push	ar2
   03C2 C0 03              1294 	push	ar3
   03C4 E4                 1295 	clr	a
   03C5 C0 E0              1296 	push	acc
   03C7 C0 E0              1297 	push	acc
   03C9 C0 04              1298 	push	ar4
   03CB C0 05              1299 	push	ar5
   03CD C0 07              1300 	push	ar7
   03CF 74 01              1301 	mov	a,#0x01
   03D1 C0 E0              1302 	push	acc
   03D3 E4                 1303 	clr	a
   03D4 C0 E0              1304 	push	acc
   03D6 E4                 1305 	clr	a
   03D7 C0 E0              1306 	push	acc
   03D9 C0 E0              1307 	push	acc
   03DB 74rF3              1308 	mov	a,#00132$
   03DD C0 E0              1309 	push	acc
   03DF 74s03              1310 	mov	a,#(00132$ >> 8)
   03E1 C0 E0              1311 	push	acc
   03E3 C0 02              1312 	push	ar2
   03E5 C0 03              1313 	push	ar3
   03E7 A8*00              1314 	mov	r0,_bp
   03E9 08                 1315 	inc	r0
   03EA 86 82              1316 	mov	dpl,@r0
   03EC 08                 1317 	inc	r0
   03ED 86 83              1318 	mov	dph,@r0
   03EF 08                 1319 	inc	r0
   03F0 86 F0              1320 	mov	b,@r0
   03F2 22                 1321 	ret
   03F3                    1322 00132$:
   03F3 E5 81              1323 	mov	a,sp
   03F5 24 F7              1324 	add	a,#0xf7
   03F7 F5 81              1325 	mov	sp,a
   03F9 D0 03              1326 	pop	ar3
   03FB D0 02              1327 	pop	ar2
                           1328 ;	../../../core/net/rime/rudolph0.c:133: if(p->h.chunk != 0) {
   03FD E5*00              1329 	mov	a,_bp
   03FF 24 07              1330 	add	a,#0x07
   0401 F8                 1331 	mov	r0,a
   0402 74 02              1332 	mov	a,#0x02
   0404 26                 1333 	add	a,@r0
   0405 FA                 1334 	mov	r2,a
   0406 E4                 1335 	clr	a
   0407 08                 1336 	inc	r0
   0408 36                 1337 	addc	a,@r0
   0409 FB                 1338 	mov	r3,a
   040A 08                 1339 	inc	r0
   040B 86 04              1340 	mov	ar4,@r0
   040D 8A 82              1341 	mov	dpl,r2
   040F 8B 83              1342 	mov	dph,r3
   0411 8C F0              1343 	mov	b,r4
   0413 12s00r00           1344 	lcall	__gptrget
   0416 FA                 1345 	mov	r2,a
   0417 A3                 1346 	inc	dptr
   0418 12s00r00           1347 	lcall	__gptrget
   041B FB                 1348 	mov	r3,a
   041C 4A                 1349 	orl	a,r2
   041D 60 11              1350 	jz	00102$
                           1351 ;	../../../core/net/rime/rudolph0.c:134: send_nack(c);
   041F A8*00              1352 	mov	r0,_bp
   0421 08                 1353 	inc	r0
   0422 86 82              1354 	mov	dpl,@r0
   0424 08                 1355 	inc	r0
   0425 86 83              1356 	mov	dph,@r0
   0427 08                 1357 	inc	r0
   0428 86 F0              1358 	mov	b,@r0
   042A 12s01r11           1359 	lcall	_send_nack
   042D 02s07r4B           1360 	ljmp	00119$
   0430                    1361 00102$:
                           1362 ;	../../../core/net/rime/rudolph0.c:136: c->cb->write_chunk(c, 0, RUDOLPH0_FLAG_NONE, p->data, p->datalen);
   0430 A8*00              1363 	mov	r0,_bp
   0432 08                 1364 	inc	r0
   0433 74 52              1365 	mov	a,#0x52
   0435 26                 1366 	add	a,@r0
   0436 FA                 1367 	mov	r2,a
   0437 E4                 1368 	clr	a
   0438 08                 1369 	inc	r0
   0439 36                 1370 	addc	a,@r0
   043A FB                 1371 	mov	r3,a
   043B 08                 1372 	inc	r0
   043C 86 04              1373 	mov	ar4,@r0
   043E 8A 82              1374 	mov	dpl,r2
   0440 8B 83              1375 	mov	dph,r3
   0442 8C F0              1376 	mov	b,r4
   0444 12s00r00           1377 	lcall	__gptrget
   0447 FA                 1378 	mov	r2,a
   0448 A3                 1379 	inc	dptr
   0449 12s00r00           1380 	lcall	__gptrget
   044C FB                 1381 	mov	r3,a
   044D A3                 1382 	inc	dptr
   044E 12s00r00           1383 	lcall	__gptrget
   0451 FC                 1384 	mov	r4,a
   0452 8A 82              1385 	mov	dpl,r2
   0454 8B 83              1386 	mov	dph,r3
   0456 8C F0              1387 	mov	b,r4
   0458 12s00r00           1388 	lcall	__gptrget
   045B FA                 1389 	mov	r2,a
   045C A3                 1390 	inc	dptr
   045D 12s00r00           1391 	lcall	__gptrget
   0460 FB                 1392 	mov	r3,a
   0461 E5*00              1393 	mov	a,_bp
   0463 24 07              1394 	add	a,#0x07
   0465 F8                 1395 	mov	r0,a
   0466 74 04              1396 	mov	a,#0x04
   0468 26                 1397 	add	a,@r0
   0469 FC                 1398 	mov	r4,a
   046A E4                 1399 	clr	a
   046B 08                 1400 	inc	r0
   046C 36                 1401 	addc	a,@r0
   046D FD                 1402 	mov	r5,a
   046E 08                 1403 	inc	r0
   046F 86 07              1404 	mov	ar7,@r0
   0471 8C 82              1405 	mov	dpl,r4
   0473 8D 83              1406 	mov	dph,r5
   0475 8F F0              1407 	mov	b,r7
   0477 12s00r00           1408 	lcall	__gptrget
   047A FC                 1409 	mov	r4,a
   047B E5*00              1410 	mov	a,_bp
   047D 24 0A              1411 	add	a,#0x0a
   047F F8                 1412 	mov	r0,a
   0480 A6 04              1413 	mov	@r0,ar4
   0482 08                 1414 	inc	r0
   0483 76 00              1415 	mov	@r0,#0x00
   0485 E5*00              1416 	mov	a,_bp
   0487 24 07              1417 	add	a,#0x07
   0489 F8                 1418 	mov	r0,a
   048A 74 05              1419 	mov	a,#0x05
   048C 26                 1420 	add	a,@r0
   048D FF                 1421 	mov	r7,a
   048E E4                 1422 	clr	a
   048F 08                 1423 	inc	r0
   0490 36                 1424 	addc	a,@r0
   0491 FC                 1425 	mov	r4,a
   0492 08                 1426 	inc	r0
   0493 86 05              1427 	mov	ar5,@r0
   0495 C0 02              1428 	push	ar2
   0497 C0 03              1429 	push	ar3
   0499 E5*00              1430 	mov	a,_bp
   049B 24 0A              1431 	add	a,#0x0a
   049D F8                 1432 	mov	r0,a
   049E E6                 1433 	mov	a,@r0
   049F C0 E0              1434 	push	acc
   04A1 08                 1435 	inc	r0
   04A2 E6                 1436 	mov	a,@r0
   04A3 C0 E0              1437 	push	acc
   04A5 C0 07              1438 	push	ar7
   04A7 C0 04              1439 	push	ar4
   04A9 C0 05              1440 	push	ar5
   04AB E4                 1441 	clr	a
   04AC C0 E0              1442 	push	acc
   04AE C0 E0              1443 	push	acc
   04B0 E4                 1444 	clr	a
   04B1 C0 E0              1445 	push	acc
   04B3 C0 E0              1446 	push	acc
   04B5 74rCD              1447 	mov	a,#00134$
   04B7 C0 E0              1448 	push	acc
   04B9 74s04              1449 	mov	a,#(00134$ >> 8)
   04BB C0 E0              1450 	push	acc
   04BD C0 02              1451 	push	ar2
   04BF C0 03              1452 	push	ar3
   04C1 A8*00              1453 	mov	r0,_bp
   04C3 08                 1454 	inc	r0
   04C4 86 82              1455 	mov	dpl,@r0
   04C6 08                 1456 	inc	r0
   04C7 86 83              1457 	mov	dph,@r0
   04C9 08                 1458 	inc	r0
   04CA 86 F0              1459 	mov	b,@r0
   04CC 22                 1460 	ret
   04CD                    1461 00134$:
   04CD E5 81              1462 	mov	a,sp
   04CF 24 F7              1463 	add	a,#0xf7
   04D1 F5 81              1464 	mov	sp,a
   04D3 D0 03              1465 	pop	ar3
   04D5 D0 02              1466 	pop	ar2
                           1467 ;	../../../core/net/rime/rudolph0.c:137: c->current.h.chunk++;
   04D7 A8*00              1468 	mov	r0,_bp
   04D9 08                 1469 	inc	r0
   04DA 74 58              1470 	mov	a,#0x58
   04DC 26                 1471 	add	a,@r0
   04DD FA                 1472 	mov	r2,a
   04DE E4                 1473 	clr	a
   04DF 08                 1474 	inc	r0
   04E0 36                 1475 	addc	a,@r0
   04E1 FB                 1476 	mov	r3,a
   04E2 08                 1477 	inc	r0
   04E3 86 04              1478 	mov	ar4,@r0
   04E5 74 02              1479 	mov	a,#0x02
   04E7 2A                 1480 	add	a,r2
   04E8 FA                 1481 	mov	r2,a
   04E9 E4                 1482 	clr	a
   04EA 3B                 1483 	addc	a,r3
   04EB FB                 1484 	mov	r3,a
   04EC 8A 82              1485 	mov	dpl,r2
   04EE 8B 83              1486 	mov	dph,r3
   04F0 8C F0              1487 	mov	b,r4
   04F2 12s00r00           1488 	lcall	__gptrget
   04F5 FD                 1489 	mov	r5,a
   04F6 A3                 1490 	inc	dptr
   04F7 12s00r00           1491 	lcall	__gptrget
   04FA FF                 1492 	mov	r7,a
   04FB 0D                 1493 	inc	r5
   04FC BD 00 01           1494 	cjne	r5,#0x00,00135$
   04FF 0F                 1495 	inc	r7
   0500                    1496 00135$:
   0500 8A 82              1497 	mov	dpl,r2
   0502 8B 83              1498 	mov	dph,r3
   0504 8C F0              1499 	mov	b,r4
   0506 ED                 1500 	mov	a,r5
   0507 12s00r00           1501 	lcall	__gptrput
   050A A3                 1502 	inc	dptr
   050B EF                 1503 	mov	a,r7
   050C 12s00r00           1504 	lcall	__gptrput
   050F 02s07r4B           1505 	ljmp	00119$
   0512                    1506 00115$:
                           1507 ;	../../../core/net/rime/rudolph0.c:139: } else if(p->h.version == c->current.h.version) {
   0512 EE                 1508 	mov	a,r6
   0513 70 03              1509 	jnz	00136$
   0515 02s07r4B           1510 	ljmp	00119$
   0518                    1511 00136$:
                           1512 ;	../../../core/net/rime/rudolph0.c:140: if(p->h.chunk == c->current.h.chunk) {
   0518 E5*00              1513 	mov	a,_bp
   051A 24 07              1514 	add	a,#0x07
   051C F8                 1515 	mov	r0,a
   051D 74 02              1516 	mov	a,#0x02
   051F 26                 1517 	add	a,@r0
   0520 FA                 1518 	mov	r2,a
   0521 E4                 1519 	clr	a
   0522 08                 1520 	inc	r0
   0523 36                 1521 	addc	a,@r0
   0524 FB                 1522 	mov	r3,a
   0525 08                 1523 	inc	r0
   0526 86 04              1524 	mov	ar4,@r0
   0528 8A 82              1525 	mov	dpl,r2
   052A 8B 83              1526 	mov	dph,r3
   052C 8C F0              1527 	mov	b,r4
   052E 12s00r00           1528 	lcall	__gptrget
   0531 FA                 1529 	mov	r2,a
   0532 A3                 1530 	inc	dptr
   0533 12s00r00           1531 	lcall	__gptrget
   0536 FB                 1532 	mov	r3,a
   0537 E5*00              1533 	mov	a,_bp
   0539 24 0E              1534 	add	a,#0x0e
   053B F8                 1535 	mov	r0,a
   053C 74 02              1536 	mov	a,#0x02
   053E 26                 1537 	add	a,@r0
   053F FC                 1538 	mov	r4,a
   0540 E4                 1539 	clr	a
   0541 08                 1540 	inc	r0
   0542 36                 1541 	addc	a,@r0
   0543 FD                 1542 	mov	r5,a
   0544 08                 1543 	inc	r0
   0545 86 06              1544 	mov	ar6,@r0
   0547 8C 82              1545 	mov	dpl,r4
   0549 8D 83              1546 	mov	dph,r5
   054B 8E F0              1547 	mov	b,r6
   054D E5*00              1548 	mov	a,_bp
   054F 24 0A              1549 	add	a,#0x0a
   0551 F8                 1550 	mov	r0,a
   0552 12s00r00           1551 	lcall	__gptrget
   0555 F6                 1552 	mov	@r0,a
   0556 A3                 1553 	inc	dptr
   0557 12s00r00           1554 	lcall	__gptrget
   055A 08                 1555 	inc	r0
   055B F6                 1556 	mov	@r0,a
   055C E5*00              1557 	mov	a,_bp
   055E 24 0A              1558 	add	a,#0x0a
   0560 F8                 1559 	mov	r0,a
   0561 E6                 1560 	mov	a,@r0
   0562 B5 02 07           1561 	cjne	a,ar2,00137$
   0565 08                 1562 	inc	r0
   0566 E6                 1563 	mov	a,@r0
   0567 B5 03 02           1564 	cjne	a,ar3,00137$
   056A 80 03              1565 	sjmp	00138$
   056C                    1566 00137$:
   056C 02s07r30           1567 	ljmp	00110$
   056F                    1568 00138$:
                           1569 ;	../../../core/net/rime/rudolph0.c:142: if(p->datalen < RUDOLPH0_DATASIZE) {
   056F E5*00              1570 	mov	a,_bp
   0571 24 07              1571 	add	a,#0x07
   0573 F8                 1572 	mov	r0,a
   0574 74 04              1573 	mov	a,#0x04
   0576 26                 1574 	add	a,@r0
   0577 FE                 1575 	mov	r6,a
   0578 E4                 1576 	clr	a
   0579 08                 1577 	inc	r0
   057A 36                 1578 	addc	a,@r0
   057B FF                 1579 	mov	r7,a
   057C 08                 1580 	inc	r0
   057D 86 04              1581 	mov	ar4,@r0
   057F 8E 82              1582 	mov	dpl,r6
   0581 8F 83              1583 	mov	dph,r7
   0583 8C F0              1584 	mov	b,r4
   0585 12s00r00           1585 	lcall	__gptrget
   0588 FA                 1586 	mov	r2,a
   0589 BA 40 00           1587 	cjne	r2,#0x40,00139$
   058C                    1588 00139$:
   058C 40 03              1589 	jc	00140$
   058E 02s06r4C           1590 	ljmp	00105$
   0591                    1591 00140$:
                           1592 ;	../../../core/net/rime/rudolph0.c:143: c->cb->write_chunk(c, c->current.h.chunk * RUDOLPH0_DATASIZE,
   0591 A8*00              1593 	mov	r0,_bp
   0593 08                 1594 	inc	r0
   0594 74 52              1595 	mov	a,#0x52
   0596 26                 1596 	add	a,@r0
   0597 FE                 1597 	mov	r6,a
   0598 E4                 1598 	clr	a
   0599 08                 1599 	inc	r0
   059A 36                 1600 	addc	a,@r0
   059B FF                 1601 	mov	r7,a
   059C 08                 1602 	inc	r0
   059D 86 04              1603 	mov	ar4,@r0
   059F 8E 82              1604 	mov	dpl,r6
   05A1 8F 83              1605 	mov	dph,r7
   05A3 8C F0              1606 	mov	b,r4
   05A5 12s00r00           1607 	lcall	__gptrget
   05A8 FE                 1608 	mov	r6,a
   05A9 A3                 1609 	inc	dptr
   05AA 12s00r00           1610 	lcall	__gptrget
   05AD FF                 1611 	mov	r7,a
   05AE A3                 1612 	inc	dptr
   05AF 12s00r00           1613 	lcall	__gptrget
   05B2 FC                 1614 	mov	r4,a
   05B3 8E 82              1615 	mov	dpl,r6
   05B5 8F 83              1616 	mov	dph,r7
   05B7 8C F0              1617 	mov	b,r4
   05B9 12s00r00           1618 	lcall	__gptrget
   05BC FB                 1619 	mov	r3,a
   05BD A3                 1620 	inc	dptr
   05BE 12s00r00           1621 	lcall	__gptrget
   05C1 FD                 1622 	mov	r5,a
                           1623 ;	../../../core/net/rime/rudolph0.c:144: RUDOLPH0_FLAG_LASTCHUNK, p->data, p->datalen);
   05C2 E5*00              1624 	mov	a,_bp
   05C4 24 11              1625 	add	a,#0x11
   05C6 F8                 1626 	mov	r0,a
   05C7 A6 02              1627 	mov	@r0,ar2
   05C9 08                 1628 	inc	r0
   05CA 76 00              1629 	mov	@r0,#0x00
   05CC E5*00              1630 	mov	a,_bp
   05CE 24 07              1631 	add	a,#0x07
   05D0 F8                 1632 	mov	r0,a
   05D1 E5*00              1633 	mov	a,_bp
   05D3 24 13              1634 	add	a,#0x13
   05D5 F9                 1635 	mov	r1,a
   05D6 74 05              1636 	mov	a,#0x05
   05D8 26                 1637 	add	a,@r0
   05D9 F7                 1638 	mov	@r1,a
   05DA E4                 1639 	clr	a
   05DB 08                 1640 	inc	r0
   05DC 36                 1641 	addc	a,@r0
   05DD 09                 1642 	inc	r1
   05DE F7                 1643 	mov	@r1,a
   05DF 08                 1644 	inc	r0
   05E0 09                 1645 	inc	r1
   05E1 E6                 1646 	mov	a,@r0
   05E2 F7                 1647 	mov	@r1,a
                           1648 ;	../../../core/net/rime/rudolph0.c:143: c->cb->write_chunk(c, c->current.h.chunk * RUDOLPH0_DATASIZE,
   05E3 E5*00              1649 	mov	a,_bp
   05E5 24 0A              1650 	add	a,#0x0a
   05E7 F8                 1651 	mov	r0,a
   05E8 86 07              1652 	mov	ar7,@r0
   05EA 08                 1653 	inc	r0
   05EB E6                 1654 	mov	a,@r0
   05EC 54 03              1655 	anl	a,#0x03
   05EE A2 E0              1656 	mov	c,acc.0
   05F0 CF                 1657 	xch	a,r7
   05F1 13                 1658 	rrc	a
   05F2 CF                 1659 	xch	a,r7
   05F3 13                 1660 	rrc	a
   05F4 A2 E0              1661 	mov	c,acc.0
   05F6 CF                 1662 	xch	a,r7
   05F7 13                 1663 	rrc	a
   05F8 CF                 1664 	xch	a,r7
   05F9 13                 1665 	rrc	a
   05FA CF                 1666 	xch	a,r7
   05FB FC                 1667 	mov	r4,a
   05FC C0 03              1668 	push	ar3
   05FE C0 05              1669 	push	ar5
   0600 E5*00              1670 	mov	a,_bp
   0602 24 11              1671 	add	a,#0x11
   0604 F8                 1672 	mov	r0,a
   0605 E6                 1673 	mov	a,@r0
   0606 C0 E0              1674 	push	acc
   0608 08                 1675 	inc	r0
   0609 E6                 1676 	mov	a,@r0
   060A C0 E0              1677 	push	acc
   060C E5*00              1678 	mov	a,_bp
   060E 24 13              1679 	add	a,#0x13
   0610 F8                 1680 	mov	r0,a
   0611 E6                 1681 	mov	a,@r0
   0612 C0 E0              1682 	push	acc
   0614 08                 1683 	inc	r0
   0615 E6                 1684 	mov	a,@r0
   0616 C0 E0              1685 	push	acc
   0618 08                 1686 	inc	r0
   0619 E6                 1687 	mov	a,@r0
   061A C0 E0              1688 	push	acc
   061C 74 02              1689 	mov	a,#0x02
   061E C0 E0              1690 	push	acc
   0620 E4                 1691 	clr	a
   0621 C0 E0              1692 	push	acc
   0623 C0 07              1693 	push	ar7
   0625 C0 04              1694 	push	ar4
   0627 74r3F              1695 	mov	a,#00141$
   0629 C0 E0              1696 	push	acc
   062B 74s06              1697 	mov	a,#(00141$ >> 8)
   062D C0 E0              1698 	push	acc
   062F C0 03              1699 	push	ar3
   0631 C0 05              1700 	push	ar5
   0633 A8*00              1701 	mov	r0,_bp
   0635 08                 1702 	inc	r0
   0636 86 82              1703 	mov	dpl,@r0
   0638 08                 1704 	inc	r0
   0639 86 83              1705 	mov	dph,@r0
   063B 08                 1706 	inc	r0
   063C 86 F0              1707 	mov	b,@r0
   063E 22                 1708 	ret
   063F                    1709 00141$:
   063F E5 81              1710 	mov	a,sp
   0641 24 F7              1711 	add	a,#0xf7
   0643 F5 81              1712 	mov	sp,a
   0645 D0 05              1713 	pop	ar5
   0647 D0 03              1714 	pop	ar3
   0649 02s06rF2           1715 	ljmp	00106$
   064C                    1716 00105$:
                           1717 ;	../../../core/net/rime/rudolph0.c:146: c->cb->write_chunk(c, c->current.h.chunk * RUDOLPH0_DATASIZE,
   064C A8*00              1718 	mov	r0,_bp
   064E 08                 1719 	inc	r0
   064F 74 52              1720 	mov	a,#0x52
   0651 26                 1721 	add	a,@r0
   0652 FC                 1722 	mov	r4,a
   0653 E4                 1723 	clr	a
   0654 08                 1724 	inc	r0
   0655 36                 1725 	addc	a,@r0
   0656 FD                 1726 	mov	r5,a
   0657 08                 1727 	inc	r0
   0658 86 06              1728 	mov	ar6,@r0
   065A 8C 82              1729 	mov	dpl,r4
   065C 8D 83              1730 	mov	dph,r5
   065E 8E F0              1731 	mov	b,r6
   0660 12s00r00           1732 	lcall	__gptrget
   0663 FC                 1733 	mov	r4,a
   0664 A3                 1734 	inc	dptr
   0665 12s00r00           1735 	lcall	__gptrget
   0668 FD                 1736 	mov	r5,a
   0669 A3                 1737 	inc	dptr
   066A 12s00r00           1738 	lcall	__gptrget
   066D FE                 1739 	mov	r6,a
   066E 8C 82              1740 	mov	dpl,r4
   0670 8D 83              1741 	mov	dph,r5
   0672 8E F0              1742 	mov	b,r6
   0674 12s00r00           1743 	lcall	__gptrget
   0677 FB                 1744 	mov	r3,a
   0678 A3                 1745 	inc	dptr
   0679 12s00r00           1746 	lcall	__gptrget
   067C FE                 1747 	mov	r6,a
                           1748 ;	../../../core/net/rime/rudolph0.c:147: RUDOLPH0_FLAG_NONE, p->data, p->datalen);
   067D 7F 00              1749 	mov	r7,#0x00
   067F E5*00              1750 	mov	a,_bp
   0681 24 07              1751 	add	a,#0x07
   0683 F8                 1752 	mov	r0,a
   0684 E5*00              1753 	mov	a,_bp
   0686 24 0E              1754 	add	a,#0x0e
   0688 F9                 1755 	mov	r1,a
   0689 74 05              1756 	mov	a,#0x05
   068B 26                 1757 	add	a,@r0
   068C F7                 1758 	mov	@r1,a
   068D E4                 1759 	clr	a
   068E 08                 1760 	inc	r0
   068F 36                 1761 	addc	a,@r0
   0690 09                 1762 	inc	r1
   0691 F7                 1763 	mov	@r1,a
   0692 08                 1764 	inc	r0
   0693 09                 1765 	inc	r1
   0694 E6                 1766 	mov	a,@r0
   0695 F7                 1767 	mov	@r1,a
                           1768 ;	../../../core/net/rime/rudolph0.c:146: c->cb->write_chunk(c, c->current.h.chunk * RUDOLPH0_DATASIZE,
   0696 E5*00              1769 	mov	a,_bp
   0698 24 0A              1770 	add	a,#0x0a
   069A F8                 1771 	mov	r0,a
   069B 86 05              1772 	mov	ar5,@r0
   069D 08                 1773 	inc	r0
   069E E6                 1774 	mov	a,@r0
   069F 54 03              1775 	anl	a,#0x03
   06A1 A2 E0              1776 	mov	c,acc.0
   06A3 CD                 1777 	xch	a,r5
   06A4 13                 1778 	rrc	a
   06A5 CD                 1779 	xch	a,r5
   06A6 13                 1780 	rrc	a
   06A7 A2 E0              1781 	mov	c,acc.0
   06A9 CD                 1782 	xch	a,r5
   06AA 13                 1783 	rrc	a
   06AB CD                 1784 	xch	a,r5
   06AC 13                 1785 	rrc	a
   06AD CD                 1786 	xch	a,r5
   06AE FC                 1787 	mov	r4,a
   06AF C0 03              1788 	push	ar3
   06B1 C0 06              1789 	push	ar6
   06B3 C0 02              1790 	push	ar2
   06B5 C0 07              1791 	push	ar7
   06B7 E5*00              1792 	mov	a,_bp
   06B9 24 0E              1793 	add	a,#0x0e
   06BB F8                 1794 	mov	r0,a
   06BC E6                 1795 	mov	a,@r0
   06BD C0 E0              1796 	push	acc
   06BF 08                 1797 	inc	r0
   06C0 E6                 1798 	mov	a,@r0
   06C1 C0 E0              1799 	push	acc
   06C3 08                 1800 	inc	r0
   06C4 E6                 1801 	mov	a,@r0
   06C5 C0 E0              1802 	push	acc
   06C7 E4                 1803 	clr	a
   06C8 C0 E0              1804 	push	acc
   06CA C0 E0              1805 	push	acc
   06CC C0 05              1806 	push	ar5
   06CE C0 04              1807 	push	ar4
   06D0 74rE8              1808 	mov	a,#00142$
   06D2 C0 E0              1809 	push	acc
   06D4 74s06              1810 	mov	a,#(00142$ >> 8)
   06D6 C0 E0              1811 	push	acc
   06D8 C0 03              1812 	push	ar3
   06DA C0 06              1813 	push	ar6
   06DC A8*00              1814 	mov	r0,_bp
   06DE 08                 1815 	inc	r0
   06DF 86 82              1816 	mov	dpl,@r0
   06E1 08                 1817 	inc	r0
   06E2 86 83              1818 	mov	dph,@r0
   06E4 08                 1819 	inc	r0
   06E5 86 F0              1820 	mov	b,@r0
   06E7 22                 1821 	ret
   06E8                    1822 00142$:
   06E8 E5 81              1823 	mov	a,sp
   06EA 24 F7              1824 	add	a,#0xf7
   06EC F5 81              1825 	mov	sp,a
   06EE D0 06              1826 	pop	ar6
   06F0 D0 03              1827 	pop	ar3
   06F2                    1828 00106$:
                           1829 ;	../../../core/net/rime/rudolph0.c:149: c->current.h.chunk++;
   06F2 E5*00              1830 	mov	a,_bp
   06F4 24 04              1831 	add	a,#0x04
   06F6 F8                 1832 	mov	r0,a
   06F7 74 58              1833 	mov	a,#0x58
   06F9 26                 1834 	add	a,@r0
   06FA FC                 1835 	mov	r4,a
   06FB E4                 1836 	clr	a
   06FC 08                 1837 	inc	r0
   06FD 36                 1838 	addc	a,@r0
   06FE FD                 1839 	mov	r5,a
   06FF 08                 1840 	inc	r0
   0700 86 06              1841 	mov	ar6,@r0
   0702 74 02              1842 	mov	a,#0x02
   0704 2C                 1843 	add	a,r4
   0705 FA                 1844 	mov	r2,a
   0706 E4                 1845 	clr	a
   0707 3D                 1846 	addc	a,r5
   0708 FD                 1847 	mov	r5,a
   0709 8E 03              1848 	mov	ar3,r6
   070B 8A 82              1849 	mov	dpl,r2
   070D 8D 83              1850 	mov	dph,r5
   070F 8B F0              1851 	mov	b,r3
   0711 12s00r00           1852 	lcall	__gptrget
   0714 FF                 1853 	mov	r7,a
   0715 A3                 1854 	inc	dptr
   0716 12s00r00           1855 	lcall	__gptrget
   0719 FC                 1856 	mov	r4,a
   071A 0F                 1857 	inc	r7
   071B BF 00 01           1858 	cjne	r7,#0x00,00143$
   071E 0C                 1859 	inc	r4
   071F                    1860 00143$:
   071F 8A 82              1861 	mov	dpl,r2
   0721 8D 83              1862 	mov	dph,r5
   0723 8B F0              1863 	mov	b,r3
   0725 EF                 1864 	mov	a,r7
   0726 12s00r00           1865 	lcall	__gptrput
   0729 A3                 1866 	inc	dptr
   072A EC                 1867 	mov	a,r4
   072B 12s00r00           1868 	lcall	__gptrput
   072E 80 1B              1869 	sjmp	00119$
   0730                    1870 00110$:
                           1871 ;	../../../core/net/rime/rudolph0.c:151: } else if(p->h.chunk > c->current.h.chunk) {
   0730 E5*00              1872 	mov	a,_bp
   0732 24 0A              1873 	add	a,#0x0a
   0734 F8                 1874 	mov	r0,a
   0735 C3                 1875 	clr	c
   0736 E6                 1876 	mov	a,@r0
   0737 9A                 1877 	subb	a,r2
   0738 08                 1878 	inc	r0
   0739 E6                 1879 	mov	a,@r0
   073A 9B                 1880 	subb	a,r3
   073B 50 0E              1881 	jnc	00119$
                           1882 ;	../../../core/net/rime/rudolph0.c:153: send_nack(c);
   073D A8*00              1883 	mov	r0,_bp
   073F 08                 1884 	inc	r0
   0740 86 82              1885 	mov	dpl,@r0
   0742 08                 1886 	inc	r0
   0743 86 83              1887 	mov	dph,@r0
   0745 08                 1888 	inc	r0
   0746 86 F0              1889 	mov	b,@r0
   0748 12s01r11           1890 	lcall	_send_nack
   074B                    1891 00119$:
   074B 85*00 81           1892 	mov	sp,_bp
   074E D0*00              1893 	pop	_bp
   0750 22                 1894 	ret
                           1895 ;------------------------------------------------------------
                           1896 ;Allocation info for local variables in function 'recv_nack'
                           1897 ;------------------------------------------------------------
                           1898 ;polite                    Allocated to registers r2 r3 r4 
                           1899 ;c                         Allocated to stack - offset 1
                           1900 ;p                         Allocated to registers r5 r6 r7 
                           1901 ;------------------------------------------------------------
                           1902 ;	../../../core/net/rime/rudolph0.c:162: recv_nack(struct polite_conn *polite)
                           1903 ;	-----------------------------------------
                           1904 ;	 function recv_nack
                           1905 ;	-----------------------------------------
   0751                    1906 _recv_nack:
   0751 C0*00              1907 	push	_bp
   0753 85 81*00           1908 	mov	_bp,sp
   0756 05 81              1909 	inc	sp
   0758 05 81              1910 	inc	sp
   075A 05 81              1911 	inc	sp
   075C AA 82              1912 	mov	r2,dpl
   075E AB 83              1913 	mov	r3,dph
   0760 AC F0              1914 	mov	r4,b
                           1915 ;	../../../core/net/rime/rudolph0.c:164: struct rudolph0_conn *c = (struct rudolph0_conn *)
   0762 A8*00              1916 	mov	r0,_bp
   0764 08                 1917 	inc	r0
   0765 EA                 1918 	mov	a,r2
   0766 24 D6              1919 	add	a,#0xd6
   0768 F6                 1920 	mov	@r0,a
   0769 EB                 1921 	mov	a,r3
   076A 34 FF              1922 	addc	a,#0xff
   076C 08                 1923 	inc	r0
   076D F6                 1924 	mov	@r0,a
   076E 08                 1925 	inc	r0
   076F A6 04              1926 	mov	@r0,ar4
                           1927 ;	../../../core/net/rime/rudolph0.c:167: struct rudolph0_datapacket *p = packetbuf_dataptr();
   0771 12s00r00           1928 	lcall	_packetbuf_dataptr
                           1929 ;	../../../core/net/rime/rudolph0.c:169: if(p->h.type == TYPE_NACK && c->state == STATE_SENDER) {
   0774 AD 82              1930 	mov	r5,dpl
   0776 AE 83              1931 	mov	r6,dph
   0778 AF F0              1932 	mov	r7,b
   077A 12s00r00           1933 	lcall	__gptrget
   077D FA                 1934 	mov	r2,a
   077E BA 01 02           1935 	cjne	r2,#0x01,00112$
   0781 80 03              1936 	sjmp	00113$
   0783                    1937 00112$:
   0783 02s08r7E           1938 	ljmp	00107$
   0786                    1939 00113$:
   0786 A8*00              1940 	mov	r0,_bp
   0788 08                 1941 	inc	r0
   0789 74 57              1942 	mov	a,#0x57
   078B 26                 1943 	add	a,@r0
   078C FA                 1944 	mov	r2,a
   078D E4                 1945 	clr	a
   078E 08                 1946 	inc	r0
   078F 36                 1947 	addc	a,@r0
   0790 FB                 1948 	mov	r3,a
   0791 08                 1949 	inc	r0
   0792 86 04              1950 	mov	ar4,@r0
   0794 8A 82              1951 	mov	dpl,r2
   0796 8B 83              1952 	mov	dph,r3
   0798 8C F0              1953 	mov	b,r4
   079A 12s00r00           1954 	lcall	__gptrget
   079D FA                 1955 	mov	r2,a
   079E BA 01 02           1956 	cjne	r2,#0x01,00114$
   07A1 80 03              1957 	sjmp	00115$
   07A3                    1958 00114$:
   07A3 02s08r7E           1959 	ljmp	00107$
   07A6                    1960 00115$:
                           1961 ;	../../../core/net/rime/rudolph0.c:170: if(p->h.version == c->current.h.version) {
   07A6 74 01              1962 	mov	a,#0x01
   07A8 2D                 1963 	add	a,r5
   07A9 FA                 1964 	mov	r2,a
   07AA E4                 1965 	clr	a
   07AB 3E                 1966 	addc	a,r6
   07AC FB                 1967 	mov	r3,a
   07AD 8F 04              1968 	mov	ar4,r7
   07AF 8A 82              1969 	mov	dpl,r2
   07B1 8B 83              1970 	mov	dph,r3
   07B3 8C F0              1971 	mov	b,r4
   07B5 12s00r00           1972 	lcall	__gptrget
   07B8 FA                 1973 	mov	r2,a
   07B9 C0 05              1974 	push	ar5
   07BB C0 06              1975 	push	ar6
   07BD C0 07              1976 	push	ar7
   07BF A8*00              1977 	mov	r0,_bp
   07C1 08                 1978 	inc	r0
   07C2 74 59              1979 	mov	a,#0x59
   07C4 26                 1980 	add	a,@r0
   07C5 FB                 1981 	mov	r3,a
   07C6 E4                 1982 	clr	a
   07C7 08                 1983 	inc	r0
   07C8 36                 1984 	addc	a,@r0
   07C9 FC                 1985 	mov	r4,a
   07CA 08                 1986 	inc	r0
   07CB 86 05              1987 	mov	ar5,@r0
   07CD 8B 82              1988 	mov	dpl,r3
   07CF 8C 83              1989 	mov	dph,r4
   07D1 8D F0              1990 	mov	b,r5
   07D3 12s00r00           1991 	lcall	__gptrget
   07D6 FB                 1992 	mov	r3,a
   07D7 EA                 1993 	mov	a,r2
   07D8 B5 03 02           1994 	cjne	a,ar3,00116$
   07DB 80 08              1995 	sjmp	00117$
   07DD                    1996 00116$:
   07DD D0 07              1997 	pop	ar7
   07DF D0 06              1998 	pop	ar6
   07E1 D0 05              1999 	pop	ar5
   07E3 80 3B              2000 	sjmp	00102$
   07E5                    2001 00117$:
   07E5 D0 07              2002 	pop	ar7
   07E7 D0 06              2003 	pop	ar6
   07E9 D0 05              2004 	pop	ar5
                           2005 ;	../../../core/net/rime/rudolph0.c:172: c->current.h.chunk = p->h.chunk;
   07EB A8*00              2006 	mov	r0,_bp
   07ED 08                 2007 	inc	r0
   07EE 74 5A              2008 	mov	a,#0x5A
   07F0 26                 2009 	add	a,@r0
   07F1 FA                 2010 	mov	r2,a
   07F2 E4                 2011 	clr	a
   07F3 08                 2012 	inc	r0
   07F4 36                 2013 	addc	a,@r0
   07F5 FB                 2014 	mov	r3,a
   07F6 08                 2015 	inc	r0
   07F7 86 04              2016 	mov	ar4,@r0
   07F9 74 02              2017 	mov	a,#0x02
   07FB 2D                 2018 	add	a,r5
   07FC FD                 2019 	mov	r5,a
   07FD E4                 2020 	clr	a
   07FE 3E                 2021 	addc	a,r6
   07FF FE                 2022 	mov	r6,a
   0800 8D 82              2023 	mov	dpl,r5
   0802 8E 83              2024 	mov	dph,r6
   0804 8F F0              2025 	mov	b,r7
   0806 12s00r00           2026 	lcall	__gptrget
   0809 FD                 2027 	mov	r5,a
   080A A3                 2028 	inc	dptr
   080B 12s00r00           2029 	lcall	__gptrget
   080E FE                 2030 	mov	r6,a
   080F 8A 82              2031 	mov	dpl,r2
   0811 8B 83              2032 	mov	dph,r3
   0813 8C F0              2033 	mov	b,r4
   0815 ED                 2034 	mov	a,r5
   0816 12s00r00           2035 	lcall	__gptrput
   0819 A3                 2036 	inc	dptr
   081A EE                 2037 	mov	a,r6
   081B 12s00r00           2038 	lcall	__gptrput
   081E 80 1D              2039 	sjmp	00103$
   0820                    2040 00102$:
                           2041 ;	../../../core/net/rime/rudolph0.c:175: c->current.h.chunk = 0;
   0820 A8*00              2042 	mov	r0,_bp
   0822 08                 2043 	inc	r0
   0823 74 5A              2044 	mov	a,#0x5A
   0825 26                 2045 	add	a,@r0
   0826 FA                 2046 	mov	r2,a
   0827 E4                 2047 	clr	a
   0828 08                 2048 	inc	r0
   0829 36                 2049 	addc	a,@r0
   082A FB                 2050 	mov	r3,a
   082B 08                 2051 	inc	r0
   082C 86 04              2052 	mov	ar4,@r0
   082E 8A 82              2053 	mov	dpl,r2
   0830 8B 83              2054 	mov	dph,r3
   0832 8C F0              2055 	mov	b,r4
   0834 E4                 2056 	clr	a
   0835 12s00r00           2057 	lcall	__gptrput
   0838 A3                 2058 	inc	dptr
   0839 E4                 2059 	clr	a
   083A 12s00r00           2060 	lcall	__gptrput
   083D                    2061 00103$:
                           2062 ;	../../../core/net/rime/rudolph0.c:177: read_new_datapacket(c);
   083D A8*00              2063 	mov	r0,_bp
   083F 08                 2064 	inc	r0
   0840 86 82              2065 	mov	dpl,@r0
   0842 08                 2066 	inc	r0
   0843 86 83              2067 	mov	dph,@r0
   0845 08                 2068 	inc	r0
   0846 86 F0              2069 	mov	b,@r0
   0848 12s00r00           2070 	lcall	_read_new_datapacket
                           2071 ;	../../../core/net/rime/rudolph0.c:178: stbroadcast_set_timer(&c->c, c->send_interval);
   084B A8*00              2072 	mov	r0,_bp
   084D 08                 2073 	inc	r0
   084E 74 55              2074 	mov	a,#0x55
   0850 26                 2075 	add	a,@r0
   0851 FA                 2076 	mov	r2,a
   0852 E4                 2077 	clr	a
   0853 08                 2078 	inc	r0
   0854 36                 2079 	addc	a,@r0
   0855 FB                 2080 	mov	r3,a
   0856 08                 2081 	inc	r0
   0857 86 04              2082 	mov	ar4,@r0
   0859 8A 82              2083 	mov	dpl,r2
   085B 8B 83              2084 	mov	dph,r3
   085D 8C F0              2085 	mov	b,r4
   085F 12s00r00           2086 	lcall	__gptrget
   0862 FA                 2087 	mov	r2,a
   0863 A3                 2088 	inc	dptr
   0864 12s00r00           2089 	lcall	__gptrget
   0867 FB                 2090 	mov	r3,a
   0868 C0 02              2091 	push	ar2
   086A C0 03              2092 	push	ar3
   086C A8*00              2093 	mov	r0,_bp
   086E 08                 2094 	inc	r0
   086F 86 82              2095 	mov	dpl,@r0
   0871 08                 2096 	inc	r0
   0872 86 83              2097 	mov	dph,@r0
   0874 08                 2098 	inc	r0
   0875 86 F0              2099 	mov	b,@r0
   0877 12s00r00           2100 	lcall	_stbroadcast_set_timer
   087A 15 81              2101 	dec	sp
   087C 15 81              2102 	dec	sp
   087E                    2103 00107$:
   087E 85*00 81           2104 	mov	sp,_bp
   0881 D0*00              2105 	pop	_bp
   0883 22                 2106 	ret
                           2107 ;------------------------------------------------------------
                           2108 ;Allocation info for local variables in function 'rudolph0_open'
                           2109 ;------------------------------------------------------------
                           2110 ;channel                   Allocated to stack - offset -4
                           2111 ;cb                        Allocated to stack - offset -7
                           2112 ;c                         Allocated to stack - offset 1
                           2113 ;------------------------------------------------------------
                           2114 ;	../../../core/net/rime/rudolph0.c:186: rudolph0_open(struct rudolph0_conn *c, uint16_t channel,
                           2115 ;	-----------------------------------------
                           2116 ;	 function rudolph0_open
                           2117 ;	-----------------------------------------
   0884                    2118 _rudolph0_open:
   0884 C0*00              2119 	push	_bp
   0886 85 81*00           2120 	mov	_bp,sp
   0889 C0 82              2121 	push	dpl
   088B C0 83              2122 	push	dph
   088D C0 F0              2123 	push	b
                           2124 ;	../../../core/net/rime/rudolph0.c:189: stbroadcast_open(&c->c, channel, &stbroadcast);
   088F 74r06              2125 	mov	a,#_stbroadcast
   0891 C0 E0              2126 	push	acc
   0893 74s00              2127 	mov	a,#(_stbroadcast >> 8)
   0895 C0 E0              2128 	push	acc
   0897 74 80              2129 	mov	a,#0x80
   0899 C0 E0              2130 	push	acc
   089B E5*00              2131 	mov	a,_bp
   089D 24 FC              2132 	add	a,#0xfc
   089F F8                 2133 	mov	r0,a
   08A0 E6                 2134 	mov	a,@r0
   08A1 C0 E0              2135 	push	acc
   08A3 08                 2136 	inc	r0
   08A4 E6                 2137 	mov	a,@r0
   08A5 C0 E0              2138 	push	acc
   08A7 A8*00              2139 	mov	r0,_bp
   08A9 08                 2140 	inc	r0
   08AA 86 82              2141 	mov	dpl,@r0
   08AC 08                 2142 	inc	r0
   08AD 86 83              2143 	mov	dph,@r0
   08AF 08                 2144 	inc	r0
   08B0 86 F0              2145 	mov	b,@r0
   08B2 12s00r00           2146 	lcall	_stbroadcast_open
   08B5 E5 81              2147 	mov	a,sp
   08B7 24 FB              2148 	add	a,#0xfb
   08B9 F5 81              2149 	mov	sp,a
                           2150 ;	../../../core/net/rime/rudolph0.c:190: polite_open(&c->nackc, channel + 1, &polite);
   08BB E5*00              2151 	mov	a,_bp
   08BD 24 FC              2152 	add	a,#0xfc
   08BF F8                 2153 	mov	r0,a
   08C0 74 01              2154 	mov	a,#0x01
   08C2 26                 2155 	add	a,@r0
   08C3 FD                 2156 	mov	r5,a
   08C4 E4                 2157 	clr	a
   08C5 08                 2158 	inc	r0
   08C6 36                 2159 	addc	a,@r0
   08C7 FE                 2160 	mov	r6,a
   08C8 A8*00              2161 	mov	r0,_bp
   08CA 08                 2162 	inc	r0
   08CB 74 2A              2163 	mov	a,#0x2A
   08CD 26                 2164 	add	a,@r0
   08CE FF                 2165 	mov	r7,a
   08CF E4                 2166 	clr	a
   08D0 08                 2167 	inc	r0
   08D1 36                 2168 	addc	a,@r0
   08D2 FA                 2169 	mov	r2,a
   08D3 08                 2170 	inc	r0
   08D4 86 03              2171 	mov	ar3,@r0
   08D6 74r00              2172 	mov	a,#_polite
   08D8 C0 E0              2173 	push	acc
   08DA 74s00              2174 	mov	a,#(_polite >> 8)
   08DC C0 E0              2175 	push	acc
   08DE 74 80              2176 	mov	a,#0x80
   08E0 C0 E0              2177 	push	acc
   08E2 C0 05              2178 	push	ar5
   08E4 C0 06              2179 	push	ar6
   08E6 8F 82              2180 	mov	dpl,r7
   08E8 8A 83              2181 	mov	dph,r2
   08EA 8B F0              2182 	mov	b,r3
   08EC 12s00r00           2183 	lcall	_polite_open
   08EF E5 81              2184 	mov	a,sp
   08F1 24 FB              2185 	add	a,#0xfb
   08F3 F5 81              2186 	mov	sp,a
                           2187 ;	../../../core/net/rime/rudolph0.c:191: c->cb = cb;
   08F5 A8*00              2188 	mov	r0,_bp
   08F7 08                 2189 	inc	r0
   08F8 74 52              2190 	mov	a,#0x52
   08FA 26                 2191 	add	a,@r0
   08FB FA                 2192 	mov	r2,a
   08FC E4                 2193 	clr	a
   08FD 08                 2194 	inc	r0
   08FE 36                 2195 	addc	a,@r0
   08FF FB                 2196 	mov	r3,a
   0900 08                 2197 	inc	r0
   0901 86 04              2198 	mov	ar4,@r0
   0903 8A 82              2199 	mov	dpl,r2
   0905 8B 83              2200 	mov	dph,r3
   0907 8C F0              2201 	mov	b,r4
   0909 E5*00              2202 	mov	a,_bp
   090B 24 F9              2203 	add	a,#0xf9
   090D F8                 2204 	mov	r0,a
   090E E6                 2205 	mov	a,@r0
   090F 12s00r00           2206 	lcall	__gptrput
   0912 A3                 2207 	inc	dptr
   0913 08                 2208 	inc	r0
   0914 E6                 2209 	mov	a,@r0
   0915 12s00r00           2210 	lcall	__gptrput
   0918 A3                 2211 	inc	dptr
   0919 08                 2212 	inc	r0
   091A E6                 2213 	mov	a,@r0
   091B 12s00r00           2214 	lcall	__gptrput
                           2215 ;	../../../core/net/rime/rudolph0.c:192: c->current.h.version = 0;
   091E A8*00              2216 	mov	r0,_bp
   0920 08                 2217 	inc	r0
   0921 74 58              2218 	mov	a,#0x58
   0923 26                 2219 	add	a,@r0
   0924 FA                 2220 	mov	r2,a
   0925 E4                 2221 	clr	a
   0926 08                 2222 	inc	r0
   0927 36                 2223 	addc	a,@r0
   0928 FB                 2224 	mov	r3,a
   0929 08                 2225 	inc	r0
   092A 86 04              2226 	mov	ar4,@r0
   092C 0A                 2227 	inc	r2
   092D BA 00 01           2228 	cjne	r2,#0x00,00103$
   0930 0B                 2229 	inc	r3
   0931                    2230 00103$:
   0931 8A 82              2231 	mov	dpl,r2
   0933 8B 83              2232 	mov	dph,r3
   0935 8C F0              2233 	mov	b,r4
   0937 E4                 2234 	clr	a
   0938 12s00r00           2235 	lcall	__gptrput
                           2236 ;	../../../core/net/rime/rudolph0.c:193: c->state = STATE_RECEIVER;
   093B A8*00              2237 	mov	r0,_bp
   093D 08                 2238 	inc	r0
   093E 74 57              2239 	mov	a,#0x57
   0940 26                 2240 	add	a,@r0
   0941 FA                 2241 	mov	r2,a
   0942 E4                 2242 	clr	a
   0943 08                 2243 	inc	r0
   0944 36                 2244 	addc	a,@r0
   0945 FB                 2245 	mov	r3,a
   0946 08                 2246 	inc	r0
   0947 86 04              2247 	mov	ar4,@r0
   0949 8A 82              2248 	mov	dpl,r2
   094B 8B 83              2249 	mov	dph,r3
   094D 8C F0              2250 	mov	b,r4
   094F E4                 2251 	clr	a
   0950 12s00r00           2252 	lcall	__gptrput
                           2253 ;	../../../core/net/rime/rudolph0.c:194: c->send_interval = DEFAULT_SEND_INTERVAL;
   0953 A8*00              2254 	mov	r0,_bp
   0955 08                 2255 	inc	r0
   0956 74 55              2256 	mov	a,#0x55
   0958 26                 2257 	add	a,@r0
   0959 FA                 2258 	mov	r2,a
   095A E4                 2259 	clr	a
   095B 08                 2260 	inc	r0
   095C 36                 2261 	addc	a,@r0
   095D FB                 2262 	mov	r3,a
   095E 08                 2263 	inc	r0
   095F 86 04              2264 	mov	ar4,@r0
   0961 8A 82              2265 	mov	dpl,r2
   0963 8B 83              2266 	mov	dph,r3
   0965 8C F0              2267 	mov	b,r4
   0967 74 40              2268 	mov	a,#0x40
   0969 12s00r00           2269 	lcall	__gptrput
   096C A3                 2270 	inc	dptr
   096D E4                 2271 	clr	a
   096E 12s00r00           2272 	lcall	__gptrput
   0971 85*00 81           2273 	mov	sp,_bp
   0974 D0*00              2274 	pop	_bp
   0976 22                 2275 	ret
                           2276 ;------------------------------------------------------------
                           2277 ;Allocation info for local variables in function 'rudolph0_close'
                           2278 ;------------------------------------------------------------
                           2279 ;c                         Allocated to registers r2 r3 r4 
                           2280 ;------------------------------------------------------------
                           2281 ;	../../../core/net/rime/rudolph0.c:198: rudolph0_close(struct rudolph0_conn *c)
                           2282 ;	-----------------------------------------
                           2283 ;	 function rudolph0_close
                           2284 ;	-----------------------------------------
   0977                    2285 _rudolph0_close:
                           2286 ;	../../../core/net/rime/rudolph0.c:200: stbroadcast_close(&c->c);
   0977 AA 82              2287 	mov	r2,dpl
   0979 AB 83              2288 	mov	r3,dph
   097B AC F0              2289 	mov	r4,b
   097D C0 02              2290 	push	ar2
   097F C0 03              2291 	push	ar3
   0981 C0 04              2292 	push	ar4
   0983 12s00r00           2293 	lcall	_stbroadcast_close
   0986 D0 04              2294 	pop	ar4
   0988 D0 03              2295 	pop	ar3
   098A D0 02              2296 	pop	ar2
                           2297 ;	../../../core/net/rime/rudolph0.c:201: polite_close(&c->nackc);
   098C 74 2A              2298 	mov	a,#0x2A
   098E 2A                 2299 	add	a,r2
   098F FA                 2300 	mov	r2,a
   0990 E4                 2301 	clr	a
   0991 3B                 2302 	addc	a,r3
   0992 FB                 2303 	mov	r3,a
   0993 8A 82              2304 	mov	dpl,r2
   0995 8B 83              2305 	mov	dph,r3
   0997 8C F0              2306 	mov	b,r4
   0999 02s00r00           2307 	ljmp	_polite_close
                           2308 ;------------------------------------------------------------
                           2309 ;Allocation info for local variables in function 'rudolph0_send'
                           2310 ;------------------------------------------------------------
                           2311 ;send_interval             Allocated to stack - offset -4
                           2312 ;c                         Allocated to stack - offset 1
                           2313 ;sloc0                     Allocated to stack - offset 4
                           2314 ;------------------------------------------------------------
                           2315 ;	../../../core/net/rime/rudolph0.c:205: rudolph0_send(struct rudolph0_conn *c, clock_time_t send_interval)
                           2316 ;	-----------------------------------------
                           2317 ;	 function rudolph0_send
                           2318 ;	-----------------------------------------
   099C                    2319 _rudolph0_send:
   099C C0*00              2320 	push	_bp
   099E 85 81*00           2321 	mov	_bp,sp
   09A1 C0 82              2322 	push	dpl
   09A3 C0 83              2323 	push	dph
   09A5 C0 F0              2324 	push	b
   09A7 05 81              2325 	inc	sp
   09A9 05 81              2326 	inc	sp
   09AB 05 81              2327 	inc	sp
                           2328 ;	../../../core/net/rime/rudolph0.c:207: c->state = STATE_SENDER;
   09AD A8*00              2329 	mov	r0,_bp
   09AF 08                 2330 	inc	r0
   09B0 74 57              2331 	mov	a,#0x57
   09B2 26                 2332 	add	a,@r0
   09B3 FD                 2333 	mov	r5,a
   09B4 E4                 2334 	clr	a
   09B5 08                 2335 	inc	r0
   09B6 36                 2336 	addc	a,@r0
   09B7 FE                 2337 	mov	r6,a
   09B8 08                 2338 	inc	r0
   09B9 86 07              2339 	mov	ar7,@r0
   09BB 8D 82              2340 	mov	dpl,r5
   09BD 8E 83              2341 	mov	dph,r6
   09BF 8F F0              2342 	mov	b,r7
   09C1 74 01              2343 	mov	a,#0x01
   09C3 12s00r00           2344 	lcall	__gptrput
                           2345 ;	../../../core/net/rime/rudolph0.c:208: c->current.h.version++;
   09C6 A8*00              2346 	mov	r0,_bp
   09C8 08                 2347 	inc	r0
   09C9 74 58              2348 	mov	a,#0x58
   09CB 26                 2349 	add	a,@r0
   09CC FD                 2350 	mov	r5,a
   09CD E4                 2351 	clr	a
   09CE 08                 2352 	inc	r0
   09CF 36                 2353 	addc	a,@r0
   09D0 FE                 2354 	mov	r6,a
   09D1 08                 2355 	inc	r0
   09D2 86 07              2356 	mov	ar7,@r0
   09D4 E5*00              2357 	mov	a,_bp
   09D6 24 04              2358 	add	a,#0x04
   09D8 F8                 2359 	mov	r0,a
   09D9 74 01              2360 	mov	a,#0x01
   09DB 2D                 2361 	add	a,r5
   09DC F6                 2362 	mov	@r0,a
   09DD E4                 2363 	clr	a
   09DE 3E                 2364 	addc	a,r6
   09DF 08                 2365 	inc	r0
   09E0 F6                 2366 	mov	@r0,a
   09E1 08                 2367 	inc	r0
   09E2 A6 07              2368 	mov	@r0,ar7
   09E4 E5*00              2369 	mov	a,_bp
   09E6 24 04              2370 	add	a,#0x04
   09E8 F8                 2371 	mov	r0,a
   09E9 86 82              2372 	mov	dpl,@r0
   09EB 08                 2373 	inc	r0
   09EC 86 83              2374 	mov	dph,@r0
   09EE 08                 2375 	inc	r0
   09EF 86 F0              2376 	mov	b,@r0
   09F1 12s00r00           2377 	lcall	__gptrget
   09F4 FA                 2378 	mov	r2,a
   09F5 0A                 2379 	inc	r2
   09F6 E5*00              2380 	mov	a,_bp
   09F8 24 04              2381 	add	a,#0x04
   09FA F8                 2382 	mov	r0,a
   09FB 86 82              2383 	mov	dpl,@r0
   09FD 08                 2384 	inc	r0
   09FE 86 83              2385 	mov	dph,@r0
   0A00 08                 2386 	inc	r0
   0A01 86 F0              2387 	mov	b,@r0
   0A03 EA                 2388 	mov	a,r2
   0A04 12s00r00           2389 	lcall	__gptrput
                           2390 ;	../../../core/net/rime/rudolph0.c:209: c->current.h.version++;
   0A07 0A                 2391 	inc	r2
   0A08 E5*00              2392 	mov	a,_bp
   0A0A 24 04              2393 	add	a,#0x04
   0A0C F8                 2394 	mov	r0,a
   0A0D 86 82              2395 	mov	dpl,@r0
   0A0F 08                 2396 	inc	r0
   0A10 86 83              2397 	mov	dph,@r0
   0A12 08                 2398 	inc	r0
   0A13 86 F0              2399 	mov	b,@r0
   0A15 EA                 2400 	mov	a,r2
   0A16 12s00r00           2401 	lcall	__gptrput
                           2402 ;	../../../core/net/rime/rudolph0.c:210: c->current.h.chunk = 0;
   0A19 74 02              2403 	mov	a,#0x02
   0A1B 2D                 2404 	add	a,r5
   0A1C FA                 2405 	mov	r2,a
   0A1D E4                 2406 	clr	a
   0A1E 3E                 2407 	addc	a,r6
   0A1F FB                 2408 	mov	r3,a
   0A20 8F 04              2409 	mov	ar4,r7
   0A22 8A 82              2410 	mov	dpl,r2
   0A24 8B 83              2411 	mov	dph,r3
   0A26 8C F0              2412 	mov	b,r4
   0A28 E4                 2413 	clr	a
   0A29 12s00r00           2414 	lcall	__gptrput
   0A2C A3                 2415 	inc	dptr
   0A2D E4                 2416 	clr	a
   0A2E 12s00r00           2417 	lcall	__gptrput
                           2418 ;	../../../core/net/rime/rudolph0.c:211: c->current.h.type = TYPE_DATA;
   0A31 8D 82              2419 	mov	dpl,r5
   0A33 8E 83              2420 	mov	dph,r6
   0A35 8F F0              2421 	mov	b,r7
   0A37 E4                 2422 	clr	a
   0A38 12s00r00           2423 	lcall	__gptrput
                           2424 ;	../../../core/net/rime/rudolph0.c:212: read_new_datapacket(c);
   0A3B A8*00              2425 	mov	r0,_bp
   0A3D 08                 2426 	inc	r0
   0A3E 86 82              2427 	mov	dpl,@r0
   0A40 08                 2428 	inc	r0
   0A41 86 83              2429 	mov	dph,@r0
   0A43 08                 2430 	inc	r0
   0A44 86 F0              2431 	mov	b,@r0
   0A46 12s00r00           2432 	lcall	_read_new_datapacket
                           2433 ;	../../../core/net/rime/rudolph0.c:213: packetbuf_reference(&c->current, sizeof(struct rudolph0_datapacket));
   0A49 A8*00              2434 	mov	r0,_bp
   0A4B 08                 2435 	inc	r0
   0A4C 74 58              2436 	mov	a,#0x58
   0A4E 26                 2437 	add	a,@r0
   0A4F FA                 2438 	mov	r2,a
   0A50 E4                 2439 	clr	a
   0A51 08                 2440 	inc	r0
   0A52 36                 2441 	addc	a,@r0
   0A53 FB                 2442 	mov	r3,a
   0A54 08                 2443 	inc	r0
   0A55 86 04              2444 	mov	ar4,@r0
   0A57 74 45              2445 	mov	a,#0x45
   0A59 C0 E0              2446 	push	acc
   0A5B E4                 2447 	clr	a
   0A5C C0 E0              2448 	push	acc
   0A5E 8A 82              2449 	mov	dpl,r2
   0A60 8B 83              2450 	mov	dph,r3
   0A62 8C F0              2451 	mov	b,r4
   0A64 12s00r00           2452 	lcall	_packetbuf_reference
   0A67 15 81              2453 	dec	sp
   0A69 15 81              2454 	dec	sp
                           2455 ;	../../../core/net/rime/rudolph0.c:214: c->send_interval = send_interval;
   0A6B A8*00              2456 	mov	r0,_bp
   0A6D 08                 2457 	inc	r0
   0A6E 74 55              2458 	mov	a,#0x55
   0A70 26                 2459 	add	a,@r0
   0A71 FA                 2460 	mov	r2,a
   0A72 E4                 2461 	clr	a
   0A73 08                 2462 	inc	r0
   0A74 36                 2463 	addc	a,@r0
   0A75 FB                 2464 	mov	r3,a
   0A76 08                 2465 	inc	r0
   0A77 86 04              2466 	mov	ar4,@r0
   0A79 8A 82              2467 	mov	dpl,r2
   0A7B 8B 83              2468 	mov	dph,r3
   0A7D 8C F0              2469 	mov	b,r4
   0A7F E5*00              2470 	mov	a,_bp
   0A81 24 FC              2471 	add	a,#0xfc
   0A83 F8                 2472 	mov	r0,a
   0A84 E6                 2473 	mov	a,@r0
   0A85 12s00r00           2474 	lcall	__gptrput
   0A88 A3                 2475 	inc	dptr
   0A89 08                 2476 	inc	r0
   0A8A E6                 2477 	mov	a,@r0
   0A8B 12s00r00           2478 	lcall	__gptrput
                           2479 ;	../../../core/net/rime/rudolph0.c:215: stbroadcast_send_stubborn(&c->c, c->send_interval);
   0A8E E5*00              2480 	mov	a,_bp
   0A90 24 FC              2481 	add	a,#0xfc
   0A92 F8                 2482 	mov	r0,a
   0A93 E6                 2483 	mov	a,@r0
   0A94 C0 E0              2484 	push	acc
   0A96 08                 2485 	inc	r0
   0A97 E6                 2486 	mov	a,@r0
   0A98 C0 E0              2487 	push	acc
   0A9A A8*00              2488 	mov	r0,_bp
   0A9C 08                 2489 	inc	r0
   0A9D 86 82              2490 	mov	dpl,@r0
   0A9F 08                 2491 	inc	r0
   0AA0 86 83              2492 	mov	dph,@r0
   0AA2 08                 2493 	inc	r0
   0AA3 86 F0              2494 	mov	b,@r0
   0AA5 12s00r00           2495 	lcall	_stbroadcast_send_stubborn
   0AA8 15 81              2496 	dec	sp
   0AAA 15 81              2497 	dec	sp
   0AAC 85*00 81           2498 	mov	sp,_bp
   0AAF D0*00              2499 	pop	_bp
   0AB1 22                 2500 	ret
                           2501 ;------------------------------------------------------------
                           2502 ;Allocation info for local variables in function 'rudolph0_force_restart'
                           2503 ;------------------------------------------------------------
                           2504 ;c                         Allocated to registers r2 r3 r4 
                           2505 ;------------------------------------------------------------
                           2506 ;	../../../core/net/rime/rudolph0.c:219: rudolph0_force_restart(struct rudolph0_conn *c)
                           2507 ;	-----------------------------------------
                           2508 ;	 function rudolph0_force_restart
                           2509 ;	-----------------------------------------
   0AB2                    2510 _rudolph0_force_restart:
   0AB2 AA 82              2511 	mov	r2,dpl
   0AB4 AB 83              2512 	mov	r3,dph
   0AB6 AC F0              2513 	mov	r4,b
                           2514 ;	../../../core/net/rime/rudolph0.c:221: c->current.h.chunk = 0;
   0AB8 74 58              2515 	mov	a,#0x58
   0ABA 2A                 2516 	add	a,r2
   0ABB FD                 2517 	mov	r5,a
   0ABC E4                 2518 	clr	a
   0ABD 3B                 2519 	addc	a,r3
   0ABE FE                 2520 	mov	r6,a
   0ABF 8C 07              2521 	mov	ar7,r4
   0AC1 74 02              2522 	mov	a,#0x02
   0AC3 2D                 2523 	add	a,r5
   0AC4 FD                 2524 	mov	r5,a
   0AC5 E4                 2525 	clr	a
   0AC6 3E                 2526 	addc	a,r6
   0AC7 FE                 2527 	mov	r6,a
   0AC8 8D 82              2528 	mov	dpl,r5
   0ACA 8E 83              2529 	mov	dph,r6
   0ACC 8F F0              2530 	mov	b,r7
   0ACE E4                 2531 	clr	a
   0ACF 12s00r00           2532 	lcall	__gptrput
   0AD2 A3                 2533 	inc	dptr
   0AD3 E4                 2534 	clr	a
   0AD4 12s00r00           2535 	lcall	__gptrput
                           2536 ;	../../../core/net/rime/rudolph0.c:222: send_nack(c);
   0AD7 8A 82              2537 	mov	dpl,r2
   0AD9 8B 83              2538 	mov	dph,r3
   0ADB 8C F0              2539 	mov	b,r4
   0ADD 02s01r11           2540 	ljmp	_send_nack
                           2541 ;------------------------------------------------------------
                           2542 ;Allocation info for local variables in function 'rudolph0_stop'
                           2543 ;------------------------------------------------------------
                           2544 ;c                         Allocated to registers r2 r3 r4 
                           2545 ;------------------------------------------------------------
                           2546 ;	../../../core/net/rime/rudolph0.c:226: rudolph0_stop(struct rudolph0_conn *c)
                           2547 ;	-----------------------------------------
                           2548 ;	 function rudolph0_stop
                           2549 ;	-----------------------------------------
   0AE0                    2550 _rudolph0_stop:
                           2551 ;	../../../core/net/rime/rudolph0.c:228: stbroadcast_cancel(&c->c);
   0AE0 02s00r00           2552 	ljmp	_stbroadcast_cancel
                           2553 ;------------------------------------------------------------
                           2554 ;Allocation info for local variables in function 'rudolph0_version'
                           2555 ;------------------------------------------------------------
                           2556 ;c                         Allocated to registers r2 r3 r4 
                           2557 ;------------------------------------------------------------
                           2558 ;	../../../core/net/rime/rudolph0.c:232: rudolph0_version(struct rudolph0_conn *c)
                           2559 ;	-----------------------------------------
                           2560 ;	 function rudolph0_version
                           2561 ;	-----------------------------------------
   0AE3                    2562 _rudolph0_version:
   0AE3 AA 82              2563 	mov	r2,dpl
   0AE5 AB 83              2564 	mov	r3,dph
   0AE7 AC F0              2565 	mov	r4,b
                           2566 ;	../../../core/net/rime/rudolph0.c:234: return c->current.h.version;
   0AE9 74 58              2567 	mov	a,#0x58
   0AEB 2A                 2568 	add	a,r2
   0AEC FA                 2569 	mov	r2,a
   0AED E4                 2570 	clr	a
   0AEE 3B                 2571 	addc	a,r3
   0AEF FB                 2572 	mov	r3,a
   0AF0 0A                 2573 	inc	r2
   0AF1 BA 00 01           2574 	cjne	r2,#0x00,00103$
   0AF4 0B                 2575 	inc	r3
   0AF5                    2576 00103$:
   0AF5 8A 82              2577 	mov	dpl,r2
   0AF7 8B 83              2578 	mov	dph,r3
   0AF9 8C F0              2579 	mov	b,r4
   0AFB 12s00r00           2580 	lcall	__gptrget
   0AFE FA                 2581 	mov	r2,a
   0AFF 7B 00              2582 	mov	r3,#0x00
   0B01 8A 82              2583 	mov	dpl,r2
   0B03 8B 83              2584 	mov	dph,r3
   0B05 22                 2585 	ret
                           2586 ;------------------------------------------------------------
                           2587 ;Allocation info for local variables in function 'rudolph0_set_version'
                           2588 ;------------------------------------------------------------
                           2589 ;version                   Allocated to stack - offset -4
                           2590 ;c                         Allocated to registers r2 r3 r4 
                           2591 ;------------------------------------------------------------
                           2592 ;	../../../core/net/rime/rudolph0.c:238: rudolph0_set_version(struct rudolph0_conn *c, int version)
                           2593 ;	-----------------------------------------
                           2594 ;	 function rudolph0_set_version
                           2595 ;	-----------------------------------------
   0B06                    2596 _rudolph0_set_version:
   0B06 C0*00              2597 	push	_bp
   0B08 85 81*00           2598 	mov	_bp,sp
   0B0B AA 82              2599 	mov	r2,dpl
   0B0D AB 83              2600 	mov	r3,dph
   0B0F AC F0              2601 	mov	r4,b
                           2602 ;	../../../core/net/rime/rudolph0.c:240: c->current.h.version = version;
   0B11 74 58              2603 	mov	a,#0x58
   0B13 2A                 2604 	add	a,r2
   0B14 FA                 2605 	mov	r2,a
   0B15 E4                 2606 	clr	a
   0B16 3B                 2607 	addc	a,r3
   0B17 FB                 2608 	mov	r3,a
   0B18 0A                 2609 	inc	r2
   0B19 BA 00 01           2610 	cjne	r2,#0x00,00103$
   0B1C 0B                 2611 	inc	r3
   0B1D                    2612 00103$:
   0B1D E5*00              2613 	mov	a,_bp
   0B1F 24 FC              2614 	add	a,#0xfc
   0B21 F8                 2615 	mov	r0,a
   0B22 86 05              2616 	mov	ar5,@r0
   0B24 8A 82              2617 	mov	dpl,r2
   0B26 8B 83              2618 	mov	dph,r3
   0B28 8C F0              2619 	mov	b,r4
   0B2A ED                 2620 	mov	a,r5
   0B2B 12s00r00           2621 	lcall	__gptrput
   0B2E D0*00              2622 	pop	_bp
   0B30 22                 2623 	ret
                           2624 	.area CSEG    (CODE)
                           2625 	.area CONST   (CODE)
   0000                    2626 _polite:
   0000r51s07              2627 	.byte _recv_nack,(_recv_nack >> 8)
   0002 00 00              2628 	.byte #0x00,#0x00
   0004 00 00              2629 	.byte #0x00,#0x00
   0006                    2630 _stbroadcast:
   0006rA6s02              2631 	.byte _recv,(_recv >> 8)
   0008r1Es02              2632 	.byte _sent,(_sent >> 8)
                           2633 	.area XINIT   (CODE)
                           2634 	.area CABS    (ABS,CODE)
