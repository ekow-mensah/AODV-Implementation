                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6121 (Nov 17 2015) (CYGWIN)
                              4 ; This file was generated Sat Jan 27 13:27:04 2018
                              5 ;--------------------------------------------------------
                              6 	.module resolv
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _IRCON2_P2IF
                             13 	.globl _IRCON2_UTX0IF
                             14 	.globl _IRCON2_UTX1IF
                             15 	.globl _IRCON2_P1IF
                             16 	.globl _IRCON2_WDTIF
                             17 	.globl _CY
                             18 	.globl _AC
                             19 	.globl _F0
                             20 	.globl _RS1
                             21 	.globl _RS0
                             22 	.globl _OV
                             23 	.globl _F1
                             24 	.globl _P
                             25 	.globl _IRCON_DMAIF
                             26 	.globl _IRCON_T1IF
                             27 	.globl _IRCON_T2IF
                             28 	.globl _IRCON_T3IF
                             29 	.globl _IRCON_T4IF
                             30 	.globl _IRCON_P0IF
                             31 	.globl _IRCON_STIF
                             32 	.globl _IEN1_DMAIE
                             33 	.globl _IEN1_T1IE
                             34 	.globl _IEN1_T2IE
                             35 	.globl _IEN1_T3IE
                             36 	.globl _IEN1_T4IE
                             37 	.globl _IEN1_P0IE
                             38 	.globl _IEN0_RFERRIE
                             39 	.globl _IEN0_ADCIE
                             40 	.globl _IEN0_URX0IE
                             41 	.globl _IEN0_URX1IE
                             42 	.globl _IEN0_ENCIE
                             43 	.globl _IEN0_STIE
                             44 	.globl _IEN0_EA
                             45 	.globl _EA
                             46 	.globl _P2_4
                             47 	.globl _P2_3
                             48 	.globl _P2_2
                             49 	.globl _P2_1
                             50 	.globl _P2_0
                             51 	.globl _S0CON_ENCIF_0
                             52 	.globl _S0CON_ENCIF_1
                             53 	.globl _P1_7
                             54 	.globl _P1_6
                             55 	.globl _P1_5
                             56 	.globl _P1_4
                             57 	.globl _P1_3
                             58 	.globl _P1_2
                             59 	.globl _P1_1
                             60 	.globl _P1_0
                             61 	.globl _TCON_IT0
                             62 	.globl _TCON_RFERRIF
                             63 	.globl _TCON_IT1
                             64 	.globl _TCON_URX0IF
                             65 	.globl _TCON_ADCIF
                             66 	.globl _TCON_URX1IF
                             67 	.globl _P0_0
                             68 	.globl _P0_1
                             69 	.globl _P0_2
                             70 	.globl _P0_3
                             71 	.globl _P0_4
                             72 	.globl _P0_5
                             73 	.globl _P0_6
                             74 	.globl _P0_7
                             75 	.globl _P2DIR
                             76 	.globl _P1DIR
                             77 	.globl _P0DIR
                             78 	.globl _U1GCR
                             79 	.globl _U1UCR
                             80 	.globl _U1BAUD
                             81 	.globl _U1BUF
                             82 	.globl _U1CSR
                             83 	.globl _P2INP
                             84 	.globl _P1INP
                             85 	.globl _P2SEL
                             86 	.globl _P1SEL
                             87 	.globl _P0SEL
                             88 	.globl _ADCCFG
                             89 	.globl _PERCFG
                             90 	.globl _B
                             91 	.globl _T4CC1
                             92 	.globl _T4CCTL1
                             93 	.globl _T4CC0
                             94 	.globl _T4CCTL0
                             95 	.globl _T4CTL
                             96 	.globl _T4CNT
                             97 	.globl _RFIF
                             98 	.globl _IRCON2
                             99 	.globl _T1CCTL2
                            100 	.globl _T1CCTL1
                            101 	.globl _T1CCTL0
                            102 	.globl _T1CTL
                            103 	.globl _T1CNTH
                            104 	.globl _T1CNTL
                            105 	.globl _RFST
                            106 	.globl _ACC
                            107 	.globl _T1CC2H
                            108 	.globl _T1CC2L
                            109 	.globl _T1CC1H
                            110 	.globl _T1CC1L
                            111 	.globl _T1CC0H
                            112 	.globl _T1CC0L
                            113 	.globl _RFD
                            114 	.globl _TIMIF
                            115 	.globl _DMAREQ
                            116 	.globl _DMAARM
                            117 	.globl _DMA0CFGH
                            118 	.globl _DMA0CFGL
                            119 	.globl _DMA1CFGH
                            120 	.globl _DMA1CFGL
                            121 	.globl _DMAIRQ
                            122 	.globl _PSW
                            123 	.globl _T3CC1
                            124 	.globl _T3CCTL1
                            125 	.globl _T3CC0
                            126 	.globl _T3CCTL0
                            127 	.globl _T3CTL
                            128 	.globl _T3CNT
                            129 	.globl _WDCTL
                            130 	.globl _T2CON
                            131 	.globl _MEMCTR
                            132 	.globl _CLKCON
                            133 	.globl _U0GCR
                            134 	.globl _U0UCR
                            135 	.globl _T2CNF
                            136 	.globl _U0BAUD
                            137 	.globl _U0BUF
                            138 	.globl _IRCON
                            139 	.globl _SLEEP
                            140 	.globl _RNDH
                            141 	.globl _RNDL
                            142 	.globl _ADCH
                            143 	.globl _ADCL
                            144 	.globl _IP1
                            145 	.globl _IEN1
                            146 	.globl _RCCTL
                            147 	.globl _ADCCON3
                            148 	.globl _ADCCON2
                            149 	.globl _ADCCON1
                            150 	.globl _ENCCS
                            151 	.globl _ENCDO
                            152 	.globl _ENCDI
                            153 	.globl _FWDATA
                            154 	.globl _FCTL
                            155 	.globl _FADDRH
                            156 	.globl _FADDRL
                            157 	.globl _FWT
                            158 	.globl _IP0
                            159 	.globl _IEN0
                            160 	.globl _IE
                            161 	.globl _T2THD
                            162 	.globl _T2TLD
                            163 	.globl _T2CAPHPH
                            164 	.globl _T2CAPLPL
                            165 	.globl _T2OF2
                            166 	.globl _T2OF1
                            167 	.globl _T2OF0
                            168 	.globl _P2
                            169 	.globl _PSBANK
                            170 	.globl _FMAP
                            171 	.globl _T2PEROF2
                            172 	.globl _T2PEROF1
                            173 	.globl _T2PEROF0
                            174 	.globl _S1CON
                            175 	.globl _IEN2
                            176 	.globl _HSRC
                            177 	.globl _S0CON
                            178 	.globl _ST2
                            179 	.globl _ST1
                            180 	.globl _ST0
                            181 	.globl _T2CMP
                            182 	.globl __XPAGE
                            183 	.globl _DPS
                            184 	.globl _RFIM
                            185 	.globl _P1
                            186 	.globl _P0INP
                            187 	.globl _P1IEN
                            188 	.globl _PICTL
                            189 	.globl _P2IFG
                            190 	.globl _P1IFG
                            191 	.globl _P0IFG
                            192 	.globl _TCON
                            193 	.globl _PCON
                            194 	.globl _U0CSR
                            195 	.globl _DPH1
                            196 	.globl _DPL1
                            197 	.globl _DPH0
                            198 	.globl _DPL0
                            199 	.globl _SP
                            200 	.globl _P0
                            201 	.globl _resolv_process
                            202 	.globl _resolv_event_found
                            203 	.globl _ADC_SHADOW
                            204 	.globl _U1BUF_SHADOW
                            205 	.globl _RFD_SHADOW
                            206 	.globl _U0BUF_SHADOW
                            207 	.globl _RFSTATUS
                            208 	.globl _CHIPID
                            209 	.globl _CHVER
                            210 	.globl _FSMTC1
                            211 	.globl _RXFIFOCNT
                            212 	.globl _IOCFG3
                            213 	.globl _IOCFG2
                            214 	.globl _IOCFG1
                            215 	.globl _IOCFG0
                            216 	.globl _SHORTADDRL
                            217 	.globl _SHORTADDRH
                            218 	.globl _PANIDL
                            219 	.globl _PANIDH
                            220 	.globl _IEEE_ADDR7
                            221 	.globl _IEEE_ADDR6
                            222 	.globl _IEEE_ADDR5
                            223 	.globl _IEEE_ADDR4
                            224 	.globl _IEEE_ADDR3
                            225 	.globl _IEEE_ADDR2
                            226 	.globl _IEEE_ADDR1
                            227 	.globl _IEEE_ADDR0
                            228 	.globl _DACTSTL
                            229 	.globl _DACTSTH
                            230 	.globl _ADCTSTL
                            231 	.globl _ADCTSTH
                            232 	.globl _FSMSTATE
                            233 	.globl _AGCCTRLL
                            234 	.globl _AGCCTRLH
                            235 	.globl _MANORL
                            236 	.globl _MANORH
                            237 	.globl _MANANDL
                            238 	.globl _MANANDH
                            239 	.globl _FSMTCL
                            240 	.globl _FSMTCH
                            241 	.globl _RFPWR
                            242 	.globl _CSPT
                            243 	.globl _CSPCTRL
                            244 	.globl _CSPZ
                            245 	.globl _CSPY
                            246 	.globl _CSPX
                            247 	.globl _FSCTRLL
                            248 	.globl _FSCTRLH
                            249 	.globl _RXCTRL1L
                            250 	.globl _RXCTRL1H
                            251 	.globl _RXCTRL0L
                            252 	.globl _RXCTRL0H
                            253 	.globl _TXCTRLL
                            254 	.globl _TXCTRLH
                            255 	.globl _SYNCWORDL
                            256 	.globl _SYNCWORDH
                            257 	.globl _RSSIL
                            258 	.globl _RSSIH
                            259 	.globl _MDMCTRL1L
                            260 	.globl _MDMCTRL1H
                            261 	.globl _MDMCTRL0L
                            262 	.globl _MDMCTRL0H
                            263 	.globl _resolv_query
                            264 	.globl _resolv_lookup
                            265 	.globl _resolv_getserver
                            266 	.globl _resolv_conf
                            267 ;--------------------------------------------------------
                            268 ; special function registers
                            269 ;--------------------------------------------------------
                            270 	.area RSEG    (ABS,DATA)
   0000                     271 	.org 0x0000
                    0080    272 _P0	=	0x0080
                    0081    273 _SP	=	0x0081
                    0082    274 _DPL0	=	0x0082
                    0083    275 _DPH0	=	0x0083
                    0084    276 _DPL1	=	0x0084
                    0085    277 _DPH1	=	0x0085
                    0086    278 _U0CSR	=	0x0086
                    0087    279 _PCON	=	0x0087
                    0088    280 _TCON	=	0x0088
                    0089    281 _P0IFG	=	0x0089
                    008A    282 _P1IFG	=	0x008a
                    008B    283 _P2IFG	=	0x008b
                    008C    284 _PICTL	=	0x008c
                    008D    285 _P1IEN	=	0x008d
                    008F    286 _P0INP	=	0x008f
                    0090    287 _P1	=	0x0090
                    0091    288 _RFIM	=	0x0091
                    0092    289 _DPS	=	0x0092
                    0093    290 __XPAGE	=	0x0093
                    0094    291 _T2CMP	=	0x0094
                    0095    292 _ST0	=	0x0095
                    0096    293 _ST1	=	0x0096
                    0097    294 _ST2	=	0x0097
                    0098    295 _S0CON	=	0x0098
                    0099    296 _HSRC	=	0x0099
                    009A    297 _IEN2	=	0x009a
                    009B    298 _S1CON	=	0x009b
                    009C    299 _T2PEROF0	=	0x009c
                    009D    300 _T2PEROF1	=	0x009d
                    009E    301 _T2PEROF2	=	0x009e
                    009F    302 _FMAP	=	0x009f
                    009F    303 _PSBANK	=	0x009f
                    00A0    304 _P2	=	0x00a0
                    00A1    305 _T2OF0	=	0x00a1
                    00A2    306 _T2OF1	=	0x00a2
                    00A3    307 _T2OF2	=	0x00a3
                    00A4    308 _T2CAPLPL	=	0x00a4
                    00A5    309 _T2CAPHPH	=	0x00a5
                    00A6    310 _T2TLD	=	0x00a6
                    00A7    311 _T2THD	=	0x00a7
                    00A8    312 _IE	=	0x00a8
                    00A8    313 _IEN0	=	0x00a8
                    00A9    314 _IP0	=	0x00a9
                    00AB    315 _FWT	=	0x00ab
                    00AC    316 _FADDRL	=	0x00ac
                    00AD    317 _FADDRH	=	0x00ad
                    00AE    318 _FCTL	=	0x00ae
                    00AF    319 _FWDATA	=	0x00af
                    00B1    320 _ENCDI	=	0x00b1
                    00B2    321 _ENCDO	=	0x00b2
                    00B3    322 _ENCCS	=	0x00b3
                    00B4    323 _ADCCON1	=	0x00b4
                    00B5    324 _ADCCON2	=	0x00b5
                    00B6    325 _ADCCON3	=	0x00b6
                    00B7    326 _RCCTL	=	0x00b7
                    00B8    327 _IEN1	=	0x00b8
                    00B9    328 _IP1	=	0x00b9
                    00BA    329 _ADCL	=	0x00ba
                    00BB    330 _ADCH	=	0x00bb
                    00BC    331 _RNDL	=	0x00bc
                    00BD    332 _RNDH	=	0x00bd
                    00BE    333 _SLEEP	=	0x00be
                    00C0    334 _IRCON	=	0x00c0
                    00C1    335 _U0BUF	=	0x00c1
                    00C2    336 _U0BAUD	=	0x00c2
                    00C3    337 _T2CNF	=	0x00c3
                    00C4    338 _U0UCR	=	0x00c4
                    00C5    339 _U0GCR	=	0x00c5
                    00C6    340 _CLKCON	=	0x00c6
                    00C7    341 _MEMCTR	=	0x00c7
                    00C8    342 _T2CON	=	0x00c8
                    00C9    343 _WDCTL	=	0x00c9
                    00CA    344 _T3CNT	=	0x00ca
                    00CB    345 _T3CTL	=	0x00cb
                    00CC    346 _T3CCTL0	=	0x00cc
                    00CD    347 _T3CC0	=	0x00cd
                    00CE    348 _T3CCTL1	=	0x00ce
                    00CF    349 _T3CC1	=	0x00cf
                    00D0    350 _PSW	=	0x00d0
                    00D1    351 _DMAIRQ	=	0x00d1
                    00D2    352 _DMA1CFGL	=	0x00d2
                    00D3    353 _DMA1CFGH	=	0x00d3
                    00D4    354 _DMA0CFGL	=	0x00d4
                    00D5    355 _DMA0CFGH	=	0x00d5
                    00D6    356 _DMAARM	=	0x00d6
                    00D7    357 _DMAREQ	=	0x00d7
                    00D8    358 _TIMIF	=	0x00d8
                    00D9    359 _RFD	=	0x00d9
                    00DA    360 _T1CC0L	=	0x00da
                    00DB    361 _T1CC0H	=	0x00db
                    00DC    362 _T1CC1L	=	0x00dc
                    00DD    363 _T1CC1H	=	0x00dd
                    00DE    364 _T1CC2L	=	0x00de
                    00DF    365 _T1CC2H	=	0x00df
                    00E0    366 _ACC	=	0x00e0
                    00E1    367 _RFST	=	0x00e1
                    00E2    368 _T1CNTL	=	0x00e2
                    00E3    369 _T1CNTH	=	0x00e3
                    00E4    370 _T1CTL	=	0x00e4
                    00E5    371 _T1CCTL0	=	0x00e5
                    00E6    372 _T1CCTL1	=	0x00e6
                    00E7    373 _T1CCTL2	=	0x00e7
                    00E8    374 _IRCON2	=	0x00e8
                    00E9    375 _RFIF	=	0x00e9
                    00EA    376 _T4CNT	=	0x00ea
                    00EB    377 _T4CTL	=	0x00eb
                    00EC    378 _T4CCTL0	=	0x00ec
                    00ED    379 _T4CC0	=	0x00ed
                    00EE    380 _T4CCTL1	=	0x00ee
                    00EF    381 _T4CC1	=	0x00ef
                    00F0    382 _B	=	0x00f0
                    00F1    383 _PERCFG	=	0x00f1
                    00F2    384 _ADCCFG	=	0x00f2
                    00F3    385 _P0SEL	=	0x00f3
                    00F4    386 _P1SEL	=	0x00f4
                    00F5    387 _P2SEL	=	0x00f5
                    00F6    388 _P1INP	=	0x00f6
                    00F7    389 _P2INP	=	0x00f7
                    00F8    390 _U1CSR	=	0x00f8
                    00F9    391 _U1BUF	=	0x00f9
                    00FA    392 _U1BAUD	=	0x00fa
                    00FB    393 _U1UCR	=	0x00fb
                    00FC    394 _U1GCR	=	0x00fc
                    00FD    395 _P0DIR	=	0x00fd
                    00FE    396 _P1DIR	=	0x00fe
                    00FF    397 _P2DIR	=	0x00ff
                            398 ;--------------------------------------------------------
                            399 ; special function bits
                            400 ;--------------------------------------------------------
                            401 	.area RSEG    (ABS,DATA)
   0000                     402 	.org 0x0000
                    0087    403 _P0_7	=	0x0087
                    0086    404 _P0_6	=	0x0086
                    0085    405 _P0_5	=	0x0085
                    0084    406 _P0_4	=	0x0084
                    0083    407 _P0_3	=	0x0083
                    0082    408 _P0_2	=	0x0082
                    0081    409 _P0_1	=	0x0081
                    0080    410 _P0_0	=	0x0080
                    008F    411 _TCON_URX1IF	=	0x008f
                    008D    412 _TCON_ADCIF	=	0x008d
                    008B    413 _TCON_URX0IF	=	0x008b
                    008A    414 _TCON_IT1	=	0x008a
                    0089    415 _TCON_RFERRIF	=	0x0089
                    0088    416 _TCON_IT0	=	0x0088
                    0090    417 _P1_0	=	0x0090
                    0091    418 _P1_1	=	0x0091
                    0092    419 _P1_2	=	0x0092
                    0093    420 _P1_3	=	0x0093
                    0094    421 _P1_4	=	0x0094
                    0095    422 _P1_5	=	0x0095
                    0096    423 _P1_6	=	0x0096
                    0097    424 _P1_7	=	0x0097
                    0099    425 _S0CON_ENCIF_1	=	0x0099
                    0098    426 _S0CON_ENCIF_0	=	0x0098
                    00A0    427 _P2_0	=	0x00a0
                    00A1    428 _P2_1	=	0x00a1
                    00A2    429 _P2_2	=	0x00a2
                    00A3    430 _P2_3	=	0x00a3
                    00A4    431 _P2_4	=	0x00a4
                    00AF    432 _EA	=	0x00af
                    00AF    433 _IEN0_EA	=	0x00af
                    00AD    434 _IEN0_STIE	=	0x00ad
                    00AC    435 _IEN0_ENCIE	=	0x00ac
                    00AB    436 _IEN0_URX1IE	=	0x00ab
                    00AA    437 _IEN0_URX0IE	=	0x00aa
                    00A9    438 _IEN0_ADCIE	=	0x00a9
                    00A8    439 _IEN0_RFERRIE	=	0x00a8
                    00BD    440 _IEN1_P0IE	=	0x00bd
                    00BC    441 _IEN1_T4IE	=	0x00bc
                    00BB    442 _IEN1_T3IE	=	0x00bb
                    00BA    443 _IEN1_T2IE	=	0x00ba
                    00B9    444 _IEN1_T1IE	=	0x00b9
                    00B8    445 _IEN1_DMAIE	=	0x00b8
                    00C7    446 _IRCON_STIF	=	0x00c7
                    00C5    447 _IRCON_P0IF	=	0x00c5
                    00C4    448 _IRCON_T4IF	=	0x00c4
                    00C3    449 _IRCON_T3IF	=	0x00c3
                    00C2    450 _IRCON_T2IF	=	0x00c2
                    00C1    451 _IRCON_T1IF	=	0x00c1
                    00C0    452 _IRCON_DMAIF	=	0x00c0
                    00D0    453 _P	=	0x00d0
                    00D1    454 _F1	=	0x00d1
                    00D2    455 _OV	=	0x00d2
                    00D3    456 _RS0	=	0x00d3
                    00D4    457 _RS1	=	0x00d4
                    00D5    458 _F0	=	0x00d5
                    00D6    459 _AC	=	0x00d6
                    00D7    460 _CY	=	0x00d7
                    00EC    461 _IRCON2_WDTIF	=	0x00ec
                    00EB    462 _IRCON2_P1IF	=	0x00eb
                    00EA    463 _IRCON2_UTX1IF	=	0x00ea
                    00E9    464 _IRCON2_UTX0IF	=	0x00e9
                    00E8    465 _IRCON2_P2IF	=	0x00e8
                            466 ;--------------------------------------------------------
                            467 ; overlayable register banks
                            468 ;--------------------------------------------------------
                            469 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     470 	.ds 8
                            471 ;--------------------------------------------------------
                            472 ; internal ram data
                            473 ;--------------------------------------------------------
                            474 	.area DSEG    (DATA)
                            475 ;--------------------------------------------------------
                            476 ; overlayable items in internal ram 
                            477 ;--------------------------------------------------------
                            478 	.area OSEG    (OVR,DATA)
                            479 ;--------------------------------------------------------
                            480 ; indirectly addressable internal ram data
                            481 ;--------------------------------------------------------
                            482 	.area ISEG    (DATA)
                            483 ;--------------------------------------------------------
                            484 ; absolute internal ram data
                            485 ;--------------------------------------------------------
                            486 	.area IABS    (ABS,DATA)
                            487 	.area IABS    (ABS,DATA)
                            488 ;--------------------------------------------------------
                            489 ; bit data
                            490 ;--------------------------------------------------------
                            491 	.area BSEG    (BIT)
                            492 ;--------------------------------------------------------
                            493 ; paged external ram data
                            494 ;--------------------------------------------------------
                            495 	.area PSEG    (PAG,XDATA)
                            496 ;--------------------------------------------------------
                            497 ; external ram data
                            498 ;--------------------------------------------------------
                            499 	.area XSEG    (XDATA)
                    DF02    500 _MDMCTRL0H	=	0xdf02
                    DF03    501 _MDMCTRL0L	=	0xdf03
                    DF04    502 _MDMCTRL1H	=	0xdf04
                    DF05    503 _MDMCTRL1L	=	0xdf05
                    DF06    504 _RSSIH	=	0xdf06
                    DF07    505 _RSSIL	=	0xdf07
                    DF08    506 _SYNCWORDH	=	0xdf08
                    DF09    507 _SYNCWORDL	=	0xdf09
                    DF0A    508 _TXCTRLH	=	0xdf0a
                    DF0B    509 _TXCTRLL	=	0xdf0b
                    DF0C    510 _RXCTRL0H	=	0xdf0c
                    DF0D    511 _RXCTRL0L	=	0xdf0d
                    DF0E    512 _RXCTRL1H	=	0xdf0e
                    DF0F    513 _RXCTRL1L	=	0xdf0f
                    DF10    514 _FSCTRLH	=	0xdf10
                    DF11    515 _FSCTRLL	=	0xdf11
                    DF12    516 _CSPX	=	0xdf12
                    DF13    517 _CSPY	=	0xdf13
                    DF14    518 _CSPZ	=	0xdf14
                    DF15    519 _CSPCTRL	=	0xdf15
                    DF16    520 _CSPT	=	0xdf16
                    DF17    521 _RFPWR	=	0xdf17
                    DF20    522 _FSMTCH	=	0xdf20
                    DF21    523 _FSMTCL	=	0xdf21
                    DF22    524 _MANANDH	=	0xdf22
                    DF23    525 _MANANDL	=	0xdf23
                    DF24    526 _MANORH	=	0xdf24
                    DF25    527 _MANORL	=	0xdf25
                    DF26    528 _AGCCTRLH	=	0xdf26
                    DF27    529 _AGCCTRLL	=	0xdf27
                    DF39    530 _FSMSTATE	=	0xdf39
                    DF3A    531 _ADCTSTH	=	0xdf3a
                    DF3B    532 _ADCTSTL	=	0xdf3b
                    DF3C    533 _DACTSTH	=	0xdf3c
                    DF3D    534 _DACTSTL	=	0xdf3d
                    DF43    535 _IEEE_ADDR0	=	0xdf43
                    DF44    536 _IEEE_ADDR1	=	0xdf44
                    DF45    537 _IEEE_ADDR2	=	0xdf45
                    DF46    538 _IEEE_ADDR3	=	0xdf46
                    DF47    539 _IEEE_ADDR4	=	0xdf47
                    DF48    540 _IEEE_ADDR5	=	0xdf48
                    DF49    541 _IEEE_ADDR6	=	0xdf49
                    DF4A    542 _IEEE_ADDR7	=	0xdf4a
                    DF4B    543 _PANIDH	=	0xdf4b
                    DF4C    544 _PANIDL	=	0xdf4c
                    DF4D    545 _SHORTADDRH	=	0xdf4d
                    DF4E    546 _SHORTADDRL	=	0xdf4e
                    DF4F    547 _IOCFG0	=	0xdf4f
                    DF50    548 _IOCFG1	=	0xdf50
                    DF51    549 _IOCFG2	=	0xdf51
                    DF52    550 _IOCFG3	=	0xdf52
                    DF53    551 _RXFIFOCNT	=	0xdf53
                    DF54    552 _FSMTC1	=	0xdf54
                    DF60    553 _CHVER	=	0xdf60
                    DF61    554 _CHIPID	=	0xdf61
                    DF62    555 _RFSTATUS	=	0xdf62
                    DFC1    556 _U0BUF_SHADOW	=	0xdfc1
                    DFD9    557 _RFD_SHADOW	=	0xdfd9
                    DFF9    558 _U1BUF_SHADOW	=	0xdff9
                    DFBA    559 _ADC_SHADOW	=	0xdfba
   0000                     560 _names:
   0000                     561 	.ds 164
   00A4                     562 _seqno:
   00A4                     563 	.ds 1
   00A5                     564 _retry:
   00A5                     565 	.ds 10
   00AF                     566 _resolv_event_found::
   00AF                     567 	.ds 1
   00B0                     568 _check_entries_endquery_4_11:
   00B0                     569 	.ds 5
   00B5                     570 _newdata_nquestions_1_1:
   00B5                     571 	.ds 1
   00B6                     572 _newdata_nanswers_1_1:
   00B6                     573 	.ds 1
   00B7                     574 _newdata_i_1_1:
   00B7                     575 	.ds 1
   00B8                     576 _resolv_query_i_1_1:
   00B8                     577 	.ds 1
   00B9                     578 _resolv_query_lseq_1_1:
   00B9                     579 	.ds 1
   00BA                     580 _resolv_query_lseqi_1_1:
   00BA                     581 	.ds 1
   00BB                     582 _resolv_lookup_i_1_1:
   00BB                     583 	.ds 1
   00BC                     584 _resolv_conf_server_1_1:
   00BC                     585 	.ds 4
                            586 ;--------------------------------------------------------
                            587 ; absolute external ram data
                            588 ;--------------------------------------------------------
                            589 	.area XABS    (ABS,XDATA)
                            590 ;--------------------------------------------------------
                            591 ; external initialized ram data
                            592 ;--------------------------------------------------------
                            593 	.area XISEG   (XDATA)
   0000                     594 _resolv_conn:
   0000                     595 	.ds 3
   0003                     596 _resolv_process::
   0003                     597 	.ds 9
                            598 	.area HOME    (CODE)
                            599 	.area GSINIT0 (CODE)
                            600 	.area GSINIT1 (CODE)
                            601 	.area GSINIT2 (CODE)
                            602 	.area GSINIT3 (CODE)
                            603 	.area GSINIT4 (CODE)
                            604 	.area GSINIT5 (CODE)
                            605 	.area GSINIT  (CODE)
                            606 	.area GSFINAL (CODE)
                            607 	.area CSEG    (CODE)
                            608 ;--------------------------------------------------------
                            609 ; global & static initialisations
                            610 ;--------------------------------------------------------
                            611 	.area HOME    (CODE)
                            612 	.area GSINIT  (CODE)
                            613 	.area GSFINAL (CODE)
                            614 	.area GSINIT  (CODE)
                            615 ;------------------------------------------------------------
                            616 ;Allocation info for local variables in function 'check_entries'
                            617 ;------------------------------------------------------------
                            618 ;hdr                       Allocated to stack - offset 1
                            619 ;query                     Allocated to stack - offset 4
                            620 ;nptr                      Allocated to stack - offset 7
                            621 ;nameptr                   Allocated to stack - offset 10
                            622 ;i                         Allocated to registers r2 
                            623 ;n                         Allocated to registers r6 
                            624 ;namemapptr                Allocated to stack - offset 13
                            625 ;sloc0                     Allocated to stack - offset 16
                            626 ;sloc1                     Allocated to stack - offset 19
                            627 ;endquery                  Allocated with name '_check_entries_endquery_4_11'
                            628 ;------------------------------------------------------------
                            629 ;	../../../core/net/resolv.c:259: static unsigned char endquery[] =
   0000 90s00rB0            630 	mov	dptr,#_check_entries_endquery_4_11
   0003 E4                  631 	clr	a
   0004 F0                  632 	movx	@dptr,a
   0005 90s00rB1            633 	mov	dptr,#(_check_entries_endquery_4_11 + 0x0001)
   0008 F0                  634 	movx	@dptr,a
   0009 90s00rB2            635 	mov	dptr,#(_check_entries_endquery_4_11 + 0x0002)
   000C 74 01               636 	mov	a,#0x01
   000E F0                  637 	movx	@dptr,a
   000F 90s00rB3            638 	mov	dptr,#(_check_entries_endquery_4_11 + 0x0003)
   0012 E4                  639 	clr	a
   0013 F0                  640 	movx	@dptr,a
   0014 90s00rB4            641 	mov	dptr,#(_check_entries_endquery_4_11 + 0x0004)
   0017 74 01               642 	mov	a,#0x01
   0019 F0                  643 	movx	@dptr,a
                            644 ;--------------------------------------------------------
                            645 ; Home
                            646 ;--------------------------------------------------------
                            647 	.area HOME    (CODE)
                            648 	.area HOME    (CODE)
                            649 ;--------------------------------------------------------
                            650 ; code
                            651 ;--------------------------------------------------------
                            652 	.area CSEG    (CODE)
                            653 ;------------------------------------------------------------
                            654 ;Allocation info for local variables in function 'parse_name'
                            655 ;------------------------------------------------------------
                            656 ;query                     Allocated to registers r2 r3 r4 
                            657 ;n                         Allocated to stack - offset 1
                            658 ;sloc0                     Allocated to stack - offset 5
                            659 ;------------------------------------------------------------
                            660 ;	../../../core/net/resolv.c:182: parse_name(unsigned char *query)
                            661 ;	-----------------------------------------
                            662 ;	 function parse_name
                            663 ;	-----------------------------------------
   0000                     664 _parse_name:
                    0002    665 	ar2 = 0x02
                    0003    666 	ar3 = 0x03
                    0004    667 	ar4 = 0x04
                    0005    668 	ar5 = 0x05
                    0006    669 	ar6 = 0x06
                    0007    670 	ar7 = 0x07
                    0000    671 	ar0 = 0x00
                    0001    672 	ar1 = 0x01
   0000 C0*00               673 	push	_bp
   0002 85 81*00            674 	mov	_bp,sp
   0005 05 81               675 	inc	sp
   0007 AA 82               676 	mov	r2,dpl
   0009 AB 83               677 	mov	r3,dph
   000B AC F0               678 	mov	r4,b
                            679 ;	../../../core/net/resolv.c:186: do {
   000D                     680 00104$:
                            681 ;	../../../core/net/resolv.c:187: n = *query++;
   000D 8A 82               682 	mov	dpl,r2
   000F 8B 83               683 	mov	dph,r3
   0011 8C F0               684 	mov	b,r4
   0013 12s00r00            685 	lcall	__gptrget
   0016 FD                  686 	mov	r5,a
   0017 A3                  687 	inc	dptr
   0018 AA 82               688 	mov	r2,dpl
   001A AB 83               689 	mov	r3,dph
   001C A8*00               690 	mov	r0,_bp
   001E 08                  691 	inc	r0
   001F A6 05               692 	mov	@r0,ar5
                            693 ;	../../../core/net/resolv.c:189: while(n > 0) {
   0021 8A 06               694 	mov	ar6,r2
   0023 8B 07               695 	mov	ar7,r3
   0025 8C 05               696 	mov	ar5,r4
   0027 A8*00               697 	mov	r0,_bp
   0029 08                  698 	inc	r0
   002A 86 02               699 	mov	ar2,@r0
   002C                     700 00101$:
   002C EA                  701 	mov	a,r2
   002D 60 08               702 	jz	00113$
                            703 ;	../../../core/net/resolv.c:191: ++query;
   002F 0E                  704 	inc	r6
   0030 BE 00 01            705 	cjne	r6,#0x00,00115$
   0033 0F                  706 	inc	r7
   0034                     707 00115$:
                            708 ;	../../../core/net/resolv.c:192: --n;
   0034 1A                  709 	dec	r2
   0035 80 F5               710 	sjmp	00101$
   0037                     711 00113$:
   0037 8E 02               712 	mov	ar2,r6
   0039 8F 03               713 	mov	ar3,r7
   003B 8D 04               714 	mov	ar4,r5
                            715 ;	../../../core/net/resolv.c:195: } while(*query != 0);
   003D 8E 82               716 	mov	dpl,r6
   003F 8F 83               717 	mov	dph,r7
   0041 8D F0               718 	mov	b,r5
   0043 12s00r00            719 	lcall	__gptrget
   0046 70 C5               720 	jnz	00104$
                            721 ;	../../../core/net/resolv.c:197: return query + 1;
   0048 0E                  722 	inc	r6
   0049 BE 00 01            723 	cjne	r6,#0x00,00117$
   004C 0F                  724 	inc	r7
   004D                     725 00117$:
   004D 8E 82               726 	mov	dpl,r6
   004F 8F 83               727 	mov	dph,r7
   0051 8D F0               728 	mov	b,r5
   0053 85*00 81            729 	mov	sp,_bp
   0056 D0*00               730 	pop	_bp
   0058 22                  731 	ret
                            732 ;------------------------------------------------------------
                            733 ;Allocation info for local variables in function 'check_entries'
                            734 ;------------------------------------------------------------
                            735 ;hdr                       Allocated to stack - offset 1
                            736 ;query                     Allocated to stack - offset 4
                            737 ;nptr                      Allocated to stack - offset 7
                            738 ;nameptr                   Allocated to stack - offset 10
                            739 ;i                         Allocated to registers r2 
                            740 ;n                         Allocated to registers r6 
                            741 ;namemapptr                Allocated to stack - offset 13
                            742 ;sloc0                     Allocated to stack - offset 16
                            743 ;sloc1                     Allocated to stack - offset 19
                            744 ;endquery                  Allocated with name '_check_entries_endquery_4_11'
                            745 ;------------------------------------------------------------
                            746 ;	../../../core/net/resolv.c:206: check_entries(void)
                            747 ;	-----------------------------------------
                            748 ;	 function check_entries
                            749 ;	-----------------------------------------
   0059                     750 _check_entries:
   0059 C0*00               751 	push	_bp
   005B E5 81               752 	mov	a,sp
   005D F5*00               753 	mov	_bp,a
   005F 24 15               754 	add	a,#0x15
   0061 F5 81               755 	mov	sp,a
                            756 ;	../../../core/net/resolv.c:214: for(i = 0; i < RESOLV_ENTRIES; ++i) {
   0063 7A 00               757 	mov	r2,#0x00
   0065 7B 00               758 	mov	r3,#0x00
   0067                     759 00115$:
   0067 BB 04 00            760 	cjne	r3,#0x04,00138$
   006A                     761 00138$:
   006A 40 03               762 	jc	00139$
   006C 02s03rFA            763 	ljmp	00124$
   006F                     764 00139$:
                            765 ;	../../../core/net/resolv.c:215: namemapptr = &names[i];
   006F EB                  766 	mov	a,r3
   0070 75 F0 29            767 	mov	b,#0x29
   0073 A4                  768 	mul	ab
   0074 24r00               769 	add	a,#_names
   0076 FC                  770 	mov	r4,a
   0077 E4                  771 	clr	a
   0078 34s00               772 	addc	a,#(_names >> 8)
   007A FD                  773 	mov	r5,a
   007B E5*00               774 	mov	a,_bp
   007D 24 0D               775 	add	a,#0x0d
   007F F8                  776 	mov	r0,a
   0080 A6 04               777 	mov	@r0,ar4
   0082 08                  778 	inc	r0
   0083 A6 05               779 	mov	@r0,ar5
   0085 08                  780 	inc	r0
   0086 76 00               781 	mov	@r0,#0x00
                            782 ;	../../../core/net/resolv.c:216: if(namemapptr->state == STATE_NEW ||
   0088 E5*00               783 	mov	a,_bp
   008A 24 0D               784 	add	a,#0x0d
   008C F8                  785 	mov	r0,a
   008D 86 82               786 	mov	dpl,@r0
   008F 08                  787 	inc	r0
   0090 86 83               788 	mov	dph,@r0
   0092 08                  789 	inc	r0
   0093 86 F0               790 	mov	b,@r0
   0095 12s00r00            791 	lcall	__gptrget
   0098 FF                  792 	mov	r7,a
   0099 BF 01 02            793 	cjne	r7,#0x01,00140$
   009C 80 08               794 	sjmp	00112$
   009E                     795 00140$:
                            796 ;	../../../core/net/resolv.c:217: namemapptr->state == STATE_ASKING) {
   009E BF 02 02            797 	cjne	r7,#0x02,00141$
   00A1 80 03               798 	sjmp	00142$
   00A3                     799 00141$:
   00A3 02s03rF4            800 	ljmp	00117$
   00A6                     801 00142$:
   00A6                     802 00112$:
                            803 ;	../../../core/net/resolv.c:218: etimer_set(&retry, CLOCK_SECOND);
   00A6 C0 02               804 	push	ar2
   00A8 C0 03               805 	push	ar3
   00AA 74 80               806 	mov	a,#0x80
   00AC C0 E0               807 	push	acc
   00AE E4                  808 	clr	a
   00AF C0 E0               809 	push	acc
   00B1 90s00rA5            810 	mov	dptr,#_retry
   00B4 75 F0 00            811 	mov	b,#0x00
   00B7 12s00r00            812 	lcall	_etimer_set
   00BA 15 81               813 	dec	sp
   00BC 15 81               814 	dec	sp
   00BE D0 03               815 	pop	ar3
   00C0 D0 02               816 	pop	ar2
                            817 ;	../../../core/net/resolv.c:219: if(namemapptr->state == STATE_ASKING) {
   00C2 E5*00               818 	mov	a,_bp
   00C4 24 0D               819 	add	a,#0x0d
   00C6 F8                  820 	mov	r0,a
   00C7 86 82               821 	mov	dpl,@r0
   00C9 08                  822 	inc	r0
   00CA 86 83               823 	mov	dph,@r0
   00CC 08                  824 	inc	r0
   00CD 86 F0               825 	mov	b,@r0
   00CF 12s00r00            826 	lcall	__gptrget
   00D2 FF                  827 	mov	r7,a
   00D3 BF 02 02            828 	cjne	r7,#0x02,00143$
   00D6 80 03               829 	sjmp	00144$
   00D8                     830 00143$:
   00D8 02s01rA2            831 	ljmp	00107$
   00DB                     832 00144$:
                            833 ;	../../../core/net/resolv.c:220: if(--namemapptr->tmr == 0) {
   00DB E5*00               834 	mov	a,_bp
   00DD 24 0D               835 	add	a,#0x0d
   00DF F8                  836 	mov	r0,a
   00E0 E5*00               837 	mov	a,_bp
   00E2 24 10               838 	add	a,#0x10
   00E4 F9                  839 	mov	r1,a
   00E5 74 01               840 	mov	a,#0x01
   00E7 26                  841 	add	a,@r0
   00E8 F7                  842 	mov	@r1,a
   00E9 E4                  843 	clr	a
   00EA 08                  844 	inc	r0
   00EB 36                  845 	addc	a,@r0
   00EC 09                  846 	inc	r1
   00ED F7                  847 	mov	@r1,a
   00EE 08                  848 	inc	r0
   00EF 09                  849 	inc	r1
   00F0 E6                  850 	mov	a,@r0
   00F1 F7                  851 	mov	@r1,a
   00F2 E5*00               852 	mov	a,_bp
   00F4 24 10               853 	add	a,#0x10
   00F6 F8                  854 	mov	r0,a
   00F7 86 82               855 	mov	dpl,@r0
   00F9 08                  856 	inc	r0
   00FA 86 83               857 	mov	dph,@r0
   00FC 08                  858 	inc	r0
   00FD 86 F0               859 	mov	b,@r0
   00FF 12s00r00            860 	lcall	__gptrget
   0102 FF                  861 	mov	r7,a
   0103 1F                  862 	dec	r7
   0104 E5*00               863 	mov	a,_bp
   0106 24 10               864 	add	a,#0x10
   0108 F8                  865 	mov	r0,a
   0109 86 82               866 	mov	dpl,@r0
   010B 08                  867 	inc	r0
   010C 86 83               868 	mov	dph,@r0
   010E 08                  869 	inc	r0
   010F 86 F0               870 	mov	b,@r0
   0111 EF                  871 	mov	a,r7
   0112 12s00r00            872 	lcall	__gptrput
   0115 60 03               873 	jz	00145$
   0117 02s03rF4            874 	ljmp	00117$
   011A                     875 00145$:
                            876 ;	../../../core/net/resolv.c:221: if(++namemapptr->retries == MAX_RETRIES) {
   011A E5*00               877 	mov	a,_bp
   011C 24 0D               878 	add	a,#0x0d
   011E F8                  879 	mov	r0,a
   011F 74 02               880 	mov	a,#0x02
   0121 26                  881 	add	a,@r0
   0122 FC                  882 	mov	r4,a
   0123 E4                  883 	clr	a
   0124 08                  884 	inc	r0
   0125 36                  885 	addc	a,@r0
   0126 FD                  886 	mov	r5,a
   0127 08                  887 	inc	r0
   0128 86 06               888 	mov	ar6,@r0
   012A 8C 82               889 	mov	dpl,r4
   012C 8D 83               890 	mov	dph,r5
   012E 8E F0               891 	mov	b,r6
   0130 12s00r00            892 	lcall	__gptrget
   0133 FF                  893 	mov	r7,a
   0134 0F                  894 	inc	r7
   0135 8C 82               895 	mov	dpl,r4
   0137 8D 83               896 	mov	dph,r5
   0139 8E F0               897 	mov	b,r6
   013B EF                  898 	mov	a,r7
   013C 12s00r00            899 	lcall	__gptrput
   013F BF 08 43            900 	cjne	r7,#0x08,00102$
                            901 ;	../../../core/net/resolv.c:222: namemapptr->state = STATE_ERROR;
   0142 C0 03               902 	push	ar3
   0144 E5*00               903 	mov	a,_bp
   0146 24 0D               904 	add	a,#0x0d
   0148 F8                  905 	mov	r0,a
   0149 86 82               906 	mov	dpl,@r0
   014B 08                  907 	inc	r0
   014C 86 83               908 	mov	dph,@r0
   014E 08                  909 	inc	r0
   014F 86 F0               910 	mov	b,@r0
   0151 74 04               911 	mov	a,#0x04
   0153 12s00r00            912 	lcall	__gptrput
                            913 ;	../../../core/net/resolv.c:223: resolv_found(namemapptr->name, NULL);
   0156 E5*00               914 	mov	a,_bp
   0158 24 0D               915 	add	a,#0x0d
   015A F8                  916 	mov	r0,a
   015B 74 05               917 	mov	a,#0x05
   015D 26                  918 	add	a,@r0
   015E FF                  919 	mov	r7,a
   015F E4                  920 	clr	a
   0160 08                  921 	inc	r0
   0161 36                  922 	addc	a,@r0
   0162 FB                  923 	mov	r3,a
   0163 08                  924 	inc	r0
   0164 86 04               925 	mov	ar4,@r0
   0166 C0 03               926 	push	ar3
   0168 E4                  927 	clr	a
   0169 C0 E0               928 	push	acc
   016B C0 E0               929 	push	acc
   016D C0 E0               930 	push	acc
   016F 8F 82               931 	mov	dpl,r7
   0171 8B 83               932 	mov	dph,r3
   0173 8C F0               933 	mov	b,r4
   0175 12s0Br5F            934 	lcall	_resolv_found
   0178 15 81               935 	dec	sp
   017A 15 81               936 	dec	sp
   017C 15 81               937 	dec	sp
   017E D0 03               938 	pop	ar3
                            939 ;	../../../core/net/resolv.c:224: continue;
   0180 D0 03               940 	pop	ar3
   0182 02s03rF4            941 	ljmp	00117$
   0185                     942 00102$:
                            943 ;	../../../core/net/resolv.c:226: namemapptr->tmr = namemapptr->retries;
   0185 8C 82               944 	mov	dpl,r4
   0187 8D 83               945 	mov	dph,r5
   0189 8E F0               946 	mov	b,r6
   018B 12s00r00            947 	lcall	__gptrget
   018E FC                  948 	mov	r4,a
   018F E5*00               949 	mov	a,_bp
   0191 24 10               950 	add	a,#0x10
   0193 F8                  951 	mov	r0,a
   0194 86 82               952 	mov	dpl,@r0
   0196 08                  953 	inc	r0
   0197 86 83               954 	mov	dph,@r0
   0199 08                  955 	inc	r0
   019A 86 F0               956 	mov	b,@r0
   019C EC                  957 	mov	a,r4
   019D 12s00r00            958 	lcall	__gptrput
                            959 ;	../../../core/net/resolv.c:231: continue;
   01A0 80 47               960 	sjmp	00108$
   01A2                     961 00107$:
                            962 ;	../../../core/net/resolv.c:234: namemapptr->state = STATE_ASKING;
   01A2 E5*00               963 	mov	a,_bp
   01A4 24 0D               964 	add	a,#0x0d
   01A6 F8                  965 	mov	r0,a
   01A7 86 82               966 	mov	dpl,@r0
   01A9 08                  967 	inc	r0
   01AA 86 83               968 	mov	dph,@r0
   01AC 08                  969 	inc	r0
   01AD 86 F0               970 	mov	b,@r0
   01AF 74 02               971 	mov	a,#0x02
   01B1 12s00r00            972 	lcall	__gptrput
                            973 ;	../../../core/net/resolv.c:235: namemapptr->tmr = 1;
   01B4 E5*00               974 	mov	a,_bp
   01B6 24 0D               975 	add	a,#0x0d
   01B8 F8                  976 	mov	r0,a
   01B9 74 01               977 	mov	a,#0x01
   01BB 26                  978 	add	a,@r0
   01BC FC                  979 	mov	r4,a
   01BD E4                  980 	clr	a
   01BE 08                  981 	inc	r0
   01BF 36                  982 	addc	a,@r0
   01C0 FD                  983 	mov	r5,a
   01C1 08                  984 	inc	r0
   01C2 86 06               985 	mov	ar6,@r0
   01C4 8C 82               986 	mov	dpl,r4
   01C6 8D 83               987 	mov	dph,r5
   01C8 8E F0               988 	mov	b,r6
   01CA 74 01               989 	mov	a,#0x01
   01CC 12s00r00            990 	lcall	__gptrput
                            991 ;	../../../core/net/resolv.c:236: namemapptr->retries = 0;
   01CF E5*00               992 	mov	a,_bp
   01D1 24 0D               993 	add	a,#0x0d
   01D3 F8                  994 	mov	r0,a
   01D4 74 02               995 	mov	a,#0x02
   01D6 26                  996 	add	a,@r0
   01D7 FC                  997 	mov	r4,a
   01D8 E4                  998 	clr	a
   01D9 08                  999 	inc	r0
   01DA 36                 1000 	addc	a,@r0
   01DB FD                 1001 	mov	r5,a
   01DC 08                 1002 	inc	r0
   01DD 86 06              1003 	mov	ar6,@r0
   01DF 8C 82              1004 	mov	dpl,r4
   01E1 8D 83              1005 	mov	dph,r5
   01E3 8E F0              1006 	mov	b,r6
   01E5 E4                 1007 	clr	a
   01E6 12s00r00           1008 	lcall	__gptrput
   01E9                    1009 00108$:
                           1010 ;	../../../core/net/resolv.c:238: hdr = (struct dns_hdr *)uip_appdata;
   01E9 90s00r00           1011 	mov	dptr,#_uip_appdata
   01EC E0                 1012 	movx	a,@dptr
   01ED FC                 1013 	mov	r4,a
   01EE A3                 1014 	inc	dptr
   01EF E0                 1015 	movx	a,@dptr
   01F0 FD                 1016 	mov	r5,a
   01F1 A3                 1017 	inc	dptr
   01F2 E0                 1018 	movx	a,@dptr
   01F3 FE                 1019 	mov	r6,a
   01F4 A8*00              1020 	mov	r0,_bp
   01F6 08                 1021 	inc	r0
   01F7 A6 04              1022 	mov	@r0,ar4
   01F9 08                 1023 	inc	r0
   01FA A6 05              1024 	mov	@r0,ar5
   01FC 08                 1025 	inc	r0
   01FD A6 06              1026 	mov	@r0,ar6
                           1027 ;	../../../core/net/resolv.c:239: memset(hdr, 0, sizeof(struct dns_hdr));
   01FF C0 02              1028 	push	ar2
   0201 74 0C              1029 	mov	a,#0x0C
   0203 C0 E0              1030 	push	acc
   0205 E4                 1031 	clr	a
   0206 C0 E0              1032 	push	acc
   0208 E4                 1033 	clr	a
   0209 C0 E0              1034 	push	acc
   020B A8*00              1035 	mov	r0,_bp
   020D 08                 1036 	inc	r0
   020E 86 82              1037 	mov	dpl,@r0
   0210 08                 1038 	inc	r0
   0211 86 83              1039 	mov	dph,@r0
   0213 08                 1040 	inc	r0
   0214 86 F0              1041 	mov	b,@r0
   0216 12s00r00           1042 	lcall	_memset
   0219 15 81              1043 	dec	sp
   021B 15 81              1044 	dec	sp
   021D 15 81              1045 	dec	sp
   021F D0 02              1046 	pop	ar2
                           1047 ;	../../../core/net/resolv.c:240: hdr->id = htons(i);
   0221 8A 07              1048 	mov	ar7,r2
   0223 7C 00              1049 	mov	r4,#0x00
   0225 8F 82              1050 	mov	dpl,r7
   0227 8C 83              1051 	mov	dph,r4
   0229 12s00r00           1052 	lcall	_htons
   022C AC 82              1053 	mov	r4,dpl
   022E AD 83              1054 	mov	r5,dph
   0230 A8*00              1055 	mov	r0,_bp
   0232 08                 1056 	inc	r0
   0233 86 82              1057 	mov	dpl,@r0
   0235 08                 1058 	inc	r0
   0236 86 83              1059 	mov	dph,@r0
   0238 08                 1060 	inc	r0
   0239 86 F0              1061 	mov	b,@r0
   023B EC                 1062 	mov	a,r4
   023C 12s00r00           1063 	lcall	__gptrput
   023F A3                 1064 	inc	dptr
   0240 ED                 1065 	mov	a,r5
   0241 12s00r00           1066 	lcall	__gptrput
                           1067 ;	../../../core/net/resolv.c:241: hdr->flags1 = DNS_FLAG1_RD;
   0244 A8*00              1068 	mov	r0,_bp
   0246 08                 1069 	inc	r0
   0247 74 02              1070 	mov	a,#0x02
   0249 26                 1071 	add	a,@r0
   024A FC                 1072 	mov	r4,a
   024B E4                 1073 	clr	a
   024C 08                 1074 	inc	r0
   024D 36                 1075 	addc	a,@r0
   024E FD                 1076 	mov	r5,a
   024F 08                 1077 	inc	r0
   0250 86 06              1078 	mov	ar6,@r0
   0252 8C 82              1079 	mov	dpl,r4
   0254 8D 83              1080 	mov	dph,r5
   0256 8E F0              1081 	mov	b,r6
   0258 74 01              1082 	mov	a,#0x01
   025A 12s00r00           1083 	lcall	__gptrput
                           1084 ;	../../../core/net/resolv.c:242: hdr->numquestions = HTONS(1);
   025D A8*00              1085 	mov	r0,_bp
   025F 08                 1086 	inc	r0
   0260 74 04              1087 	mov	a,#0x04
   0262 26                 1088 	add	a,@r0
   0263 FC                 1089 	mov	r4,a
   0264 E4                 1090 	clr	a
   0265 08                 1091 	inc	r0
   0266 36                 1092 	addc	a,@r0
   0267 FD                 1093 	mov	r5,a
   0268 08                 1094 	inc	r0
   0269 86 06              1095 	mov	ar6,@r0
   026B 8C 82              1096 	mov	dpl,r4
   026D 8D 83              1097 	mov	dph,r5
   026F 8E F0              1098 	mov	b,r6
   0271 E4                 1099 	clr	a
   0272 12s00r00           1100 	lcall	__gptrput
   0275 A3                 1101 	inc	dptr
   0276 74 01              1102 	mov	a,#0x01
   0278 12s00r00           1103 	lcall	__gptrput
                           1104 ;	../../../core/net/resolv.c:243: query = (char *)uip_appdata + 12;
   027B 90s00r00           1105 	mov	dptr,#_uip_appdata
   027E E0                 1106 	movx	a,@dptr
   027F FC                 1107 	mov	r4,a
   0280 A3                 1108 	inc	dptr
   0281 E0                 1109 	movx	a,@dptr
   0282 FD                 1110 	mov	r5,a
   0283 A3                 1111 	inc	dptr
   0284 E0                 1112 	movx	a,@dptr
   0285 FE                 1113 	mov	r6,a
   0286 E5*00              1114 	mov	a,_bp
   0288 24 04              1115 	add	a,#0x04
   028A F8                 1116 	mov	r0,a
   028B 74 0C              1117 	mov	a,#0x0C
   028D 2C                 1118 	add	a,r4
   028E F6                 1119 	mov	@r0,a
   028F E4                 1120 	clr	a
   0290 3D                 1121 	addc	a,r5
   0291 08                 1122 	inc	r0
   0292 F6                 1123 	mov	@r0,a
   0293 08                 1124 	inc	r0
   0294 A6 06              1125 	mov	@r0,ar6
                           1126 ;	../../../core/net/resolv.c:244: nameptr = namemapptr->name;
   0296 E5*00              1127 	mov	a,_bp
   0298 24 0D              1128 	add	a,#0x0d
   029A F8                 1129 	mov	r0,a
   029B E5*00              1130 	mov	a,_bp
   029D 24 0A              1131 	add	a,#0x0a
   029F F9                 1132 	mov	r1,a
   02A0 74 05              1133 	mov	a,#0x05
   02A2 26                 1134 	add	a,@r0
   02A3 F7                 1135 	mov	@r1,a
   02A4 E4                 1136 	clr	a
   02A5 08                 1137 	inc	r0
   02A6 36                 1138 	addc	a,@r0
   02A7 09                 1139 	inc	r1
   02A8 F7                 1140 	mov	@r1,a
   02A9 08                 1141 	inc	r0
   02AA 09                 1142 	inc	r1
   02AB E6                 1143 	mov	a,@r0
   02AC F7                 1144 	mov	@r1,a
                           1145 ;	../../../core/net/resolv.c:245: --nameptr;
   02AD E5*00              1146 	mov	a,_bp
   02AF 24 0A              1147 	add	a,#0x0a
   02B1 F8                 1148 	mov	r0,a
   02B2 16                 1149 	dec	@r0
   02B3 B6 FF 02           1150 	cjne	@r0,#0xff,00148$
   02B6 08                 1151 	inc	r0
   02B7 16                 1152 	dec	@r0
   02B8                    1153 00148$:
                           1154 ;	../../../core/net/resolv.c:247: do {
   02B8                    1155 00109$:
                           1156 ;	../../../core/net/resolv.c:248: ++nameptr;
   02B8 E5*00              1157 	mov	a,_bp
   02BA 24 0A              1158 	add	a,#0x0a
   02BC F8                 1159 	mov	r0,a
   02BD 06                 1160 	inc	@r0
   02BE B6 00 02           1161 	cjne	@r0,#0x00,00149$
   02C1 08                 1162 	inc	r0
   02C2 06                 1163 	inc	@r0
   02C3                    1164 00149$:
                           1165 ;	../../../core/net/resolv.c:249: nptr = query;
   02C3 E5*00              1166 	mov	a,_bp
   02C5 24 04              1167 	add	a,#0x04
   02C7 F8                 1168 	mov	r0,a
   02C8 E5*00              1169 	mov	a,_bp
   02CA 24 07              1170 	add	a,#0x07
   02CC F9                 1171 	mov	r1,a
   02CD E6                 1172 	mov	a,@r0
   02CE F7                 1173 	mov	@r1,a
   02CF 08                 1174 	inc	r0
   02D0 09                 1175 	inc	r1
   02D1 E6                 1176 	mov	a,@r0
   02D2 F7                 1177 	mov	@r1,a
   02D3 08                 1178 	inc	r0
   02D4 09                 1179 	inc	r1
   02D5 E6                 1180 	mov	a,@r0
   02D6 F7                 1181 	mov	@r1,a
                           1182 ;	../../../core/net/resolv.c:250: ++query;
   02D7 E5*00              1183 	mov	a,_bp
   02D9 24 04              1184 	add	a,#0x04
   02DB F8                 1185 	mov	r0,a
   02DC 06                 1186 	inc	@r0
   02DD B6 00 02           1187 	cjne	@r0,#0x00,00150$
   02E0 08                 1188 	inc	r0
   02E1 06                 1189 	inc	@r0
   02E2                    1190 00150$:
                           1191 ;	../../../core/net/resolv.c:251: for(n = 0; *nameptr != '.' && *nameptr != 0; ++nameptr) {
   02E2 E5*00              1192 	mov	a,_bp
   02E4 24 04              1193 	add	a,#0x04
   02E6 F8                 1194 	mov	r0,a
   02E7 86 07              1195 	mov	ar7,@r0
   02E9 08                 1196 	inc	r0
   02EA 86 04              1197 	mov	ar4,@r0
   02EC 08                 1198 	inc	r0
   02ED 86 05              1199 	mov	ar5,@r0
   02EF 7E 00              1200 	mov	r6,#0x00
   02F1 E5*00              1201 	mov	a,_bp
   02F3 24 0A              1202 	add	a,#0x0a
   02F5 F8                 1203 	mov	r0,a
   02F6 E5*00              1204 	mov	a,_bp
   02F8 24 13              1205 	add	a,#0x13
   02FA F9                 1206 	mov	r1,a
   02FB E6                 1207 	mov	a,@r0
   02FC F7                 1208 	mov	@r1,a
   02FD 08                 1209 	inc	r0
   02FE 09                 1210 	inc	r1
   02FF E6                 1211 	mov	a,@r0
   0300 F7                 1212 	mov	@r1,a
   0301 08                 1213 	inc	r0
   0302 09                 1214 	inc	r1
   0303 E6                 1215 	mov	a,@r0
   0304 F7                 1216 	mov	@r1,a
   0305                    1217 00120$:
   0305 E5*00              1218 	mov	a,_bp
   0307 24 13              1219 	add	a,#0x13
   0309 F8                 1220 	mov	r0,a
   030A 86 82              1221 	mov	dpl,@r0
   030C 08                 1222 	inc	r0
   030D 86 83              1223 	mov	dph,@r0
   030F 08                 1224 	inc	r0
   0310 86 F0              1225 	mov	b,@r0
   0312 12s00r00           1226 	lcall	__gptrget
   0315 FA                 1227 	mov	r2,a
   0316 BA 2E 02           1228 	cjne	r2,#0x2E,00151$
   0319 80 22              1229 	sjmp	00137$
   031B                    1230 00151$:
   031B BA 00 02           1231 	cjne	r2,#0x00,00152$
   031E 80 1D              1232 	sjmp	00137$
   0320                    1233 00152$:
                           1234 ;	../../../core/net/resolv.c:252: *query = *nameptr;
   0320 8F 82              1235 	mov	dpl,r7
   0322 8C 83              1236 	mov	dph,r4
   0324 8D F0              1237 	mov	b,r5
   0326 EA                 1238 	mov	a,r2
   0327 12s00r00           1239 	lcall	__gptrput
   032A A3                 1240 	inc	dptr
   032B AF 82              1241 	mov	r7,dpl
   032D AC 83              1242 	mov	r4,dph
                           1243 ;	../../../core/net/resolv.c:253: ++query;
                           1244 ;	../../../core/net/resolv.c:254: ++n;
   032F 0E                 1245 	inc	r6
                           1246 ;	../../../core/net/resolv.c:251: for(n = 0; *nameptr != '.' && *nameptr != 0; ++nameptr) {
   0330 E5*00              1247 	mov	a,_bp
   0332 24 13              1248 	add	a,#0x13
   0334 F8                 1249 	mov	r0,a
   0335 06                 1250 	inc	@r0
   0336 B6 00 CC           1251 	cjne	@r0,#0x00,00120$
   0339 08                 1252 	inc	r0
   033A 06                 1253 	inc	@r0
   033B 80 C8              1254 	sjmp	00120$
   033D                    1255 00137$:
   033D E5*00              1256 	mov	a,_bp
   033F 24 04              1257 	add	a,#0x04
   0341 F8                 1258 	mov	r0,a
   0342 A6 07              1259 	mov	@r0,ar7
   0344 08                 1260 	inc	r0
   0345 A6 04              1261 	mov	@r0,ar4
   0347 08                 1262 	inc	r0
   0348 A6 05              1263 	mov	@r0,ar5
   034A E5*00              1264 	mov	a,_bp
   034C 24 13              1265 	add	a,#0x13
   034E F8                 1266 	mov	r0,a
   034F E5*00              1267 	mov	a,_bp
   0351 24 0A              1268 	add	a,#0x0a
   0353 F9                 1269 	mov	r1,a
   0354 E6                 1270 	mov	a,@r0
   0355 F7                 1271 	mov	@r1,a
   0356 08                 1272 	inc	r0
   0357 09                 1273 	inc	r1
   0358 E6                 1274 	mov	a,@r0
   0359 F7                 1275 	mov	@r1,a
   035A 08                 1276 	inc	r0
   035B 09                 1277 	inc	r1
   035C E6                 1278 	mov	a,@r0
   035D F7                 1279 	mov	@r1,a
                           1280 ;	../../../core/net/resolv.c:256: *nptr = n;
   035E E5*00              1281 	mov	a,_bp
   0360 24 07              1282 	add	a,#0x07
   0362 F8                 1283 	mov	r0,a
   0363 86 82              1284 	mov	dpl,@r0
   0365 08                 1285 	inc	r0
   0366 86 83              1286 	mov	dph,@r0
   0368 08                 1287 	inc	r0
   0369 86 F0              1288 	mov	b,@r0
   036B EE                 1289 	mov	a,r6
   036C 12s00r00           1290 	lcall	__gptrput
                           1291 ;	../../../core/net/resolv.c:257: } while(*nameptr != 0);
   036F E5*00              1292 	mov	a,_bp
   0371 24 13              1293 	add	a,#0x13
   0373 F8                 1294 	mov	r0,a
   0374 86 82              1295 	mov	dpl,@r0
   0376 08                 1296 	inc	r0
   0377 86 83              1297 	mov	dph,@r0
   0379 08                 1298 	inc	r0
   037A 86 F0              1299 	mov	b,@r0
   037C 12s00r00           1300 	lcall	__gptrget
   037F 60 03              1301 	jz	00153$
   0381 02s02rB8           1302 	ljmp	00109$
   0384                    1303 00153$:
                           1304 ;	../../../core/net/resolv.c:261: memcpy(query, endquery, 5);
   0384 C0 04              1305 	push	ar4
   0386 C0 05              1306 	push	ar5
   0388 C0 07              1307 	push	ar7
   038A 74 05              1308 	mov	a,#0x05
   038C C0 E0              1309 	push	acc
   038E E4                 1310 	clr	a
   038F C0 E0              1311 	push	acc
   0391 74rB0              1312 	mov	a,#_check_entries_endquery_4_11
   0393 C0 E0              1313 	push	acc
   0395 74s00              1314 	mov	a,#(_check_entries_endquery_4_11 >> 8)
   0397 C0 E0              1315 	push	acc
   0399 E4                 1316 	clr	a
   039A C0 E0              1317 	push	acc
   039C 8F 82              1318 	mov	dpl,r7
   039E 8C 83              1319 	mov	dph,r4
   03A0 8D F0              1320 	mov	b,r5
   03A2 12s00r00           1321 	lcall	_memcpy
   03A5 E5 81              1322 	mov	a,sp
   03A7 24 FB              1323 	add	a,#0xfb
   03A9 F5 81              1324 	mov	sp,a
   03AB D0 07              1325 	pop	ar7
   03AD D0 05              1326 	pop	ar5
   03AF D0 04              1327 	pop	ar4
                           1328 ;	../../../core/net/resolv.c:263: uip_udp_send((unsigned char)(query + 5 - (char *)uip_appdata));
   03B1 74 05              1329 	mov	a,#0x05
   03B3 2F                 1330 	add	a,r7
   03B4 FA                 1331 	mov	r2,a
   03B5 E4                 1332 	clr	a
   03B6 3C                 1333 	addc	a,r4
   03B7 FC                 1334 	mov	r4,a
   03B8 8D 03              1335 	mov	ar3,r5
   03BA 90s00r00           1336 	mov	dptr,#_uip_appdata
   03BD E5*00              1337 	mov	a,_bp
   03BF 24 10              1338 	add	a,#0x10
   03C1 F8                 1339 	mov	r0,a
   03C2 E0                 1340 	movx	a,@dptr
   03C3 F6                 1341 	mov	@r0,a
   03C4 A3                 1342 	inc	dptr
   03C5 E0                 1343 	movx	a,@dptr
   03C6 08                 1344 	inc	r0
   03C7 F6                 1345 	mov	@r0,a
   03C8 A3                 1346 	inc	dptr
   03C9 E0                 1347 	movx	a,@dptr
   03CA 08                 1348 	inc	r0
   03CB F6                 1349 	mov	@r0,a
   03CC E5*00              1350 	mov	a,_bp
   03CE 24 10              1351 	add	a,#0x10
   03D0 F8                 1352 	mov	r0,a
   03D1 EA                 1353 	mov	a,r2
   03D2 C3                 1354 	clr	c
   03D3 96                 1355 	subb	a,@r0
   03D4 FF                 1356 	mov	r7,a
   03D5 EC                 1357 	mov	a,r4
   03D6 08                 1358 	inc	r0
   03D7 96                 1359 	subb	a,@r0
   03D8 7C 00              1360 	mov	r4,#0x00
   03DA C0 07              1361 	push	ar7
   03DC C0 04              1362 	push	ar4
   03DE E5*00              1363 	mov	a,_bp
   03E0 24 10              1364 	add	a,#0x10
   03E2 F8                 1365 	mov	r0,a
   03E3 86 82              1366 	mov	dpl,@r0
   03E5 08                 1367 	inc	r0
   03E6 86 83              1368 	mov	dph,@r0
   03E8 08                 1369 	inc	r0
   03E9 86 F0              1370 	mov	b,@r0
   03EB 12s00r00           1371 	lcall	_uip_send
   03EE 15 81              1372 	dec	sp
   03F0 15 81              1373 	dec	sp
                           1374 ;	../../../core/net/resolv.c:264: break;
   03F2 80 06              1375 	sjmp	00124$
   03F4                    1376 00117$:
                           1377 ;	../../../core/net/resolv.c:214: for(i = 0; i < RESOLV_ENTRIES; ++i) {
   03F4 0B                 1378 	inc	r3
   03F5 8B 02              1379 	mov	ar2,r3
   03F7 02s00r67           1380 	ljmp	00115$
   03FA                    1381 00124$:
   03FA 85*00 81           1382 	mov	sp,_bp
   03FD D0*00              1383 	pop	_bp
   03FF 22                 1384 	ret
                           1385 ;------------------------------------------------------------
                           1386 ;Allocation info for local variables in function 'newdata'
                           1387 ;------------------------------------------------------------
                           1388 ;nameptr                   Allocated to registers r3 r4 r5 
                           1389 ;ans                       Allocated to stack - offset 1
                           1390 ;hdr                       Allocated to stack - offset 4
                           1391 ;namemapptr                Allocated to stack - offset 7
                           1392 ;sloc0                     Allocated to stack - offset 13
                           1393 ;sloc1                     Allocated to stack - offset 10
                           1394 ;sloc2                     Allocated to stack - offset 13
                           1395 ;nquestions                Allocated with name '_newdata_nquestions_1_1'
                           1396 ;nanswers                  Allocated with name '_newdata_nanswers_1_1'
                           1397 ;i                         Allocated with name '_newdata_i_1_1'
                           1398 ;------------------------------------------------------------
                           1399 ;	../../../core/net/resolv.c:274: newdata(void)
                           1400 ;	-----------------------------------------
                           1401 ;	 function newdata
                           1402 ;	-----------------------------------------
   0400                    1403 _newdata:
   0400 C0*00              1404 	push	_bp
   0402 E5 81              1405 	mov	a,sp
   0404 F5*00              1406 	mov	_bp,a
   0406 24 0F              1407 	add	a,#0x0f
   0408 F5 81              1408 	mov	sp,a
                           1409 ;	../../../core/net/resolv.c:283: hdr = (struct dns_hdr *)uip_appdata;
   040A 90s00r00           1410 	mov	dptr,#_uip_appdata
   040D E0                 1411 	movx	a,@dptr
   040E FA                 1412 	mov	r2,a
   040F A3                 1413 	inc	dptr
   0410 E0                 1414 	movx	a,@dptr
   0411 FB                 1415 	mov	r3,a
   0412 A3                 1416 	inc	dptr
   0413 E0                 1417 	movx	a,@dptr
   0414 FC                 1418 	mov	r4,a
   0415 E5*00              1419 	mov	a,_bp
   0417 24 04              1420 	add	a,#0x04
   0419 F8                 1421 	mov	r0,a
   041A A6 02              1422 	mov	@r0,ar2
   041C 08                 1423 	inc	r0
   041D A6 03              1424 	mov	@r0,ar3
   041F 08                 1425 	inc	r0
   0420 A6 04              1426 	mov	@r0,ar4
                           1427 ;	../../../core/net/resolv.c:296: i = (u8_t)htons(hdr->id);
   0422 E5*00              1428 	mov	a,_bp
   0424 24 04              1429 	add	a,#0x04
   0426 F8                 1430 	mov	r0,a
   0427 86 82              1431 	mov	dpl,@r0
   0429 08                 1432 	inc	r0
   042A 86 83              1433 	mov	dph,@r0
   042C 08                 1434 	inc	r0
   042D 86 F0              1435 	mov	b,@r0
   042F 12s00r00           1436 	lcall	__gptrget
   0432 FD                 1437 	mov	r5,a
   0433 A3                 1438 	inc	dptr
   0434 12s00r00           1439 	lcall	__gptrget
   0437 FE                 1440 	mov	r6,a
   0438 8D 82              1441 	mov	dpl,r5
   043A 8E 83              1442 	mov	dph,r6
   043C 12s00r00           1443 	lcall	_htons
   043F AD 82              1444 	mov	r5,dpl
   0441 90s00rB7           1445 	mov	dptr,#_newdata_i_1_1
   0444 ED                 1446 	mov	a,r5
   0445 F0                 1447 	movx	@dptr,a
                           1448 ;	../../../core/net/resolv.c:297: namemapptr = &names[i];
   0446 ED                 1449 	mov	a,r5
   0447 75 F0 29           1450 	mov	b,#0x29
   044A A4                 1451 	mul	ab
   044B 24r00              1452 	add	a,#_names
   044D FE                 1453 	mov	r6,a
   044E E4                 1454 	clr	a
   044F 34s00              1455 	addc	a,#(_names >> 8)
   0451 FF                 1456 	mov	r7,a
   0452 E5*00              1457 	mov	a,_bp
   0454 24 07              1458 	add	a,#0x07
   0456 F8                 1459 	mov	r0,a
   0457 A6 06              1460 	mov	@r0,ar6
   0459 08                 1461 	inc	r0
   045A A6 07              1462 	mov	@r0,ar7
   045C 08                 1463 	inc	r0
   045D 76 00              1464 	mov	@r0,#0x00
                           1465 ;	../../../core/net/resolv.c:298: if(i < RESOLV_ENTRIES &&
   045F BD 04 00           1466 	cjne	r5,#0x04,00134$
   0462                    1467 00134$:
   0462 40 03              1468 	jc	00135$
   0464 02s07r29           1469 	ljmp	00121$
   0467                    1470 00135$:
                           1471 ;	../../../core/net/resolv.c:299: namemapptr->state == STATE_ASKING) {
   0467 E5*00              1472 	mov	a,_bp
   0469 24 07              1473 	add	a,#0x07
   046B F8                 1474 	mov	r0,a
   046C 86 82              1475 	mov	dpl,@r0
   046E 08                 1476 	inc	r0
   046F 86 83              1477 	mov	dph,@r0
   0471 08                 1478 	inc	r0
   0472 86 F0              1479 	mov	b,@r0
   0474 12s00r00           1480 	lcall	__gptrget
   0477 FB                 1481 	mov	r3,a
   0478 BB 02 02           1482 	cjne	r3,#0x02,00136$
   047B 80 03              1483 	sjmp	00137$
   047D                    1484 00136$:
   047D 02s07r29           1485 	ljmp	00121$
   0480                    1486 00137$:
                           1487 ;	../../../core/net/resolv.c:302: namemapptr->state = STATE_DONE;
   0480 E5*00              1488 	mov	a,_bp
   0482 24 07              1489 	add	a,#0x07
   0484 F8                 1490 	mov	r0,a
   0485 86 82              1491 	mov	dpl,@r0
   0487 08                 1492 	inc	r0
   0488 86 83              1493 	mov	dph,@r0
   048A 08                 1494 	inc	r0
   048B 86 F0              1495 	mov	b,@r0
   048D 74 03              1496 	mov	a,#0x03
   048F 12s00r00           1497 	lcall	__gptrput
                           1498 ;	../../../core/net/resolv.c:303: namemapptr->err = hdr->flags2 & DNS_FLAG2_ERR_MASK;
   0492 E5*00              1499 	mov	a,_bp
   0494 24 07              1500 	add	a,#0x07
   0496 F8                 1501 	mov	r0,a
   0497 74 04              1502 	mov	a,#0x04
   0499 26                 1503 	add	a,@r0
   049A FB                 1504 	mov	r3,a
   049B E4                 1505 	clr	a
   049C 08                 1506 	inc	r0
   049D 36                 1507 	addc	a,@r0
   049E FC                 1508 	mov	r4,a
   049F 08                 1509 	inc	r0
   04A0 86 05              1510 	mov	ar5,@r0
   04A2 E5*00              1511 	mov	a,_bp
   04A4 24 04              1512 	add	a,#0x04
   04A6 F8                 1513 	mov	r0,a
   04A7 74 03              1514 	mov	a,#0x03
   04A9 26                 1515 	add	a,@r0
   04AA FA                 1516 	mov	r2,a
   04AB E4                 1517 	clr	a
   04AC 08                 1518 	inc	r0
   04AD 36                 1519 	addc	a,@r0
   04AE FE                 1520 	mov	r6,a
   04AF 08                 1521 	inc	r0
   04B0 86 07              1522 	mov	ar7,@r0
   04B2 8A 82              1523 	mov	dpl,r2
   04B4 8E 83              1524 	mov	dph,r6
   04B6 8F F0              1525 	mov	b,r7
   04B8 12s00r00           1526 	lcall	__gptrget
   04BB FA                 1527 	mov	r2,a
   04BC 53 02 0F           1528 	anl	ar2,#0x0F
   04BF 8B 82              1529 	mov	dpl,r3
   04C1 8C 83              1530 	mov	dph,r4
   04C3 8D F0              1531 	mov	b,r5
                           1532 ;	../../../core/net/resolv.c:306: if(namemapptr->err != 0) {
   04C5 EA                 1533 	mov	a,r2
   04C6 12s00r00           1534 	lcall	__gptrput
   04C9 60 3B              1535 	jz	00102$
                           1536 ;	../../../core/net/resolv.c:307: namemapptr->state = STATE_ERROR;
   04CB E5*00              1537 	mov	a,_bp
   04CD 24 07              1538 	add	a,#0x07
   04CF F8                 1539 	mov	r0,a
   04D0 86 82              1540 	mov	dpl,@r0
   04D2 08                 1541 	inc	r0
   04D3 86 83              1542 	mov	dph,@r0
   04D5 08                 1543 	inc	r0
   04D6 86 F0              1544 	mov	b,@r0
   04D8 74 04              1545 	mov	a,#0x04
   04DA 12s00r00           1546 	lcall	__gptrput
                           1547 ;	../../../core/net/resolv.c:308: resolv_found(namemapptr->name, NULL);
   04DD E5*00              1548 	mov	a,_bp
   04DF 24 07              1549 	add	a,#0x07
   04E1 F8                 1550 	mov	r0,a
   04E2 74 05              1551 	mov	a,#0x05
   04E4 26                 1552 	add	a,@r0
   04E5 FB                 1553 	mov	r3,a
   04E6 E4                 1554 	clr	a
   04E7 08                 1555 	inc	r0
   04E8 36                 1556 	addc	a,@r0
   04E9 FC                 1557 	mov	r4,a
   04EA 08                 1558 	inc	r0
   04EB 86 05              1559 	mov	ar5,@r0
   04ED E4                 1560 	clr	a
   04EE C0 E0              1561 	push	acc
   04F0 C0 E0              1562 	push	acc
   04F2 C0 E0              1563 	push	acc
   04F4 8B 82              1564 	mov	dpl,r3
   04F6 8C 83              1565 	mov	dph,r4
   04F8 8D F0              1566 	mov	b,r5
   04FA 12s0Br5F           1567 	lcall	_resolv_found
   04FD 15 81              1568 	dec	sp
   04FF 15 81              1569 	dec	sp
   0501 15 81              1570 	dec	sp
                           1571 ;	../../../core/net/resolv.c:309: return;
   0503 02s07r29           1572 	ljmp	00121$
   0506                    1573 00102$:
                           1574 ;	../../../core/net/resolv.c:314: nquestions = (u8_t)htons(hdr->numquestions);
   0506 E5*00              1575 	mov	a,_bp
   0508 24 04              1576 	add	a,#0x04
   050A F8                 1577 	mov	r0,a
   050B 74 04              1578 	mov	a,#0x04
   050D 26                 1579 	add	a,@r0
   050E FB                 1580 	mov	r3,a
   050F E4                 1581 	clr	a
   0510 08                 1582 	inc	r0
   0511 36                 1583 	addc	a,@r0
   0512 FC                 1584 	mov	r4,a
   0513 08                 1585 	inc	r0
   0514 86 05              1586 	mov	ar5,@r0
   0516 8B 82              1587 	mov	dpl,r3
   0518 8C 83              1588 	mov	dph,r4
   051A 8D F0              1589 	mov	b,r5
   051C 12s00r00           1590 	lcall	__gptrget
   051F FB                 1591 	mov	r3,a
   0520 A3                 1592 	inc	dptr
   0521 12s00r00           1593 	lcall	__gptrget
   0524 FC                 1594 	mov	r4,a
   0525 8B 82              1595 	mov	dpl,r3
   0527 8C 83              1596 	mov	dph,r4
   0529 12s00r00           1597 	lcall	_htons
   052C AB 82              1598 	mov	r3,dpl
   052E 90s00rB5           1599 	mov	dptr,#_newdata_nquestions_1_1
   0531 EB                 1600 	mov	a,r3
   0532 F0                 1601 	movx	@dptr,a
                           1602 ;	../../../core/net/resolv.c:315: nanswers = (u8_t)htons(hdr->numanswers);
   0533 E5*00              1603 	mov	a,_bp
   0535 24 04              1604 	add	a,#0x04
   0537 F8                 1605 	mov	r0,a
   0538 74 06              1606 	mov	a,#0x06
   053A 26                 1607 	add	a,@r0
   053B FB                 1608 	mov	r3,a
   053C E4                 1609 	clr	a
   053D 08                 1610 	inc	r0
   053E 36                 1611 	addc	a,@r0
   053F FC                 1612 	mov	r4,a
   0540 08                 1613 	inc	r0
   0541 86 05              1614 	mov	ar5,@r0
   0543 8B 82              1615 	mov	dpl,r3
   0545 8C 83              1616 	mov	dph,r4
   0547 8D F0              1617 	mov	b,r5
   0549 12s00r00           1618 	lcall	__gptrget
   054C FB                 1619 	mov	r3,a
   054D A3                 1620 	inc	dptr
   054E 12s00r00           1621 	lcall	__gptrget
   0551 FC                 1622 	mov	r4,a
   0552 8B 82              1623 	mov	dpl,r3
   0554 8C 83              1624 	mov	dph,r4
   0556 12s00r00           1625 	lcall	_htons
   0559 AB 82              1626 	mov	r3,dpl
   055B 90s00rB6           1627 	mov	dptr,#_newdata_nanswers_1_1
   055E EB                 1628 	mov	a,r3
   055F F0                 1629 	movx	@dptr,a
                           1630 ;	../../../core/net/resolv.c:320: nameptr = parse_name((uint8_t *)uip_appdata + 12) + 4;
   0560 90s00r00           1631 	mov	dptr,#_uip_appdata
   0563 E0                 1632 	movx	a,@dptr
   0564 FB                 1633 	mov	r3,a
   0565 A3                 1634 	inc	dptr
   0566 E0                 1635 	movx	a,@dptr
   0567 FC                 1636 	mov	r4,a
   0568 A3                 1637 	inc	dptr
   0569 E0                 1638 	movx	a,@dptr
   056A FD                 1639 	mov	r5,a
   056B 74 0C              1640 	mov	a,#0x0C
   056D 2B                 1641 	add	a,r3
   056E FB                 1642 	mov	r3,a
   056F E4                 1643 	clr	a
   0570 3C                 1644 	addc	a,r4
   0571 FC                 1645 	mov	r4,a
   0572 8B 82              1646 	mov	dpl,r3
   0574 8C 83              1647 	mov	dph,r4
   0576 8D F0              1648 	mov	b,r5
   0578 12s00r00           1649 	lcall	_parse_name
   057B AB 82              1650 	mov	r3,dpl
   057D AC 83              1651 	mov	r4,dph
   057F AD F0              1652 	mov	r5,b
   0581 74 04              1653 	mov	a,#0x04
   0583 2B                 1654 	add	a,r3
   0584 FB                 1655 	mov	r3,a
   0585 E4                 1656 	clr	a
   0586 3C                 1657 	addc	a,r4
   0587 FC                 1658 	mov	r4,a
                           1659 ;	../../../core/net/resolv.c:322: while(nanswers > 0) {
   0588                    1660 00111$:
   0588 90s00rB6           1661 	mov	dptr,#_newdata_nanswers_1_1
   058B E0                 1662 	movx	a,@dptr
   058C FA                 1663 	mov	r2,a
   058D 70 03              1664 	jnz	00139$
   058F 02s07r29           1665 	ljmp	00121$
   0592                    1666 00139$:
                           1667 ;	../../../core/net/resolv.c:325: if(*nameptr & 0xc0) {
   0592 8B 82              1668 	mov	dpl,r3
   0594 8C 83              1669 	mov	dph,r4
   0596 8D F0              1670 	mov	b,r5
   0598 12s00r00           1671 	lcall	__gptrget
   059B FA                 1672 	mov	r2,a
   059C 54 C0              1673 	anl	a,#0xC0
   059E 60 09              1674 	jz	00104$
                           1675 ;	../../../core/net/resolv.c:327: nameptr +=2;
   05A0 74 02              1676 	mov	a,#0x02
   05A2 2B                 1677 	add	a,r3
   05A3 FB                 1678 	mov	r3,a
   05A4 E4                 1679 	clr	a
   05A5 3C                 1680 	addc	a,r4
   05A6 FC                 1681 	mov	r4,a
   05A7 80 15              1682 	sjmp	00105$
   05A9                    1683 00104$:
                           1684 ;	../../../core/net/resolv.c:331: nameptr = parse_name((uint8_t *)nameptr);
   05A9 8B 82              1685 	mov	dpl,r3
   05AB 8C 83              1686 	mov	dph,r4
   05AD 8D F0              1687 	mov	b,r5
   05AF 12s00r00           1688 	lcall	_parse_name
   05B2 AA 82              1689 	mov	r2,dpl
   05B4 AE 83              1690 	mov	r6,dph
   05B6 AF F0              1691 	mov	r7,b
   05B8 8A 03              1692 	mov	ar3,r2
   05BA 8E 04              1693 	mov	ar4,r6
   05BC 8F 05              1694 	mov	ar5,r7
   05BE                    1695 00105$:
                           1696 ;	../../../core/net/resolv.c:334: ans = (struct dns_answer *)nameptr;
   05BE A8*00              1697 	mov	r0,_bp
   05C0 08                 1698 	inc	r0
   05C1 A6 03              1699 	mov	@r0,ar3
   05C3 08                 1700 	inc	r0
   05C4 A6 04              1701 	mov	@r0,ar4
   05C6 08                 1702 	inc	r0
   05C7 A6 05              1703 	mov	@r0,ar5
                           1704 ;	../../../core/net/resolv.c:341: if(ans->type == HTONS(1) &&
   05C9 8B 82              1705 	mov	dpl,r3
   05CB 8C 83              1706 	mov	dph,r4
   05CD 8D F0              1707 	mov	b,r5
   05CF 12s00r00           1708 	lcall	__gptrget
   05D2 FA                 1709 	mov	r2,a
   05D3 A3                 1710 	inc	dptr
   05D4 12s00r00           1711 	lcall	__gptrget
   05D7 FE                 1712 	mov	r6,a
   05D8 BA 00 05           1713 	cjne	r2,#0x00,00141$
   05DB BE 01 02           1714 	cjne	r6,#0x01,00141$
   05DE 80 03              1715 	sjmp	00142$
   05E0                    1716 00141$:
   05E0 02s06rD0           1717 	ljmp	00107$
   05E3                    1718 00142$:
                           1719 ;	../../../core/net/resolv.c:342: ans->class == HTONS(1) &&
   05E3 74 02              1720 	mov	a,#0x02
   05E5 2B                 1721 	add	a,r3
   05E6 FA                 1722 	mov	r2,a
   05E7 E4                 1723 	clr	a
   05E8 3C                 1724 	addc	a,r4
   05E9 FE                 1725 	mov	r6,a
   05EA 8D 07              1726 	mov	ar7,r5
   05EC 8A 82              1727 	mov	dpl,r2
   05EE 8E 83              1728 	mov	dph,r6
   05F0 8F F0              1729 	mov	b,r7
   05F2 12s00r00           1730 	lcall	__gptrget
   05F5 FA                 1731 	mov	r2,a
   05F6 A3                 1732 	inc	dptr
   05F7 12s00r00           1733 	lcall	__gptrget
   05FA FE                 1734 	mov	r6,a
   05FB BA 00 05           1735 	cjne	r2,#0x00,00143$
   05FE BE 01 02           1736 	cjne	r6,#0x01,00143$
   0601 80 03              1737 	sjmp	00144$
   0603                    1738 00143$:
   0603 02s06rD0           1739 	ljmp	00107$
   0606                    1740 00144$:
                           1741 ;	../../../core/net/resolv.c:343: ans->len == HTONS(4)) {
   0606 74 08              1742 	mov	a,#0x08
   0608 2B                 1743 	add	a,r3
   0609 FA                 1744 	mov	r2,a
   060A E4                 1745 	clr	a
   060B 3C                 1746 	addc	a,r4
   060C FE                 1747 	mov	r6,a
   060D 8D 07              1748 	mov	ar7,r5
   060F 8A 82              1749 	mov	dpl,r2
   0611 8E 83              1750 	mov	dph,r6
   0613 8F F0              1751 	mov	b,r7
   0615 12s00r00           1752 	lcall	__gptrget
   0618 FA                 1753 	mov	r2,a
   0619 A3                 1754 	inc	dptr
   061A 12s00r00           1755 	lcall	__gptrget
   061D FE                 1756 	mov	r6,a
   061E BA 00 05           1757 	cjne	r2,#0x00,00145$
   0621 BE 04 02           1758 	cjne	r6,#0x04,00145$
   0624 80 03              1759 	sjmp	00146$
   0626                    1760 00145$:
   0626 02s06rD0           1761 	ljmp	00107$
   0629                    1762 00146$:
                           1763 ;	../../../core/net/resolv.c:351: for(i = 0; i < 4; i++) {
   0629 90s00rB7           1764 	mov	dptr,#_newdata_i_1_1
   062C E4                 1765 	clr	a
   062D F0                 1766 	movx	@dptr,a
   062E E5*00              1767 	mov	a,_bp
   0630 24 0A              1768 	add	a,#0x0a
   0632 F8                 1769 	mov	r0,a
   0633 74 0A              1770 	mov	a,#0x0A
   0635 2B                 1771 	add	a,r3
   0636 F6                 1772 	mov	@r0,a
   0637 E4                 1773 	clr	a
   0638 3C                 1774 	addc	a,r4
   0639 08                 1775 	inc	r0
   063A F6                 1776 	mov	@r0,a
   063B 08                 1777 	inc	r0
   063C A6 05              1778 	mov	@r0,ar5
   063E                    1779 00117$:
   063E 90s00rB7           1780 	mov	dptr,#_newdata_i_1_1
   0641 E0                 1781 	movx	a,@dptr
   0642 FB                 1782 	mov	r3,a
   0643 BB 04 00           1783 	cjne	r3,#0x04,00147$
   0646                    1784 00147$:
   0646 50 51              1785 	jnc	00120$
                           1786 ;	../../../core/net/resolv.c:352: namemapptr->ipaddr.u8[i] = ans->ipaddr[i];
   0648 E5*00              1787 	mov	a,_bp
   064A 24 07              1788 	add	a,#0x07
   064C F8                 1789 	mov	r0,a
   064D 74 25              1790 	mov	a,#0x25
   064F 26                 1791 	add	a,@r0
   0650 FA                 1792 	mov	r2,a
   0651 E4                 1793 	clr	a
   0652 08                 1794 	inc	r0
   0653 36                 1795 	addc	a,@r0
   0654 FE                 1796 	mov	r6,a
   0655 08                 1797 	inc	r0
   0656 86 07              1798 	mov	ar7,@r0
   0658 E5*00              1799 	mov	a,_bp
   065A 24 0D              1800 	add	a,#0x0d
   065C F8                 1801 	mov	r0,a
   065D EB                 1802 	mov	a,r3
   065E 2A                 1803 	add	a,r2
   065F F6                 1804 	mov	@r0,a
   0660 E4                 1805 	clr	a
   0661 3E                 1806 	addc	a,r6
   0662 08                 1807 	inc	r0
   0663 F6                 1808 	mov	@r0,a
   0664 08                 1809 	inc	r0
   0665 A6 07              1810 	mov	@r0,ar7
   0667 E5*00              1811 	mov	a,_bp
   0669 24 0A              1812 	add	a,#0x0a
   066B F8                 1813 	mov	r0,a
   066C EB                 1814 	mov	a,r3
   066D 26                 1815 	add	a,@r0
   066E FA                 1816 	mov	r2,a
   066F E4                 1817 	clr	a
   0670 08                 1818 	inc	r0
   0671 36                 1819 	addc	a,@r0
   0672 FE                 1820 	mov	r6,a
   0673 08                 1821 	inc	r0
   0674 86 07              1822 	mov	ar7,@r0
   0676 8A 82              1823 	mov	dpl,r2
   0678 8E 83              1824 	mov	dph,r6
   067A 8F F0              1825 	mov	b,r7
   067C 12s00r00           1826 	lcall	__gptrget
   067F FA                 1827 	mov	r2,a
   0680 E5*00              1828 	mov	a,_bp
   0682 24 0D              1829 	add	a,#0x0d
   0684 F8                 1830 	mov	r0,a
   0685 86 82              1831 	mov	dpl,@r0
   0687 08                 1832 	inc	r0
   0688 86 83              1833 	mov	dph,@r0
   068A 08                 1834 	inc	r0
   068B 86 F0              1835 	mov	b,@r0
   068D EA                 1836 	mov	a,r2
   068E 12s00r00           1837 	lcall	__gptrput
                           1838 ;	../../../core/net/resolv.c:351: for(i = 0; i < 4; i++) {
   0691 90s00rB7           1839 	mov	dptr,#_newdata_i_1_1
   0694 EB                 1840 	mov	a,r3
   0695 04                 1841 	inc	a
   0696 F0                 1842 	movx	@dptr,a
   0697 80 A5              1843 	sjmp	00117$
   0699                    1844 00120$:
                           1845 ;	../../../core/net/resolv.c:355: resolv_found(namemapptr->name, &namemapptr->ipaddr);
   0699 E5*00              1846 	mov	a,_bp
   069B 24 07              1847 	add	a,#0x07
   069D F8                 1848 	mov	r0,a
   069E 74 25              1849 	mov	a,#0x25
   06A0 26                 1850 	add	a,@r0
   06A1 FB                 1851 	mov	r3,a
   06A2 E4                 1852 	clr	a
   06A3 08                 1853 	inc	r0
   06A4 36                 1854 	addc	a,@r0
   06A5 FC                 1855 	mov	r4,a
   06A6 08                 1856 	inc	r0
   06A7 86 05              1857 	mov	ar5,@r0
   06A9 E5*00              1858 	mov	a,_bp
   06AB 24 07              1859 	add	a,#0x07
   06AD F8                 1860 	mov	r0,a
   06AE 74 05              1861 	mov	a,#0x05
   06B0 26                 1862 	add	a,@r0
   06B1 FA                 1863 	mov	r2,a
   06B2 E4                 1864 	clr	a
   06B3 08                 1865 	inc	r0
   06B4 36                 1866 	addc	a,@r0
   06B5 FE                 1867 	mov	r6,a
   06B6 08                 1868 	inc	r0
   06B7 86 07              1869 	mov	ar7,@r0
   06B9 C0 03              1870 	push	ar3
   06BB C0 04              1871 	push	ar4
   06BD C0 05              1872 	push	ar5
   06BF 8A 82              1873 	mov	dpl,r2
   06C1 8E 83              1874 	mov	dph,r6
   06C3 8F F0              1875 	mov	b,r7
   06C5 12s0Br5F           1876 	lcall	_resolv_found
   06C8 15 81              1877 	dec	sp
   06CA 15 81              1878 	dec	sp
   06CC 15 81              1879 	dec	sp
                           1880 ;	../../../core/net/resolv.c:356: return;
   06CE 80 59              1881 	sjmp	00121$
   06D0                    1882 00107$:
                           1883 ;	../../../core/net/resolv.c:358: nameptr = nameptr + 10 + htons(ans->len);
   06D0 E5*00              1884 	mov	a,_bp
   06D2 24 0D              1885 	add	a,#0x0d
   06D4 F8                 1886 	mov	r0,a
   06D5 74 0A              1887 	mov	a,#0x0A
   06D7 2B                 1888 	add	a,r3
   06D8 F6                 1889 	mov	@r0,a
   06D9 E4                 1890 	clr	a
   06DA 3C                 1891 	addc	a,r4
   06DB 08                 1892 	inc	r0
   06DC F6                 1893 	mov	@r0,a
   06DD 08                 1894 	inc	r0
   06DE A6 05              1895 	mov	@r0,ar5
   06E0 A8*00              1896 	mov	r0,_bp
   06E2 08                 1897 	inc	r0
   06E3 74 08              1898 	mov	a,#0x08
   06E5 26                 1899 	add	a,@r0
   06E6 FA                 1900 	mov	r2,a
   06E7 E4                 1901 	clr	a
   06E8 08                 1902 	inc	r0
   06E9 36                 1903 	addc	a,@r0
   06EA FE                 1904 	mov	r6,a
   06EB 08                 1905 	inc	r0
   06EC 86 07              1906 	mov	ar7,@r0
   06EE 8A 82              1907 	mov	dpl,r2
   06F0 8E 83              1908 	mov	dph,r6
   06F2 8F F0              1909 	mov	b,r7
   06F4 12s00r00           1910 	lcall	__gptrget
   06F7 FA                 1911 	mov	r2,a
   06F8 A3                 1912 	inc	dptr
   06F9 12s00r00           1913 	lcall	__gptrget
   06FC FE                 1914 	mov	r6,a
   06FD 8A 82              1915 	mov	dpl,r2
   06FF 8E 83              1916 	mov	dph,r6
   0701 12s00r00           1917 	lcall	_htons
   0704 AA 82              1918 	mov	r2,dpl
   0706 AE 83              1919 	mov	r6,dph
   0708 E5*00              1920 	mov	a,_bp
   070A 24 0D              1921 	add	a,#0x0d
   070C F8                 1922 	mov	r0,a
   070D EA                 1923 	mov	a,r2
   070E 26                 1924 	add	a,@r0
   070F FA                 1925 	mov	r2,a
   0710 EE                 1926 	mov	a,r6
   0711 08                 1927 	inc	r0
   0712 36                 1928 	addc	a,@r0
   0713 FE                 1929 	mov	r6,a
   0714 08                 1930 	inc	r0
   0715 86 07              1931 	mov	ar7,@r0
   0717 8A 03              1932 	mov	ar3,r2
   0719 8E 04              1933 	mov	ar4,r6
   071B 8F 05              1934 	mov	ar5,r7
                           1935 ;	../../../core/net/resolv.c:360: --nanswers;
   071D 90s00rB6           1936 	mov	dptr,#_newdata_nanswers_1_1
   0720 E0                 1937 	movx	a,@dptr
   0721 14                 1938 	dec	a
   0722 90s00rB6           1939 	mov	dptr,#_newdata_nanswers_1_1
   0725 F0                 1940 	movx	@dptr,a
   0726 02s05r88           1941 	ljmp	00111$
   0729                    1942 00121$:
   0729 85*00 81           1943 	mov	sp,_bp
   072C D0*00              1944 	pop	_bp
   072E 22                 1945 	ret
                           1946 ;------------------------------------------------------------
                           1947 ;Allocation info for local variables in function 'process_thread_resolv_process'
                           1948 ;------------------------------------------------------------
                           1949 ;ev                        Allocated to stack - offset -3
                           1950 ;data                      Allocated to stack - offset -6
                           1951 ;process_pt                Allocated to registers r2 r3 r4 
                           1952 ;i                         Allocated to stack - offset 1
                           1953 ;PT_YIELD_FLAG             Allocated to registers r5 
                           1954 ;------------------------------------------------------------
                           1955 ;	../../../core/net/resolv.c:369: PROCESS_THREAD(resolv_process, ev, data)
                           1956 ;	-----------------------------------------
                           1957 ;	 function process_thread_resolv_process
                           1958 ;	-----------------------------------------
   072F                    1959 _process_thread_resolv_process:
   072F C0*00              1960 	push	_bp
   0731 85 81*00           1961 	mov	_bp,sp
   0734 05 81              1962 	inc	sp
   0736 05 81              1963 	inc	sp
                           1964 ;	../../../core/net/resolv.c:373: PROCESS_BEGIN();
   0738 AA 82              1965 	mov	r2,dpl
   073A AB 83              1966 	mov	r3,dph
   073C AC F0              1967 	mov	r4,b
   073E 7D 01              1968 	mov	r5,#0x01
   0740 12s00r00           1969 	lcall	__gptrget
   0743 FE                 1970 	mov	r6,a
   0744 A3                 1971 	inc	dptr
   0745 12s00r00           1972 	lcall	__gptrget
   0748 FF                 1973 	mov	r7,a
   0749 BE 00 05           1974 	cjne	r6,#0x00,00151$
   074C BF 00 02           1975 	cjne	r7,#0x00,00151$
   074F 80 0B              1976 	sjmp	00139$
   0751                    1977 00151$:
   0751 BE 7F 05           1978 	cjne	r6,#0x7F,00152$
   0754 BF 01 02           1979 	cjne	r7,#0x01,00152$
   0757 80 6C              1980 	sjmp	00102$
   0759                    1981 00152$:
   0759 02s08rE8           1982 	ljmp	00129$
                           1983 ;	../../../core/net/resolv.c:375: for(i = 0; i < RESOLV_ENTRIES; ++i) {
   075C                    1984 00139$:
   075C A8*00              1985 	mov	r0,_bp
   075E 08                 1986 	inc	r0
   075F E4                 1987 	clr	a
   0760 F6                 1988 	mov	@r0,a
   0761 08                 1989 	inc	r0
   0762 F6                 1990 	mov	@r0,a
   0763 7E 00              1991 	mov	r6,#0x00
   0765 7F 00              1992 	mov	r7,#0x00
   0767                    1993 00130$:
   0767 A8*00              1994 	mov	r0,_bp
   0769 08                 1995 	inc	r0
   076A C3                 1996 	clr	c
   076B E6                 1997 	mov	a,@r0
   076C 94 04              1998 	subb	a,#0x04
   076E 08                 1999 	inc	r0
   076F E6                 2000 	mov	a,@r0
   0770 64 80              2001 	xrl	a,#0x80
   0772 94 80              2002 	subb	a,#0x80
   0774 50 1E              2003 	jnc	00133$
                           2004 ;	../../../core/net/resolv.c:376: names[i].state = STATE_UNUSED;
   0776 EE                 2005 	mov	a,r6
   0777 24r00              2006 	add	a,#_names
   0779 F5 82              2007 	mov	dpl,a
   077B EF                 2008 	mov	a,r7
   077C 34s00              2009 	addc	a,#(_names >> 8)
   077E F5 83              2010 	mov	dph,a
   0780 E4                 2011 	clr	a
   0781 F0                 2012 	movx	@dptr,a
                           2013 ;	../../../core/net/resolv.c:375: for(i = 0; i < RESOLV_ENTRIES; ++i) {
   0782 74 29              2014 	mov	a,#0x29
   0784 2E                 2015 	add	a,r6
   0785 FE                 2016 	mov	r6,a
   0786 E4                 2017 	clr	a
   0787 3F                 2018 	addc	a,r7
   0788 FF                 2019 	mov	r7,a
   0789 A8*00              2020 	mov	r0,_bp
   078B 08                 2021 	inc	r0
   078C 06                 2022 	inc	@r0
   078D B6 00 D7           2023 	cjne	@r0,#0x00,00130$
   0790 08                 2024 	inc	r0
   0791 06                 2025 	inc	@r0
   0792 80 D3              2026 	sjmp	00130$
   0794                    2027 00133$:
                           2028 ;	../../../core/net/resolv.c:378: resolv_conn = NULL;
   0794 90s00r00           2029 	mov	dptr,#_resolv_conn
   0797 E4                 2030 	clr	a
   0798 F0                 2031 	movx	@dptr,a
   0799 A3                 2032 	inc	dptr
   079A F0                 2033 	movx	@dptr,a
   079B A3                 2034 	inc	dptr
   079C F0                 2035 	movx	@dptr,a
                           2036 ;	../../../core/net/resolv.c:379: resolv_event_found = process_alloc_event();
   079D C0 02              2037 	push	ar2
   079F C0 03              2038 	push	ar3
   07A1 C0 04              2039 	push	ar4
   07A3 12s00r00           2040 	lcall	_process_alloc_event
   07A6 E5 82              2041 	mov	a,dpl
   07A8 D0 04              2042 	pop	ar4
   07AA D0 03              2043 	pop	ar3
   07AC D0 02              2044 	pop	ar2
   07AE 90s00rAF           2045 	mov	dptr,#_resolv_event_found
   07B1 F0                 2046 	movx	@dptr,a
                           2047 ;	../../../core/net/resolv.c:382: while(1) {
   07B2                    2048 00127$:
                           2049 ;	../../../core/net/resolv.c:383: PROCESS_WAIT_EVENT();
   07B2 7D 00              2050 	mov	r5,#0x00
   07B4 8A 82              2051 	mov	dpl,r2
   07B6 8B 83              2052 	mov	dph,r3
   07B8 8C F0              2053 	mov	b,r4
   07BA 74 7F              2054 	mov	a,#0x7F
   07BC 12s00r00           2055 	lcall	__gptrput
   07BF A3                 2056 	inc	dptr
   07C0 74 01              2057 	mov	a,#0x01
   07C2 12s00r00           2058 	lcall	__gptrput
   07C5                    2059 00102$:
   07C5 ED                 2060 	mov	a,r5
   07C6 70 06              2061 	jnz	00106$
   07C8 75 82 01           2062 	mov	dpl,#0x01
   07CB 02s08rFA           2063 	ljmp	00134$
   07CE                    2064 00106$:
                           2065 ;	../../../core/net/resolv.c:385: if(ev == PROCESS_EVENT_TIMER) {
   07CE E5*00              2066 	mov	a,_bp
   07D0 24 FD              2067 	add	a,#0xfd
   07D2 F8                 2068 	mov	r0,a
   07D3 B6 88 27           2069 	cjne	@r0,#0x88,00124$
                           2070 ;	../../../core/net/resolv.c:386: if(resolv_conn != NULL) {
   07D6 90s00r00           2071 	mov	dptr,#_resolv_conn
   07D9 E0                 2072 	movx	a,@dptr
   07DA FD                 2073 	mov	r5,a
   07DB A3                 2074 	inc	dptr
   07DC E0                 2075 	movx	a,@dptr
   07DD FE                 2076 	mov	r6,a
   07DE A3                 2077 	inc	dptr
   07DF E0                 2078 	movx	a,@dptr
   07E0 FF                 2079 	mov	r7,a
   07E1 ED                 2080 	mov	a,r5
   07E2 4E                 2081 	orl	a,r6
   07E3 4F                 2082 	orl	a,r7
   07E4 60 CC              2083 	jz	00127$
                           2084 ;	../../../core/net/resolv.c:387: tcpip_poll_udp(resolv_conn);
   07E6 8D 82              2085 	mov	dpl,r5
   07E8 8E 83              2086 	mov	dph,r6
   07EA 8F F0              2087 	mov	b,r7
   07EC C0 02              2088 	push	ar2
   07EE C0 03              2089 	push	ar3
   07F0 C0 04              2090 	push	ar4
   07F2 12s00r00           2091 	lcall	_tcpip_poll_udp
   07F5 D0 04              2092 	pop	ar4
   07F7 D0 03              2093 	pop	ar3
   07F9 D0 02              2094 	pop	ar2
   07FB 80 B5              2095 	sjmp	00127$
   07FD                    2096 00124$:
                           2097 ;	../../../core/net/resolv.c:390: } else if(ev == EVENT_NEW_SERVER) {
   07FD E5*00              2098 	mov	a,_bp
   07FF 24 FD              2099 	add	a,#0xfd
   0801 F8                 2100 	mov	r0,a
   0802 E6                 2101 	mov	a,@r0
   0803 70 70              2102 	jnz	00121$
                           2103 ;	../../../core/net/resolv.c:391: if(resolv_conn != NULL) {
   0805 90s00r00           2104 	mov	dptr,#_resolv_conn
   0808 E0                 2105 	movx	a,@dptr
   0809 FD                 2106 	mov	r5,a
   080A A3                 2107 	inc	dptr
   080B E0                 2108 	movx	a,@dptr
   080C FE                 2109 	mov	r6,a
   080D A3                 2110 	inc	dptr
   080E E0                 2111 	movx	a,@dptr
   080F FF                 2112 	mov	r7,a
   0810 ED                 2113 	mov	a,r5
   0811 4E                 2114 	orl	a,r6
   0812 4F                 2115 	orl	a,r7
   0813 60 16              2116 	jz	00111$
                           2117 ;	../../../core/net/resolv.c:392: uip_udp_remove(resolv_conn);
   0815 74 04              2118 	mov	a,#0x04
   0817 2D                 2119 	add	a,r5
   0818 FD                 2120 	mov	r5,a
   0819 E4                 2121 	clr	a
   081A 3E                 2122 	addc	a,r6
   081B FE                 2123 	mov	r6,a
   081C 8D 82              2124 	mov	dpl,r5
   081E 8E 83              2125 	mov	dph,r6
   0820 8F F0              2126 	mov	b,r7
   0822 E4                 2127 	clr	a
   0823 12s00r00           2128 	lcall	__gptrput
   0826 A3                 2129 	inc	dptr
   0827 E4                 2130 	clr	a
   0828 12s00r00           2131 	lcall	__gptrput
   082B                    2132 00111$:
                           2133 ;	../../../core/net/resolv.c:394: resolv_conn = udp_new((uip_ipaddr_t *)data, HTONS(53), NULL);
   082B E5*00              2134 	mov	a,_bp
   082D 24 FA              2135 	add	a,#0xfa
   082F F8                 2136 	mov	r0,a
   0830 86 05              2137 	mov	ar5,@r0
   0832 08                 2138 	inc	r0
   0833 86 06              2139 	mov	ar6,@r0
   0835 08                 2140 	inc	r0
   0836 86 07              2141 	mov	ar7,@r0
   0838 C0 02              2142 	push	ar2
   083A C0 03              2143 	push	ar3
   083C C0 04              2144 	push	ar4
   083E E4                 2145 	clr	a
   083F C0 E0              2146 	push	acc
   0841 C0 E0              2147 	push	acc
   0843 C0 E0              2148 	push	acc
   0845 E4                 2149 	clr	a
   0846 C0 E0              2150 	push	acc
   0848 74 35              2151 	mov	a,#0x35
   084A C0 E0              2152 	push	acc
   084C 8D 82              2153 	mov	dpl,r5
   084E 8E 83              2154 	mov	dph,r6
   0850 8F F0              2155 	mov	b,r7
   0852 12s00r00           2156 	lcall	_udp_new
   0855 AD 82              2157 	mov	r5,dpl
   0857 AE 83              2158 	mov	r6,dph
   0859 AF F0              2159 	mov	r7,b
   085B E5 81              2160 	mov	a,sp
   085D 24 FB              2161 	add	a,#0xfb
   085F F5 81              2162 	mov	sp,a
   0861 D0 04              2163 	pop	ar4
   0863 D0 03              2164 	pop	ar3
   0865 D0 02              2165 	pop	ar2
   0867 90s00r00           2166 	mov	dptr,#_resolv_conn
   086A ED                 2167 	mov	a,r5
   086B F0                 2168 	movx	@dptr,a
   086C A3                 2169 	inc	dptr
   086D EE                 2170 	mov	a,r6
   086E F0                 2171 	movx	@dptr,a
   086F A3                 2172 	inc	dptr
   0870 EF                 2173 	mov	a,r7
   0871 F0                 2174 	movx	@dptr,a
   0872 02s07rB2           2175 	ljmp	00127$
   0875                    2176 00121$:
                           2177 ;	../../../core/net/resolv.c:396: } else if(ev == tcpip_event) {
   0875 90s00r00           2178 	mov	dptr,#_tcpip_event
   0878 E0                 2179 	movx	a,@dptr
   0879 FD                 2180 	mov	r5,a
   087A E5*00              2181 	mov	a,_bp
   087C 24 FD              2182 	add	a,#0xfd
   087E F8                 2183 	mov	r0,a
   087F E6                 2184 	mov	a,@r0
   0880 B5 05 02           2185 	cjne	a,ar5,00160$
   0883 80 03              2186 	sjmp	00161$
   0885                    2187 00160$:
   0885 02s07rB2           2188 	ljmp	00127$
   0888                    2189 00161$:
                           2190 ;	../../../core/net/resolv.c:397: if(uip_udp_conn->rport == HTONS(53)) {
   0888 90s00r00           2191 	mov	dptr,#_uip_udp_conn
   088B E0                 2192 	movx	a,@dptr
   088C FD                 2193 	mov	r5,a
   088D A3                 2194 	inc	dptr
   088E E0                 2195 	movx	a,@dptr
   088F FE                 2196 	mov	r6,a
   0890 A3                 2197 	inc	dptr
   0891 E0                 2198 	movx	a,@dptr
   0892 FF                 2199 	mov	r7,a
   0893 74 06              2200 	mov	a,#0x06
   0895 2D                 2201 	add	a,r5
   0896 FD                 2202 	mov	r5,a
   0897 E4                 2203 	clr	a
   0898 3E                 2204 	addc	a,r6
   0899 FE                 2205 	mov	r6,a
   089A 8D 82              2206 	mov	dpl,r5
   089C 8E 83              2207 	mov	dph,r6
   089E 8F F0              2208 	mov	b,r7
   08A0 12s00r00           2209 	lcall	__gptrget
   08A3 FD                 2210 	mov	r5,a
   08A4 A3                 2211 	inc	dptr
   08A5 12s00r00           2212 	lcall	__gptrget
   08A8 FE                 2213 	mov	r6,a
   08A9 BD 00 05           2214 	cjne	r5,#0x00,00162$
   08AC BE 35 02           2215 	cjne	r6,#0x35,00162$
   08AF 80 03              2216 	sjmp	00163$
   08B1                    2217 00162$:
   08B1 02s07rB2           2218 	ljmp	00127$
   08B4                    2219 00163$:
                           2220 ;	../../../core/net/resolv.c:398: if(uip_poll()) {
   08B4 90s00r00           2221 	mov	dptr,#_uip_flags
   08B7 E0                 2222 	movx	a,@dptr
   08B8 FD                 2223 	mov	r5,a
   08B9 30 E3 0F           2224 	jnb	acc.3,00113$
                           2225 ;	../../../core/net/resolv.c:399: check_entries();
   08BC C0 02              2226 	push	ar2
   08BE C0 03              2227 	push	ar3
   08C0 C0 04              2228 	push	ar4
   08C2 12s00r59           2229 	lcall	_check_entries
   08C5 D0 04              2230 	pop	ar4
   08C7 D0 03              2231 	pop	ar3
   08C9 D0 02              2232 	pop	ar2
   08CB                    2233 00113$:
                           2234 ;	../../../core/net/resolv.c:401: if(uip_newdata()) {
   08CB 90s00r00           2235 	mov	dptr,#_uip_flags
   08CE E0                 2236 	movx	a,@dptr
   08CF FD                 2237 	mov	r5,a
   08D0 20 E1 03           2238 	jb	acc.1,00165$
   08D3 02s07rB2           2239 	ljmp	00127$
   08D6                    2240 00165$:
                           2241 ;	../../../core/net/resolv.c:402: newdata();
   08D6 C0 02              2242 	push	ar2
   08D8 C0 03              2243 	push	ar3
   08DA C0 04              2244 	push	ar4
   08DC 12s04r00           2245 	lcall	_newdata
   08DF D0 04              2246 	pop	ar4
   08E1 D0 03              2247 	pop	ar3
   08E3 D0 02              2248 	pop	ar2
   08E5 02s07rB2           2249 	ljmp	00127$
                           2250 ;	../../../core/net/resolv.c:408: PROCESS_END();
   08E8                    2251 00129$:
   08E8 8A 82              2252 	mov	dpl,r2
   08EA 8B 83              2253 	mov	dph,r3
   08EC 8C F0              2254 	mov	b,r4
   08EE E4                 2255 	clr	a
   08EF 12s00r00           2256 	lcall	__gptrput
   08F2 A3                 2257 	inc	dptr
   08F3 E4                 2258 	clr	a
   08F4 12s00r00           2259 	lcall	__gptrput
   08F7 75 82 03           2260 	mov	dpl,#0x03
   08FA                    2261 00134$:
   08FA 85*00 81           2262 	mov	sp,_bp
   08FD D0*00              2263 	pop	_bp
   08FF 22                 2264 	ret
                           2265 ;------------------------------------------------------------
                           2266 ;Allocation info for local variables in function 'resolv_query'
                           2267 ;------------------------------------------------------------
                           2268 ;name                      Allocated to stack - offset 1
                           2269 ;nameptr                   Allocated to stack - offset 4
                           2270 ;sloc0                     Allocated to stack - offset 7
                           2271 ;i                         Allocated with name '_resolv_query_i_1_1'
                           2272 ;lseq                      Allocated with name '_resolv_query_lseq_1_1'
                           2273 ;lseqi                     Allocated with name '_resolv_query_lseqi_1_1'
                           2274 ;------------------------------------------------------------
                           2275 ;	../../../core/net/resolv.c:418: resolv_query(const char *name)
                           2276 ;	-----------------------------------------
                           2277 ;	 function resolv_query
                           2278 ;	-----------------------------------------
   0900                    2279 _resolv_query:
   0900 C0*00              2280 	push	_bp
   0902 85 81*00           2281 	mov	_bp,sp
   0905 C0 82              2282 	push	dpl
   0907 C0 83              2283 	push	dph
   0909 C0 F0              2284 	push	b
   090B 05 81              2285 	inc	sp
   090D 05 81              2286 	inc	sp
   090F 05 81              2287 	inc	sp
                           2288 ;	../../../core/net/resolv.c:424: lseq = lseqi = 0;
   0911 90s00rBA           2289 	mov	dptr,#_resolv_query_lseqi_1_1
   0914 E4                 2290 	clr	a
   0915 F0                 2291 	movx	@dptr,a
   0916 90s00rB9           2292 	mov	dptr,#_resolv_query_lseq_1_1
   0919 F0                 2293 	movx	@dptr,a
                           2294 ;	../../../core/net/resolv.c:425: nameptr = 0;                //compiler warning if not initialized
   091A E5*00              2295 	mov	a,_bp
   091C 24 04              2296 	add	a,#0x04
   091E F8                 2297 	mov	r0,a
   091F E4                 2298 	clr	a
   0920 F6                 2299 	mov	@r0,a
   0921 08                 2300 	inc	r0
   0922 F6                 2301 	mov	@r0,a
   0923 08                 2302 	inc	r0
   0924 76 00              2303 	mov	@r0,#0x00
                           2304 ;	../../../core/net/resolv.c:427: for(i = 0; i < RESOLV_ENTRIES; ++i) {
   0926 90s00rB8           2305 	mov	dptr,#_resolv_query_i_1_1
   0929 E4                 2306 	clr	a
   092A F0                 2307 	movx	@dptr,a
   092B                    2308 00105$:
   092B 90s00rB8           2309 	mov	dptr,#_resolv_query_i_1_1
   092E E0                 2310 	movx	a,@dptr
   092F FA                 2311 	mov	r2,a
   0930 BA 04 00           2312 	cjne	r2,#0x04,00121$
   0933                    2313 00121$:
   0933 40 03              2314 	jc	00122$
   0935 02s09rBF           2315 	ljmp	00108$
   0938                    2316 00122$:
                           2317 ;	../../../core/net/resolv.c:428: nameptr = &names[i];
   0938 EA                 2318 	mov	a,r2
   0939 75 F0 29           2319 	mov	b,#0x29
   093C A4                 2320 	mul	ab
   093D 24r00              2321 	add	a,#_names
   093F FB                 2322 	mov	r3,a
   0940 E4                 2323 	clr	a
   0941 34s00              2324 	addc	a,#(_names >> 8)
   0943 FC                 2325 	mov	r4,a
   0944 E5*00              2326 	mov	a,_bp
   0946 24 04              2327 	add	a,#0x04
   0948 F8                 2328 	mov	r0,a
   0949 A6 03              2329 	mov	@r0,ar3
   094B 08                 2330 	inc	r0
   094C A6 04              2331 	mov	@r0,ar4
   094E 08                 2332 	inc	r0
   094F 76 00              2333 	mov	@r0,#0x00
                           2334 ;	../../../core/net/resolv.c:429: if(nameptr->state == STATE_UNUSED) {
   0951 E5*00              2335 	mov	a,_bp
   0953 24 04              2336 	add	a,#0x04
   0955 F8                 2337 	mov	r0,a
   0956 86 82              2338 	mov	dpl,@r0
   0958 08                 2339 	inc	r0
   0959 86 83              2340 	mov	dph,@r0
   095B 08                 2341 	inc	r0
   095C 86 F0              2342 	mov	b,@r0
   095E 12s00r00           2343 	lcall	__gptrget
   0961 60 5C              2344 	jz	00108$
                           2345 ;	../../../core/net/resolv.c:432: if(seqno - nameptr->seqno > lseq) {
   0963 C0 02              2346 	push	ar2
   0965 90s00rA4           2347 	mov	dptr,#_seqno
   0968 E0                 2348 	movx	a,@dptr
   0969 FB                 2349 	mov	r3,a
   096A FC                 2350 	mov	r4,a
   096B 7A 00              2351 	mov	r2,#0x00
   096D E5*00              2352 	mov	a,_bp
   096F 24 04              2353 	add	a,#0x04
   0971 F8                 2354 	mov	r0,a
   0972 74 03              2355 	mov	a,#0x03
   0974 26                 2356 	add	a,@r0
   0975 FD                 2357 	mov	r5,a
   0976 E4                 2358 	clr	a
   0977 08                 2359 	inc	r0
   0978 36                 2360 	addc	a,@r0
   0979 FE                 2361 	mov	r6,a
   097A 08                 2362 	inc	r0
   097B 86 07              2363 	mov	ar7,@r0
   097D 8D 82              2364 	mov	dpl,r5
   097F 8E 83              2365 	mov	dph,r6
   0981 8F F0              2366 	mov	b,r7
   0983 12s00r00           2367 	lcall	__gptrget
   0986 FF                 2368 	mov	r7,a
   0987 FD                 2369 	mov	r5,a
   0988 7E 00              2370 	mov	r6,#0x00
   098A EC                 2371 	mov	a,r4
   098B C3                 2372 	clr	c
   098C 9D                 2373 	subb	a,r5
   098D FC                 2374 	mov	r4,a
   098E EA                 2375 	mov	a,r2
   098F 9E                 2376 	subb	a,r6
   0990 FA                 2377 	mov	r2,a
   0991 90s00rB9           2378 	mov	dptr,#_resolv_query_lseq_1_1
   0994 E0                 2379 	movx	a,@dptr
   0995 FD                 2380 	mov	r5,a
   0996 7E 00              2381 	mov	r6,#0x00
   0998 C3                 2382 	clr	c
   0999 ED                 2383 	mov	a,r5
   099A 9C                 2384 	subb	a,r4
   099B EE                 2385 	mov	a,r6
   099C 64 80              2386 	xrl	a,#0x80
   099E 8A F0              2387 	mov	b,r2
   09A0 63 F0 80           2388 	xrl	b,#0x80
   09A3 95 F0              2389 	subb	a,b
   09A5 D0 02              2390 	pop	ar2
   09A7 50 0C              2391 	jnc	00107$
                           2392 ;	../../../core/net/resolv.c:433: lseq = seqno - nameptr->seqno;
   09A9 90s00rB9           2393 	mov	dptr,#_resolv_query_lseq_1_1
   09AC EB                 2394 	mov	a,r3
   09AD C3                 2395 	clr	c
   09AE 9F                 2396 	subb	a,r7
   09AF F0                 2397 	movx	@dptr,a
                           2398 ;	../../../core/net/resolv.c:434: lseqi = i;
   09B0 90s00rBA           2399 	mov	dptr,#_resolv_query_lseqi_1_1
   09B3 EA                 2400 	mov	a,r2
   09B4 F0                 2401 	movx	@dptr,a
   09B5                    2402 00107$:
                           2403 ;	../../../core/net/resolv.c:427: for(i = 0; i < RESOLV_ENTRIES; ++i) {
   09B5 90s00rB8           2404 	mov	dptr,#_resolv_query_i_1_1
   09B8 E0                 2405 	movx	a,@dptr
   09B9 24 01              2406 	add	a,#0x01
   09BB F0                 2407 	movx	@dptr,a
   09BC 02s09r2B           2408 	ljmp	00105$
   09BF                    2409 00108$:
                           2410 ;	../../../core/net/resolv.c:438: if(i == RESOLV_ENTRIES) {
   09BF 90s00rB8           2411 	mov	dptr,#_resolv_query_i_1_1
   09C2 E0                 2412 	movx	a,@dptr
   09C3 FA                 2413 	mov	r2,a
   09C4 BA 04 22           2414 	cjne	r2,#0x04,00110$
                           2415 ;	../../../core/net/resolv.c:439: i = lseqi;
   09C7 90s00rBA           2416 	mov	dptr,#_resolv_query_lseqi_1_1
   09CA E0                 2417 	movx	a,@dptr
   09CB FA                 2418 	mov	r2,a
   09CC 90s00rB8           2419 	mov	dptr,#_resolv_query_i_1_1
   09CF F0                 2420 	movx	@dptr,a
                           2421 ;	../../../core/net/resolv.c:440: nameptr = &names[i];
   09D0 EA                 2422 	mov	a,r2
   09D1 75 F0 29           2423 	mov	b,#0x29
   09D4 A4                 2424 	mul	ab
   09D5 24r00              2425 	add	a,#_names
   09D7 FA                 2426 	mov	r2,a
   09D8 E4                 2427 	clr	a
   09D9 34s00              2428 	addc	a,#(_names >> 8)
   09DB FB                 2429 	mov	r3,a
   09DC E5*00              2430 	mov	a,_bp
   09DE 24 04              2431 	add	a,#0x04
   09E0 F8                 2432 	mov	r0,a
   09E1 A6 02              2433 	mov	@r0,ar2
   09E3 08                 2434 	inc	r0
   09E4 A6 03              2435 	mov	@r0,ar3
   09E6 08                 2436 	inc	r0
   09E7 76 00              2437 	mov	@r0,#0x00
   09E9                    2438 00110$:
                           2439 ;	../../../core/net/resolv.c:443: strncpy(nameptr->name, name, sizeof(nameptr->name));
   09E9 E5*00              2440 	mov	a,_bp
   09EB 24 04              2441 	add	a,#0x04
   09ED F8                 2442 	mov	r0,a
   09EE 74 05              2443 	mov	a,#0x05
   09F0 26                 2444 	add	a,@r0
   09F1 FA                 2445 	mov	r2,a
   09F2 E4                 2446 	clr	a
   09F3 08                 2447 	inc	r0
   09F4 36                 2448 	addc	a,@r0
   09F5 FB                 2449 	mov	r3,a
   09F6 08                 2450 	inc	r0
   09F7 86 04              2451 	mov	ar4,@r0
   09F9 74 20              2452 	mov	a,#0x20
   09FB C0 E0              2453 	push	acc
   09FD E4                 2454 	clr	a
   09FE C0 E0              2455 	push	acc
   0A00 A8*00              2456 	mov	r0,_bp
   0A02 08                 2457 	inc	r0
   0A03 E6                 2458 	mov	a,@r0
   0A04 C0 E0              2459 	push	acc
   0A06 08                 2460 	inc	r0
   0A07 E6                 2461 	mov	a,@r0
   0A08 C0 E0              2462 	push	acc
   0A0A 08                 2463 	inc	r0
   0A0B E6                 2464 	mov	a,@r0
   0A0C C0 E0              2465 	push	acc
   0A0E 8A 82              2466 	mov	dpl,r2
   0A10 8B 83              2467 	mov	dph,r3
   0A12 8C F0              2468 	mov	b,r4
   0A14 12s00r00           2469 	lcall	_strncpy
   0A17 E5 81              2470 	mov	a,sp
   0A19 24 FB              2471 	add	a,#0xfb
   0A1B F5 81              2472 	mov	sp,a
                           2473 ;	../../../core/net/resolv.c:444: nameptr->state = STATE_NEW;
   0A1D E5*00              2474 	mov	a,_bp
   0A1F 24 04              2475 	add	a,#0x04
   0A21 F8                 2476 	mov	r0,a
   0A22 86 82              2477 	mov	dpl,@r0
   0A24 08                 2478 	inc	r0
   0A25 86 83              2479 	mov	dph,@r0
   0A27 08                 2480 	inc	r0
   0A28 86 F0              2481 	mov	b,@r0
   0A2A 74 01              2482 	mov	a,#0x01
   0A2C 12s00r00           2483 	lcall	__gptrput
                           2484 ;	../../../core/net/resolv.c:445: nameptr->seqno = seqno;
   0A2F E5*00              2485 	mov	a,_bp
   0A31 24 04              2486 	add	a,#0x04
   0A33 F8                 2487 	mov	r0,a
   0A34 74 03              2488 	mov	a,#0x03
   0A36 26                 2489 	add	a,@r0
   0A37 FA                 2490 	mov	r2,a
   0A38 E4                 2491 	clr	a
   0A39 08                 2492 	inc	r0
   0A3A 36                 2493 	addc	a,@r0
   0A3B FB                 2494 	mov	r3,a
   0A3C 08                 2495 	inc	r0
   0A3D 86 04              2496 	mov	ar4,@r0
   0A3F 90s00rA4           2497 	mov	dptr,#_seqno
   0A42 E0                 2498 	movx	a,@dptr
   0A43 FD                 2499 	mov	r5,a
   0A44 8A 82              2500 	mov	dpl,r2
   0A46 8B 83              2501 	mov	dph,r3
   0A48 8C F0              2502 	mov	b,r4
   0A4A 12s00r00           2503 	lcall	__gptrput
                           2504 ;	../../../core/net/resolv.c:446: ++seqno;
   0A4D 90s00rA4           2505 	mov	dptr,#_seqno
   0A50 ED                 2506 	mov	a,r5
   0A51 04                 2507 	inc	a
   0A52 F0                 2508 	movx	@dptr,a
                           2509 ;	../../../core/net/resolv.c:448: if(resolv_conn != NULL) {
   0A53 90s00r00           2510 	mov	dptr,#_resolv_conn
   0A56 E0                 2511 	movx	a,@dptr
   0A57 FA                 2512 	mov	r2,a
   0A58 A3                 2513 	inc	dptr
   0A59 E0                 2514 	movx	a,@dptr
   0A5A FB                 2515 	mov	r3,a
   0A5B A3                 2516 	inc	dptr
   0A5C E0                 2517 	movx	a,@dptr
   0A5D FC                 2518 	mov	r4,a
   0A5E EA                 2519 	mov	a,r2
   0A5F 4B                 2520 	orl	a,r3
   0A60 4C                 2521 	orl	a,r4
   0A61 60 09              2522 	jz	00113$
                           2523 ;	../../../core/net/resolv.c:449: tcpip_poll_udp(resolv_conn);
   0A63 8A 82              2524 	mov	dpl,r2
   0A65 8B 83              2525 	mov	dph,r3
   0A67 8C F0              2526 	mov	b,r4
   0A69 12s00r00           2527 	lcall	_tcpip_poll_udp
   0A6C                    2528 00113$:
   0A6C 85*00 81           2529 	mov	sp,_bp
   0A6F D0*00              2530 	pop	_bp
   0A71 22                 2531 	ret
                           2532 ;------------------------------------------------------------
                           2533 ;Allocation info for local variables in function 'resolv_lookup'
                           2534 ;------------------------------------------------------------
                           2535 ;name                      Allocated to stack - offset 1
                           2536 ;nameptr                   Allocated to registers r5 r6 r7 
                           2537 ;i                         Allocated with name '_resolv_lookup_i_1_1'
                           2538 ;------------------------------------------------------------
                           2539 ;	../../../core/net/resolv.c:467: resolv_lookup(const char *name)
                           2540 ;	-----------------------------------------
                           2541 ;	 function resolv_lookup
                           2542 ;	-----------------------------------------
   0A72                    2543 _resolv_lookup:
   0A72 C0*00              2544 	push	_bp
   0A74 85 81*00           2545 	mov	_bp,sp
   0A77 C0 82              2546 	push	dpl
   0A79 C0 83              2547 	push	dph
   0A7B C0 F0              2548 	push	b
                           2549 ;	../../../core/net/resolv.c:474: for(i = 0; i < RESOLV_ENTRIES; ++i) {
   0A7D 90s00rBB           2550 	mov	dptr,#_resolv_lookup_i_1_1
   0A80 E4                 2551 	clr	a
   0A81 F0                 2552 	movx	@dptr,a
   0A82                    2553 00104$:
   0A82 90s00rBB           2554 	mov	dptr,#_resolv_lookup_i_1_1
   0A85 E0                 2555 	movx	a,@dptr
   0A86 FD                 2556 	mov	r5,a
   0A87 BD 04 00           2557 	cjne	r5,#0x04,00114$
   0A8A                    2558 00114$:
   0A8A 50 6A              2559 	jnc	00107$
                           2560 ;	../../../core/net/resolv.c:475: nameptr = &names[i];
   0A8C ED                 2561 	mov	a,r5
   0A8D 75 F0 29           2562 	mov	b,#0x29
   0A90 A4                 2563 	mul	ab
   0A91 24r00              2564 	add	a,#_names
   0A93 FD                 2565 	mov	r5,a
   0A94 E4                 2566 	clr	a
   0A95 34s00              2567 	addc	a,#(_names >> 8)
   0A97 FE                 2568 	mov	r6,a
   0A98 7F 00              2569 	mov	r7,#0x00
                           2570 ;	../../../core/net/resolv.c:476: if(nameptr->state == STATE_DONE &&
   0A9A 8D 82              2571 	mov	dpl,r5
   0A9C 8E 83              2572 	mov	dph,r6
   0A9E 8F F0              2573 	mov	b,r7
   0AA0 12s00r00           2574 	lcall	__gptrget
   0AA3 FA                 2575 	mov	r2,a
   0AA4 BA 03 46           2576 	cjne	r2,#0x03,00106$
                           2577 ;	../../../core/net/resolv.c:477: strcmp(name, nameptr->name) == 0) {
   0AA7 74 05              2578 	mov	a,#0x05
   0AA9 2D                 2579 	add	a,r5
   0AAA FA                 2580 	mov	r2,a
   0AAB E4                 2581 	clr	a
   0AAC 3E                 2582 	addc	a,r6
   0AAD FB                 2583 	mov	r3,a
   0AAE 8F 04              2584 	mov	ar4,r7
   0AB0 C0 05              2585 	push	ar5
   0AB2 C0 06              2586 	push	ar6
   0AB4 C0 07              2587 	push	ar7
   0AB6 C0 02              2588 	push	ar2
   0AB8 C0 03              2589 	push	ar3
   0ABA C0 04              2590 	push	ar4
   0ABC A8*00              2591 	mov	r0,_bp
   0ABE 08                 2592 	inc	r0
   0ABF 86 82              2593 	mov	dpl,@r0
   0AC1 08                 2594 	inc	r0
   0AC2 86 83              2595 	mov	dph,@r0
   0AC4 08                 2596 	inc	r0
   0AC5 86 F0              2597 	mov	b,@r0
   0AC7 12s00r00           2598 	lcall	_strcmp
   0ACA AA 82              2599 	mov	r2,dpl
   0ACC AB 83              2600 	mov	r3,dph
   0ACE 15 81              2601 	dec	sp
   0AD0 15 81              2602 	dec	sp
   0AD2 15 81              2603 	dec	sp
   0AD4 D0 07              2604 	pop	ar7
   0AD6 D0 06              2605 	pop	ar6
   0AD8 D0 05              2606 	pop	ar5
   0ADA EA                 2607 	mov	a,r2
   0ADB 4B                 2608 	orl	a,r3
   0ADC 70 0F              2609 	jnz	00106$
                           2610 ;	../../../core/net/resolv.c:478: return &nameptr->ipaddr;
   0ADE 74 25              2611 	mov	a,#0x25
   0AE0 2D                 2612 	add	a,r5
   0AE1 FD                 2613 	mov	r5,a
   0AE2 E4                 2614 	clr	a
   0AE3 3E                 2615 	addc	a,r6
   0AE4 FE                 2616 	mov	r6,a
   0AE5 8D 82              2617 	mov	dpl,r5
   0AE7 8E 83              2618 	mov	dph,r6
   0AE9 8F F0              2619 	mov	b,r7
   0AEB 80 0F              2620 	sjmp	00108$
   0AED                    2621 00106$:
                           2622 ;	../../../core/net/resolv.c:474: for(i = 0; i < RESOLV_ENTRIES; ++i) {
   0AED 90s00rBB           2623 	mov	dptr,#_resolv_lookup_i_1_1
   0AF0 E0                 2624 	movx	a,@dptr
   0AF1 24 01              2625 	add	a,#0x01
   0AF3 F0                 2626 	movx	@dptr,a
   0AF4 80 8C              2627 	sjmp	00104$
   0AF6                    2628 00107$:
                           2629 ;	../../../core/net/resolv.c:481: return NULL;
   0AF6 90 00 00           2630 	mov	dptr,#0x0000
   0AF9 75 F0 00           2631 	mov	b,#0x00
   0AFC                    2632 00108$:
   0AFC 85*00 81           2633 	mov	sp,_bp
   0AFF D0*00              2634 	pop	_bp
   0B01 22                 2635 	ret
                           2636 ;------------------------------------------------------------
                           2637 ;Allocation info for local variables in function 'resolv_getserver'
                           2638 ;------------------------------------------------------------
                           2639 ;------------------------------------------------------------
                           2640 ;	../../../core/net/resolv.c:493: resolv_getserver(void)
                           2641 ;	-----------------------------------------
                           2642 ;	 function resolv_getserver
                           2643 ;	-----------------------------------------
   0B02                    2644 _resolv_getserver:
                           2645 ;	../../../core/net/resolv.c:495: if(resolv_conn == NULL) {
   0B02 90s00r00           2646 	mov	dptr,#_resolv_conn
   0B05 E0                 2647 	movx	a,@dptr
   0B06 FA                 2648 	mov	r2,a
   0B07 A3                 2649 	inc	dptr
   0B08 E0                 2650 	movx	a,@dptr
   0B09 FB                 2651 	mov	r3,a
   0B0A A3                 2652 	inc	dptr
   0B0B E0                 2653 	movx	a,@dptr
   0B0C FC                 2654 	mov	r4,a
   0B0D EA                 2655 	mov	a,r2
   0B0E 4B                 2656 	orl	a,r3
   0B0F 4C                 2657 	orl	a,r4
                           2658 ;	../../../core/net/resolv.c:496: return NULL;
   0B10 70 06              2659 	jnz	00102$
   0B12 90 00 00           2660 	mov	dptr,#0x0000
   0B15 F5 F0              2661 	mov	b,a
   0B17 22                 2662 	ret
   0B18                    2663 00102$:
                           2664 ;	../../../core/net/resolv.c:498: return &resolv_conn->ripaddr;
   0B18 8A 82              2665 	mov	dpl,r2
   0B1A 8B 83              2666 	mov	dph,r3
   0B1C 8C F0              2667 	mov	b,r4
   0B1E 22                 2668 	ret
                           2669 ;------------------------------------------------------------
                           2670 ;Allocation info for local variables in function 'resolv_conf'
                           2671 ;------------------------------------------------------------
                           2672 ;dnsserver                 Allocated to registers r2 r3 r4 
                           2673 ;server                    Allocated with name '_resolv_conf_server_1_1'
                           2674 ;------------------------------------------------------------
                           2675 ;	../../../core/net/resolv.c:509: resolv_conf(const uip_ipaddr_t *dnsserver)
                           2676 ;	-----------------------------------------
                           2677 ;	 function resolv_conf
                           2678 ;	-----------------------------------------
   0B1F                    2679 _resolv_conf:
   0B1F AA 82              2680 	mov	r2,dpl
   0B21 AB 83              2681 	mov	r3,dph
   0B23 AC F0              2682 	mov	r4,b
                           2683 ;	../../../core/net/resolv.c:512: uip_ipaddr_copy(&server, dnsserver);
   0B25 74 04              2684 	mov	a,#0x04
   0B27 C0 E0              2685 	push	acc
   0B29 E4                 2686 	clr	a
   0B2A C0 E0              2687 	push	acc
   0B2C C0 02              2688 	push	ar2
   0B2E C0 03              2689 	push	ar3
   0B30 C0 04              2690 	push	ar4
   0B32 90s00rBC           2691 	mov	dptr,#_resolv_conf_server_1_1
   0B35 75 F0 00           2692 	mov	b,#0x00
   0B38 12s00r00           2693 	lcall	_memcpy
   0B3B E5 81              2694 	mov	a,sp
   0B3D 24 FB              2695 	add	a,#0xfb
   0B3F F5 81              2696 	mov	sp,a
                           2697 ;	../../../core/net/resolv.c:513: process_post(&resolv_process, EVENT_NEW_SERVER, &server);
   0B41 74rBC              2698 	mov	a,#_resolv_conf_server_1_1
   0B43 C0 E0              2699 	push	acc
   0B45 74s00              2700 	mov	a,#(_resolv_conf_server_1_1 >> 8)
   0B47 C0 E0              2701 	push	acc
   0B49 E4                 2702 	clr	a
   0B4A C0 E0              2703 	push	acc
   0B4C E4                 2704 	clr	a
   0B4D C0 E0              2705 	push	acc
   0B4F 90s00r03           2706 	mov	dptr,#_resolv_process
   0B52 75 F0 00           2707 	mov	b,#0x00
   0B55 12s00r00           2708 	lcall	_process_post
   0B58 E5 81              2709 	mov	a,sp
   0B5A 24 FC              2710 	add	a,#0xfc
   0B5C F5 81              2711 	mov	sp,a
   0B5E 22                 2712 	ret
                           2713 ;------------------------------------------------------------
                           2714 ;Allocation info for local variables in function 'resolv_found'
                           2715 ;------------------------------------------------------------
                           2716 ;ipaddr                    Allocated to stack - offset -5
                           2717 ;name                      Allocated to registers r2 r3 r4 
                           2718 ;------------------------------------------------------------
                           2719 ;	../../../core/net/resolv.c:528: resolv_found(char *name, uip_ipaddr_t *ipaddr)
                           2720 ;	-----------------------------------------
                           2721 ;	 function resolv_found
                           2722 ;	-----------------------------------------
   0B5F                    2723 _resolv_found:
   0B5F C0*00              2724 	push	_bp
   0B61 85 81*00           2725 	mov	_bp,sp
   0B64 AA 82              2726 	mov	r2,dpl
   0B66 AB 83              2727 	mov	r3,dph
   0B68 AC F0              2728 	mov	r4,b
                           2729 ;	../../../core/net/resolv.c:530: process_post(PROCESS_BROADCAST, resolv_event_found, name);
   0B6A C0 02              2730 	push	ar2
   0B6C C0 03              2731 	push	ar3
   0B6E C0 04              2732 	push	ar4
   0B70 90s00rAF           2733 	mov	dptr,#_resolv_event_found
   0B73 E0                 2734 	movx	a,@dptr
   0B74 C0 E0              2735 	push	acc
   0B76 90 00 00           2736 	mov	dptr,#0x0000
   0B79 75 F0 00           2737 	mov	b,#0x00
   0B7C 12s00r00           2738 	lcall	_process_post
   0B7F E5 81              2739 	mov	a,sp
   0B81 24 FC              2740 	add	a,#0xfc
   0B83 F5 81              2741 	mov	sp,a
   0B85 D0*00              2742 	pop	_bp
   0B87 22                 2743 	ret
                           2744 	.area CSEG    (CODE)
                           2745 	.area CONST   (CODE)
                           2746 	.area XINIT   (CODE)
   0000                    2747 __xinit__resolv_conn:
                           2748 ; generic printIvalPtr
   0000 00 00 00           2749 	.byte #0x00,#0x00,#0x00
   0003                    2750 __xinit__resolv_process:
                           2751 ; generic printIvalPtr
   0003 00 00 00           2752 	.byte #0x00,#0x00,#0x00
   0006r2Fs07              2753 	.byte _process_thread_resolv_process,(_process_thread_resolv_process >> 8)
   0008 00 00              2754 	.byte #0x00,#0x00	; 0
   000A 00                 2755 	.db #0x00	; 0
   000B 00                 2756 	.db #0x00	; 0
                           2757 	.area CABS    (ABS,CODE)
