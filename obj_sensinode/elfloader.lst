                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6121 (Nov 17 2015) (CYGWIN)
                              4 ; This file was generated Sat Jan 27 13:26:17 2018
                              5 ;--------------------------------------------------------
                              6 	.module elfloader
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _IRCON2_P2IF
                             13 	.globl _IRCON2_UTX0IF
                             14 	.globl _IRCON2_UTX1IF
                             15 	.globl _IRCON2_P1IF
                             16 	.globl _IRCON2_WDTIF
                             17 	.globl _CY
                             18 	.globl _AC
                             19 	.globl _F0
                             20 	.globl _RS1
                             21 	.globl _RS0
                             22 	.globl _OV
                             23 	.globl _F1
                             24 	.globl _P
                             25 	.globl _IRCON_DMAIF
                             26 	.globl _IRCON_T1IF
                             27 	.globl _IRCON_T2IF
                             28 	.globl _IRCON_T3IF
                             29 	.globl _IRCON_T4IF
                             30 	.globl _IRCON_P0IF
                             31 	.globl _IRCON_STIF
                             32 	.globl _IEN1_DMAIE
                             33 	.globl _IEN1_T1IE
                             34 	.globl _IEN1_T2IE
                             35 	.globl _IEN1_T3IE
                             36 	.globl _IEN1_T4IE
                             37 	.globl _IEN1_P0IE
                             38 	.globl _IEN0_RFERRIE
                             39 	.globl _IEN0_ADCIE
                             40 	.globl _IEN0_URX0IE
                             41 	.globl _IEN0_URX1IE
                             42 	.globl _IEN0_ENCIE
                             43 	.globl _IEN0_STIE
                             44 	.globl _IEN0_EA
                             45 	.globl _EA
                             46 	.globl _P2_4
                             47 	.globl _P2_3
                             48 	.globl _P2_2
                             49 	.globl _P2_1
                             50 	.globl _P2_0
                             51 	.globl _S0CON_ENCIF_0
                             52 	.globl _S0CON_ENCIF_1
                             53 	.globl _P1_7
                             54 	.globl _P1_6
                             55 	.globl _P1_5
                             56 	.globl _P1_4
                             57 	.globl _P1_3
                             58 	.globl _P1_2
                             59 	.globl _P1_1
                             60 	.globl _P1_0
                             61 	.globl _TCON_IT0
                             62 	.globl _TCON_RFERRIF
                             63 	.globl _TCON_IT1
                             64 	.globl _TCON_URX0IF
                             65 	.globl _TCON_ADCIF
                             66 	.globl _TCON_URX1IF
                             67 	.globl _P0_0
                             68 	.globl _P0_1
                             69 	.globl _P0_2
                             70 	.globl _P0_3
                             71 	.globl _P0_4
                             72 	.globl _P0_5
                             73 	.globl _P0_6
                             74 	.globl _P0_7
                             75 	.globl _P2DIR
                             76 	.globl _P1DIR
                             77 	.globl _P0DIR
                             78 	.globl _U1GCR
                             79 	.globl _U1UCR
                             80 	.globl _U1BAUD
                             81 	.globl _U1BUF
                             82 	.globl _U1CSR
                             83 	.globl _P2INP
                             84 	.globl _P1INP
                             85 	.globl _P2SEL
                             86 	.globl _P1SEL
                             87 	.globl _P0SEL
                             88 	.globl _ADCCFG
                             89 	.globl _PERCFG
                             90 	.globl _B
                             91 	.globl _T4CC1
                             92 	.globl _T4CCTL1
                             93 	.globl _T4CC0
                             94 	.globl _T4CCTL0
                             95 	.globl _T4CTL
                             96 	.globl _T4CNT
                             97 	.globl _RFIF
                             98 	.globl _IRCON2
                             99 	.globl _T1CCTL2
                            100 	.globl _T1CCTL1
                            101 	.globl _T1CCTL0
                            102 	.globl _T1CTL
                            103 	.globl _T1CNTH
                            104 	.globl _T1CNTL
                            105 	.globl _RFST
                            106 	.globl _ACC
                            107 	.globl _T1CC2H
                            108 	.globl _T1CC2L
                            109 	.globl _T1CC1H
                            110 	.globl _T1CC1L
                            111 	.globl _T1CC0H
                            112 	.globl _T1CC0L
                            113 	.globl _RFD
                            114 	.globl _TIMIF
                            115 	.globl _DMAREQ
                            116 	.globl _DMAARM
                            117 	.globl _DMA0CFGH
                            118 	.globl _DMA0CFGL
                            119 	.globl _DMA1CFGH
                            120 	.globl _DMA1CFGL
                            121 	.globl _DMAIRQ
                            122 	.globl _PSW
                            123 	.globl _T3CC1
                            124 	.globl _T3CCTL1
                            125 	.globl _T3CC0
                            126 	.globl _T3CCTL0
                            127 	.globl _T3CTL
                            128 	.globl _T3CNT
                            129 	.globl _WDCTL
                            130 	.globl _T2CON
                            131 	.globl _MEMCTR
                            132 	.globl _CLKCON
                            133 	.globl _U0GCR
                            134 	.globl _U0UCR
                            135 	.globl _T2CNF
                            136 	.globl _U0BAUD
                            137 	.globl _U0BUF
                            138 	.globl _IRCON
                            139 	.globl _SLEEP
                            140 	.globl _RNDH
                            141 	.globl _RNDL
                            142 	.globl _ADCH
                            143 	.globl _ADCL
                            144 	.globl _IP1
                            145 	.globl _IEN1
                            146 	.globl _RCCTL
                            147 	.globl _ADCCON3
                            148 	.globl _ADCCON2
                            149 	.globl _ADCCON1
                            150 	.globl _ENCCS
                            151 	.globl _ENCDO
                            152 	.globl _ENCDI
                            153 	.globl _FWDATA
                            154 	.globl _FCTL
                            155 	.globl _FADDRH
                            156 	.globl _FADDRL
                            157 	.globl _FWT
                            158 	.globl _IP0
                            159 	.globl _IEN0
                            160 	.globl _IE
                            161 	.globl _T2THD
                            162 	.globl _T2TLD
                            163 	.globl _T2CAPHPH
                            164 	.globl _T2CAPLPL
                            165 	.globl _T2OF2
                            166 	.globl _T2OF1
                            167 	.globl _T2OF0
                            168 	.globl _P2
                            169 	.globl _PSBANK
                            170 	.globl _FMAP
                            171 	.globl _T2PEROF2
                            172 	.globl _T2PEROF1
                            173 	.globl _T2PEROF0
                            174 	.globl _S1CON
                            175 	.globl _IEN2
                            176 	.globl _HSRC
                            177 	.globl _S0CON
                            178 	.globl _ST2
                            179 	.globl _ST1
                            180 	.globl _ST0
                            181 	.globl _T2CMP
                            182 	.globl __XPAGE
                            183 	.globl _DPS
                            184 	.globl _RFIM
                            185 	.globl _P1
                            186 	.globl _P0INP
                            187 	.globl _P1IEN
                            188 	.globl _PICTL
                            189 	.globl _P2IFG
                            190 	.globl _P1IFG
                            191 	.globl _P0IFG
                            192 	.globl _TCON
                            193 	.globl _PCON
                            194 	.globl _U0CSR
                            195 	.globl _DPH1
                            196 	.globl _DPL1
                            197 	.globl _DPH0
                            198 	.globl _DPL0
                            199 	.globl _SP
                            200 	.globl _P0
                            201 	.globl _elfloader_autostart_processes
                            202 	.globl _elfloader_unknown
                            203 	.globl _ADC_SHADOW
                            204 	.globl _U1BUF_SHADOW
                            205 	.globl _RFD_SHADOW
                            206 	.globl _U0BUF_SHADOW
                            207 	.globl _RFSTATUS
                            208 	.globl _CHIPID
                            209 	.globl _CHVER
                            210 	.globl _FSMTC1
                            211 	.globl _RXFIFOCNT
                            212 	.globl _IOCFG3
                            213 	.globl _IOCFG2
                            214 	.globl _IOCFG1
                            215 	.globl _IOCFG0
                            216 	.globl _SHORTADDRL
                            217 	.globl _SHORTADDRH
                            218 	.globl _PANIDL
                            219 	.globl _PANIDH
                            220 	.globl _IEEE_ADDR7
                            221 	.globl _IEEE_ADDR6
                            222 	.globl _IEEE_ADDR5
                            223 	.globl _IEEE_ADDR4
                            224 	.globl _IEEE_ADDR3
                            225 	.globl _IEEE_ADDR2
                            226 	.globl _IEEE_ADDR1
                            227 	.globl _IEEE_ADDR0
                            228 	.globl _DACTSTL
                            229 	.globl _DACTSTH
                            230 	.globl _ADCTSTL
                            231 	.globl _ADCTSTH
                            232 	.globl _FSMSTATE
                            233 	.globl _AGCCTRLL
                            234 	.globl _AGCCTRLH
                            235 	.globl _MANORL
                            236 	.globl _MANORH
                            237 	.globl _MANANDL
                            238 	.globl _MANANDH
                            239 	.globl _FSMTCL
                            240 	.globl _FSMTCH
                            241 	.globl _RFPWR
                            242 	.globl _CSPT
                            243 	.globl _CSPCTRL
                            244 	.globl _CSPZ
                            245 	.globl _CSPY
                            246 	.globl _CSPX
                            247 	.globl _FSCTRLL
                            248 	.globl _FSCTRLH
                            249 	.globl _RXCTRL1L
                            250 	.globl _RXCTRL1H
                            251 	.globl _RXCTRL0L
                            252 	.globl _RXCTRL0H
                            253 	.globl _TXCTRLL
                            254 	.globl _TXCTRLH
                            255 	.globl _SYNCWORDL
                            256 	.globl _SYNCWORDH
                            257 	.globl _RSSIL
                            258 	.globl _RSSIH
                            259 	.globl _MDMCTRL1L
                            260 	.globl _MDMCTRL1H
                            261 	.globl _MDMCTRL0L
                            262 	.globl _MDMCTRL0H
                            263 	.globl _elfloader_init
                            264 	.globl _elfloader_load
                            265 ;--------------------------------------------------------
                            266 ; special function registers
                            267 ;--------------------------------------------------------
                            268 	.area RSEG    (ABS,DATA)
   0000                     269 	.org 0x0000
                    0080    270 _P0	=	0x0080
                    0081    271 _SP	=	0x0081
                    0082    272 _DPL0	=	0x0082
                    0083    273 _DPH0	=	0x0083
                    0084    274 _DPL1	=	0x0084
                    0085    275 _DPH1	=	0x0085
                    0086    276 _U0CSR	=	0x0086
                    0087    277 _PCON	=	0x0087
                    0088    278 _TCON	=	0x0088
                    0089    279 _P0IFG	=	0x0089
                    008A    280 _P1IFG	=	0x008a
                    008B    281 _P2IFG	=	0x008b
                    008C    282 _PICTL	=	0x008c
                    008D    283 _P1IEN	=	0x008d
                    008F    284 _P0INP	=	0x008f
                    0090    285 _P1	=	0x0090
                    0091    286 _RFIM	=	0x0091
                    0092    287 _DPS	=	0x0092
                    0093    288 __XPAGE	=	0x0093
                    0094    289 _T2CMP	=	0x0094
                    0095    290 _ST0	=	0x0095
                    0096    291 _ST1	=	0x0096
                    0097    292 _ST2	=	0x0097
                    0098    293 _S0CON	=	0x0098
                    0099    294 _HSRC	=	0x0099
                    009A    295 _IEN2	=	0x009a
                    009B    296 _S1CON	=	0x009b
                    009C    297 _T2PEROF0	=	0x009c
                    009D    298 _T2PEROF1	=	0x009d
                    009E    299 _T2PEROF2	=	0x009e
                    009F    300 _FMAP	=	0x009f
                    009F    301 _PSBANK	=	0x009f
                    00A0    302 _P2	=	0x00a0
                    00A1    303 _T2OF0	=	0x00a1
                    00A2    304 _T2OF1	=	0x00a2
                    00A3    305 _T2OF2	=	0x00a3
                    00A4    306 _T2CAPLPL	=	0x00a4
                    00A5    307 _T2CAPHPH	=	0x00a5
                    00A6    308 _T2TLD	=	0x00a6
                    00A7    309 _T2THD	=	0x00a7
                    00A8    310 _IE	=	0x00a8
                    00A8    311 _IEN0	=	0x00a8
                    00A9    312 _IP0	=	0x00a9
                    00AB    313 _FWT	=	0x00ab
                    00AC    314 _FADDRL	=	0x00ac
                    00AD    315 _FADDRH	=	0x00ad
                    00AE    316 _FCTL	=	0x00ae
                    00AF    317 _FWDATA	=	0x00af
                    00B1    318 _ENCDI	=	0x00b1
                    00B2    319 _ENCDO	=	0x00b2
                    00B3    320 _ENCCS	=	0x00b3
                    00B4    321 _ADCCON1	=	0x00b4
                    00B5    322 _ADCCON2	=	0x00b5
                    00B6    323 _ADCCON3	=	0x00b6
                    00B7    324 _RCCTL	=	0x00b7
                    00B8    325 _IEN1	=	0x00b8
                    00B9    326 _IP1	=	0x00b9
                    00BA    327 _ADCL	=	0x00ba
                    00BB    328 _ADCH	=	0x00bb
                    00BC    329 _RNDL	=	0x00bc
                    00BD    330 _RNDH	=	0x00bd
                    00BE    331 _SLEEP	=	0x00be
                    00C0    332 _IRCON	=	0x00c0
                    00C1    333 _U0BUF	=	0x00c1
                    00C2    334 _U0BAUD	=	0x00c2
                    00C3    335 _T2CNF	=	0x00c3
                    00C4    336 _U0UCR	=	0x00c4
                    00C5    337 _U0GCR	=	0x00c5
                    00C6    338 _CLKCON	=	0x00c6
                    00C7    339 _MEMCTR	=	0x00c7
                    00C8    340 _T2CON	=	0x00c8
                    00C9    341 _WDCTL	=	0x00c9
                    00CA    342 _T3CNT	=	0x00ca
                    00CB    343 _T3CTL	=	0x00cb
                    00CC    344 _T3CCTL0	=	0x00cc
                    00CD    345 _T3CC0	=	0x00cd
                    00CE    346 _T3CCTL1	=	0x00ce
                    00CF    347 _T3CC1	=	0x00cf
                    00D0    348 _PSW	=	0x00d0
                    00D1    349 _DMAIRQ	=	0x00d1
                    00D2    350 _DMA1CFGL	=	0x00d2
                    00D3    351 _DMA1CFGH	=	0x00d3
                    00D4    352 _DMA0CFGL	=	0x00d4
                    00D5    353 _DMA0CFGH	=	0x00d5
                    00D6    354 _DMAARM	=	0x00d6
                    00D7    355 _DMAREQ	=	0x00d7
                    00D8    356 _TIMIF	=	0x00d8
                    00D9    357 _RFD	=	0x00d9
                    00DA    358 _T1CC0L	=	0x00da
                    00DB    359 _T1CC0H	=	0x00db
                    00DC    360 _T1CC1L	=	0x00dc
                    00DD    361 _T1CC1H	=	0x00dd
                    00DE    362 _T1CC2L	=	0x00de
                    00DF    363 _T1CC2H	=	0x00df
                    00E0    364 _ACC	=	0x00e0
                    00E1    365 _RFST	=	0x00e1
                    00E2    366 _T1CNTL	=	0x00e2
                    00E3    367 _T1CNTH	=	0x00e3
                    00E4    368 _T1CTL	=	0x00e4
                    00E5    369 _T1CCTL0	=	0x00e5
                    00E6    370 _T1CCTL1	=	0x00e6
                    00E7    371 _T1CCTL2	=	0x00e7
                    00E8    372 _IRCON2	=	0x00e8
                    00E9    373 _RFIF	=	0x00e9
                    00EA    374 _T4CNT	=	0x00ea
                    00EB    375 _T4CTL	=	0x00eb
                    00EC    376 _T4CCTL0	=	0x00ec
                    00ED    377 _T4CC0	=	0x00ed
                    00EE    378 _T4CCTL1	=	0x00ee
                    00EF    379 _T4CC1	=	0x00ef
                    00F0    380 _B	=	0x00f0
                    00F1    381 _PERCFG	=	0x00f1
                    00F2    382 _ADCCFG	=	0x00f2
                    00F3    383 _P0SEL	=	0x00f3
                    00F4    384 _P1SEL	=	0x00f4
                    00F5    385 _P2SEL	=	0x00f5
                    00F6    386 _P1INP	=	0x00f6
                    00F7    387 _P2INP	=	0x00f7
                    00F8    388 _U1CSR	=	0x00f8
                    00F9    389 _U1BUF	=	0x00f9
                    00FA    390 _U1BAUD	=	0x00fa
                    00FB    391 _U1UCR	=	0x00fb
                    00FC    392 _U1GCR	=	0x00fc
                    00FD    393 _P0DIR	=	0x00fd
                    00FE    394 _P1DIR	=	0x00fe
                    00FF    395 _P2DIR	=	0x00ff
                            396 ;--------------------------------------------------------
                            397 ; special function bits
                            398 ;--------------------------------------------------------
                            399 	.area RSEG    (ABS,DATA)
   0000                     400 	.org 0x0000
                    0087    401 _P0_7	=	0x0087
                    0086    402 _P0_6	=	0x0086
                    0085    403 _P0_5	=	0x0085
                    0084    404 _P0_4	=	0x0084
                    0083    405 _P0_3	=	0x0083
                    0082    406 _P0_2	=	0x0082
                    0081    407 _P0_1	=	0x0081
                    0080    408 _P0_0	=	0x0080
                    008F    409 _TCON_URX1IF	=	0x008f
                    008D    410 _TCON_ADCIF	=	0x008d
                    008B    411 _TCON_URX0IF	=	0x008b
                    008A    412 _TCON_IT1	=	0x008a
                    0089    413 _TCON_RFERRIF	=	0x0089
                    0088    414 _TCON_IT0	=	0x0088
                    0090    415 _P1_0	=	0x0090
                    0091    416 _P1_1	=	0x0091
                    0092    417 _P1_2	=	0x0092
                    0093    418 _P1_3	=	0x0093
                    0094    419 _P1_4	=	0x0094
                    0095    420 _P1_5	=	0x0095
                    0096    421 _P1_6	=	0x0096
                    0097    422 _P1_7	=	0x0097
                    0099    423 _S0CON_ENCIF_1	=	0x0099
                    0098    424 _S0CON_ENCIF_0	=	0x0098
                    00A0    425 _P2_0	=	0x00a0
                    00A1    426 _P2_1	=	0x00a1
                    00A2    427 _P2_2	=	0x00a2
                    00A3    428 _P2_3	=	0x00a3
                    00A4    429 _P2_4	=	0x00a4
                    00AF    430 _EA	=	0x00af
                    00AF    431 _IEN0_EA	=	0x00af
                    00AD    432 _IEN0_STIE	=	0x00ad
                    00AC    433 _IEN0_ENCIE	=	0x00ac
                    00AB    434 _IEN0_URX1IE	=	0x00ab
                    00AA    435 _IEN0_URX0IE	=	0x00aa
                    00A9    436 _IEN0_ADCIE	=	0x00a9
                    00A8    437 _IEN0_RFERRIE	=	0x00a8
                    00BD    438 _IEN1_P0IE	=	0x00bd
                    00BC    439 _IEN1_T4IE	=	0x00bc
                    00BB    440 _IEN1_T3IE	=	0x00bb
                    00BA    441 _IEN1_T2IE	=	0x00ba
                    00B9    442 _IEN1_T1IE	=	0x00b9
                    00B8    443 _IEN1_DMAIE	=	0x00b8
                    00C7    444 _IRCON_STIF	=	0x00c7
                    00C5    445 _IRCON_P0IF	=	0x00c5
                    00C4    446 _IRCON_T4IF	=	0x00c4
                    00C3    447 _IRCON_T3IF	=	0x00c3
                    00C2    448 _IRCON_T2IF	=	0x00c2
                    00C1    449 _IRCON_T1IF	=	0x00c1
                    00C0    450 _IRCON_DMAIF	=	0x00c0
                    00D0    451 _P	=	0x00d0
                    00D1    452 _F1	=	0x00d1
                    00D2    453 _OV	=	0x00d2
                    00D3    454 _RS0	=	0x00d3
                    00D4    455 _RS1	=	0x00d4
                    00D5    456 _F0	=	0x00d5
                    00D6    457 _AC	=	0x00d6
                    00D7    458 _CY	=	0x00d7
                    00EC    459 _IRCON2_WDTIF	=	0x00ec
                    00EB    460 _IRCON2_P1IF	=	0x00eb
                    00EA    461 _IRCON2_UTX1IF	=	0x00ea
                    00E9    462 _IRCON2_UTX0IF	=	0x00e9
                    00E8    463 _IRCON2_P2IF	=	0x00e8
                            464 ;--------------------------------------------------------
                            465 ; overlayable register banks
                            466 ;--------------------------------------------------------
                            467 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     468 	.ds 8
                            469 ;--------------------------------------------------------
                            470 ; internal ram data
                            471 ;--------------------------------------------------------
                            472 	.area DSEG    (DATA)
                            473 ;--------------------------------------------------------
                            474 ; overlayable items in internal ram 
                            475 ;--------------------------------------------------------
                            476 	.area OSEG    (OVR,DATA)
                            477 ;--------------------------------------------------------
                            478 ; indirectly addressable internal ram data
                            479 ;--------------------------------------------------------
                            480 	.area ISEG    (DATA)
                            481 ;--------------------------------------------------------
                            482 ; absolute internal ram data
                            483 ;--------------------------------------------------------
                            484 	.area IABS    (ABS,DATA)
                            485 	.area IABS    (ABS,DATA)
                            486 ;--------------------------------------------------------
                            487 ; bit data
                            488 ;--------------------------------------------------------
                            489 	.area BSEG    (BIT)
                            490 ;--------------------------------------------------------
                            491 ; paged external ram data
                            492 ;--------------------------------------------------------
                            493 	.area PSEG    (PAG,XDATA)
                            494 ;--------------------------------------------------------
                            495 ; external ram data
                            496 ;--------------------------------------------------------
                            497 	.area XSEG    (XDATA)
                    DF02    498 _MDMCTRL0H	=	0xdf02
                    DF03    499 _MDMCTRL0L	=	0xdf03
                    DF04    500 _MDMCTRL1H	=	0xdf04
                    DF05    501 _MDMCTRL1L	=	0xdf05
                    DF06    502 _RSSIH	=	0xdf06
                    DF07    503 _RSSIL	=	0xdf07
                    DF08    504 _SYNCWORDH	=	0xdf08
                    DF09    505 _SYNCWORDL	=	0xdf09
                    DF0A    506 _TXCTRLH	=	0xdf0a
                    DF0B    507 _TXCTRLL	=	0xdf0b
                    DF0C    508 _RXCTRL0H	=	0xdf0c
                    DF0D    509 _RXCTRL0L	=	0xdf0d
                    DF0E    510 _RXCTRL1H	=	0xdf0e
                    DF0F    511 _RXCTRL1L	=	0xdf0f
                    DF10    512 _FSCTRLH	=	0xdf10
                    DF11    513 _FSCTRLL	=	0xdf11
                    DF12    514 _CSPX	=	0xdf12
                    DF13    515 _CSPY	=	0xdf13
                    DF14    516 _CSPZ	=	0xdf14
                    DF15    517 _CSPCTRL	=	0xdf15
                    DF16    518 _CSPT	=	0xdf16
                    DF17    519 _RFPWR	=	0xdf17
                    DF20    520 _FSMTCH	=	0xdf20
                    DF21    521 _FSMTCL	=	0xdf21
                    DF22    522 _MANANDH	=	0xdf22
                    DF23    523 _MANANDL	=	0xdf23
                    DF24    524 _MANORH	=	0xdf24
                    DF25    525 _MANORL	=	0xdf25
                    DF26    526 _AGCCTRLH	=	0xdf26
                    DF27    527 _AGCCTRLL	=	0xdf27
                    DF39    528 _FSMSTATE	=	0xdf39
                    DF3A    529 _ADCTSTH	=	0xdf3a
                    DF3B    530 _ADCTSTL	=	0xdf3b
                    DF3C    531 _DACTSTH	=	0xdf3c
                    DF3D    532 _DACTSTL	=	0xdf3d
                    DF43    533 _IEEE_ADDR0	=	0xdf43
                    DF44    534 _IEEE_ADDR1	=	0xdf44
                    DF45    535 _IEEE_ADDR2	=	0xdf45
                    DF46    536 _IEEE_ADDR3	=	0xdf46
                    DF47    537 _IEEE_ADDR4	=	0xdf47
                    DF48    538 _IEEE_ADDR5	=	0xdf48
                    DF49    539 _IEEE_ADDR6	=	0xdf49
                    DF4A    540 _IEEE_ADDR7	=	0xdf4a
                    DF4B    541 _PANIDH	=	0xdf4b
                    DF4C    542 _PANIDL	=	0xdf4c
                    DF4D    543 _SHORTADDRH	=	0xdf4d
                    DF4E    544 _SHORTADDRL	=	0xdf4e
                    DF4F    545 _IOCFG0	=	0xdf4f
                    DF50    546 _IOCFG1	=	0xdf50
                    DF51    547 _IOCFG2	=	0xdf51
                    DF52    548 _IOCFG3	=	0xdf52
                    DF53    549 _RXFIFOCNT	=	0xdf53
                    DF54    550 _FSMTC1	=	0xdf54
                    DF60    551 _CHVER	=	0xdf60
                    DF61    552 _CHIPID	=	0xdf61
                    DF62    553 _RFSTATUS	=	0xdf62
                    DFC1    554 _U0BUF_SHADOW	=	0xdfc1
                    DFD9    555 _RFD_SHADOW	=	0xdfd9
                    DFF9    556 _U1BUF_SHADOW	=	0xdff9
                    DFBA    557 _ADC_SHADOW	=	0xdfba
   0000                     558 _elfloader_unknown::
   0000                     559 	.ds 30
   001E                     560 _elfloader_autostart_processes::
   001E                     561 	.ds 3
   0021                     562 _bss:
   0021                     563 	.ds 6
   0027                     564 _data:
   0027                     565 	.ds 6
   002D                     566 _rodata:
   002D                     567 	.ds 6
   0033                     568 _text:
   0033                     569 	.ds 6
                            570 ;--------------------------------------------------------
                            571 ; absolute external ram data
                            572 ;--------------------------------------------------------
                            573 	.area XABS    (ABS,XDATA)
                            574 ;--------------------------------------------------------
                            575 ; external initialized ram data
                            576 ;--------------------------------------------------------
                            577 	.area XISEG   (XDATA)
                            578 	.area HOME    (CODE)
                            579 	.area GSINIT0 (CODE)
                            580 	.area GSINIT1 (CODE)
                            581 	.area GSINIT2 (CODE)
                            582 	.area GSINIT3 (CODE)
                            583 	.area GSINIT4 (CODE)
                            584 	.area GSINIT5 (CODE)
                            585 	.area GSINIT  (CODE)
                            586 	.area GSFINAL (CODE)
                            587 	.area CSEG    (CODE)
                            588 ;--------------------------------------------------------
                            589 ; global & static initialisations
                            590 ;--------------------------------------------------------
                            591 	.area HOME    (CODE)
                            592 	.area GSINIT  (CODE)
                            593 	.area GSFINAL (CODE)
                            594 	.area GSINIT  (CODE)
                            595 ;--------------------------------------------------------
                            596 ; Home
                            597 ;--------------------------------------------------------
                            598 	.area HOME    (CODE)
                            599 	.area HOME    (CODE)
                            600 ;--------------------------------------------------------
                            601 ; code
                            602 ;--------------------------------------------------------
                            603 	.area CSEG    (CODE)
                            604 ;------------------------------------------------------------
                            605 ;Allocation info for local variables in function 'seek_read'
                            606 ;------------------------------------------------------------
                            607 ;offset                    Allocated to stack - offset -4
                            608 ;buf                       Allocated to stack - offset -7
                            609 ;len                       Allocated to stack - offset -9
                            610 ;fd                        Allocated to registers r2 r3 
                            611 ;------------------------------------------------------------
                            612 ;	../../../core/loader/elfloader.c:150: seek_read(int fd, unsigned int offset, char *buf, int len)
                            613 ;	-----------------------------------------
                            614 ;	 function seek_read
                            615 ;	-----------------------------------------
   0000                     616 _seek_read:
                    0002    617 	ar2 = 0x02
                    0003    618 	ar3 = 0x03
                    0004    619 	ar4 = 0x04
                    0005    620 	ar5 = 0x05
                    0006    621 	ar6 = 0x06
                    0007    622 	ar7 = 0x07
                    0000    623 	ar0 = 0x00
                    0001    624 	ar1 = 0x01
   0000 C0*00               625 	push	_bp
   0002 85 81*00            626 	mov	_bp,sp
   0005 AA 82               627 	mov	r2,dpl
   0007 AB 83               628 	mov	r3,dph
                            629 ;	../../../core/loader/elfloader.c:152: cfs_seek(fd, offset, CFS_SEEK_SET);
   0009 E5*00               630 	mov	a,_bp
   000B 24 FC               631 	add	a,#0xfc
   000D F8                  632 	mov	r0,a
   000E 86 04               633 	mov	ar4,@r0
   0010 08                  634 	inc	r0
   0011 86 05               635 	mov	ar5,@r0
   0013 C0 02               636 	push	ar2
   0015 C0 03               637 	push	ar3
   0017 E4                  638 	clr	a
   0018 C0 E0               639 	push	acc
   001A C0 E0               640 	push	acc
   001C C0 04               641 	push	ar4
   001E C0 05               642 	push	ar5
   0020 8A 82               643 	mov	dpl,r2
   0022 8B 83               644 	mov	dph,r3
   0024 12s00r00            645 	lcall	_cfs_seek
   0027 E5 81               646 	mov	a,sp
   0029 24 FC               647 	add	a,#0xfc
   002B F5 81               648 	mov	sp,a
   002D D0 03               649 	pop	ar3
   002F D0 02               650 	pop	ar2
                            651 ;	../../../core/loader/elfloader.c:153: cfs_read(fd, buf, len);
   0031 E5*00               652 	mov	a,_bp
   0033 24 F7               653 	add	a,#0xf7
   0035 F8                  654 	mov	r0,a
   0036 86 04               655 	mov	ar4,@r0
   0038 08                  656 	inc	r0
   0039 86 05               657 	mov	ar5,@r0
   003B C0 04               658 	push	ar4
   003D C0 05               659 	push	ar5
   003F E5*00               660 	mov	a,_bp
   0041 24 F9               661 	add	a,#0xf9
   0043 F8                  662 	mov	r0,a
   0044 E6                  663 	mov	a,@r0
   0045 C0 E0               664 	push	acc
   0047 08                  665 	inc	r0
   0048 E6                  666 	mov	a,@r0
   0049 C0 E0               667 	push	acc
   004B 08                  668 	inc	r0
   004C E6                  669 	mov	a,@r0
   004D C0 E0               670 	push	acc
   004F 8A 82               671 	mov	dpl,r2
   0051 8B 83               672 	mov	dph,r3
   0053 12s00r00            673 	lcall	_cfs_read
   0056 E5 81               674 	mov	a,sp
   0058 24 FB               675 	add	a,#0xfb
   005A F5 81               676 	mov	sp,a
   005C D0*00               677 	pop	_bp
   005E 22                  678 	ret
                            679 ;------------------------------------------------------------
                            680 ;Allocation info for local variables in function 'find_local_symbol'
                            681 ;------------------------------------------------------------
                            682 ;symbol                    Allocated to stack - offset -5
                            683 ;symtab                    Allocated to stack - offset -7
                            684 ;symtabsize                Allocated to stack - offset -9
                            685 ;strtab                    Allocated to stack - offset -11
                            686 ;fd                        Allocated to stack - offset 1
                            687 ;s                         Allocated to stack - offset 3
                            688 ;a                         Allocated to registers r4 r5 
                            689 ;name                      Allocated to stack - offset 19
                            690 ;sect                      Allocated to registers r2 r3 r5 
                            691 ;sloc0                     Allocated to stack - offset 49
                            692 ;sloc1                     Allocated to stack - offset 51
                            693 ;sloc2                     Allocated to stack - offset 55
                            694 ;sloc3                     Allocated to stack - offset 56
                            695 ;sloc4                     Allocated to stack - offset 59
                            696 ;------------------------------------------------------------
                            697 ;	../../../core/loader/elfloader.c:177: find_local_symbol(int fd, const char *symbol,
                            698 ;	-----------------------------------------
                            699 ;	 function find_local_symbol
                            700 ;	-----------------------------------------
   005F                     701 _find_local_symbol:
   005F C0*00               702 	push	_bp
   0061 85 81*00            703 	mov	_bp,sp
   0064 C0 82               704 	push	dpl
   0066 C0 83               705 	push	dph
   0068 E5 81               706 	mov	a,sp
   006A 24 3B               707 	add	a,#0x3b
   006C F5 81               708 	mov	sp,a
                            709 ;	../../../core/loader/elfloader.c:186: for(a = symtab; a < symtab + symtabsize; a += sizeof(s)) {
   006E E5*00               710 	mov	a,_bp
   0070 24 F9               711 	add	a,#0xf9
   0072 F8                  712 	mov	r0,a
   0073 86 04               713 	mov	ar4,@r0
   0075 08                  714 	inc	r0
   0076 86 05               715 	mov	ar5,@r0
   0078 E5*00               716 	mov	a,_bp
   007A 24 3B               717 	add	a,#0x3b
   007C F8                  718 	mov	r0,a
   007D E5*00               719 	mov	a,_bp
   007F 24 13               720 	add	a,#0x13
   0081 F6                  721 	mov	@r0,a
   0082 E5*00               722 	mov	a,_bp
   0084 24 3B               723 	add	a,#0x3b
   0086 F8                  724 	mov	r0,a
   0087 E5*00               725 	mov	a,_bp
   0089 24 37               726 	add	a,#0x37
   008B F9                  727 	mov	r1,a
   008C E6                  728 	mov	a,@r0
   008D F7                  729 	mov	@r1,a
   008E E5*00               730 	mov	a,_bp
   0090 24 03               731 	add	a,#0x03
   0092 F8                  732 	mov	r0,a
   0093 E5*00               733 	mov	a,_bp
   0095 24 F7               734 	add	a,#0xf7
   0097 F9                  735 	mov	r1,a
   0098 C0 00               736 	push	ar0
   009A E5*00               737 	mov	a,_bp
   009C 24 31               738 	add	a,#0x31
   009E F8                  739 	mov	r0,a
   009F E7                  740 	mov	a,@r1
   00A0 2C                  741 	add	a,r4
   00A1 F6                  742 	mov	@r0,a
   00A2 09                  743 	inc	r1
   00A3 E7                  744 	mov	a,@r1
   00A4 3D                  745 	addc	a,r5
   00A5 08                  746 	inc	r0
   00A6 F6                  747 	mov	@r0,a
   00A7 D0 00               748 	pop	ar0
   00A9                     749 00114$:
   00A9 E5*00               750 	mov	a,_bp
   00AB 24 31               751 	add	a,#0x31
   00AD F9                  752 	mov	r1,a
   00AE C3                  753 	clr	c
   00AF EC                  754 	mov	a,r4
   00B0 97                  755 	subb	a,@r1
   00B1 ED                  756 	mov	a,r5
   00B2 09                  757 	inc	r1
   00B3 97                  758 	subb	a,@r1
   00B4 40 03               759 	jc	00127$
   00B6 02s02r6B            760 	ljmp	00117$
   00B9                     761 00127$:
                            762 ;	../../../core/loader/elfloader.c:187: seek_read(fd, a, (char *)&s, sizeof(s));
   00B9 E5*00               763 	mov	a,_bp
   00BB 24 03               764 	add	a,#0x03
   00BD FF                  765 	mov	r7,a
   00BE 7A 00               766 	mov	r2,#0x00
   00C0 7B 40               767 	mov	r3,#0x40
   00C2 C0 04               768 	push	ar4
   00C4 C0 05               769 	push	ar5
   00C6 C0 00               770 	push	ar0
   00C8 74 10               771 	mov	a,#0x10
   00CA C0 E0               772 	push	acc
   00CC E4                  773 	clr	a
   00CD C0 E0               774 	push	acc
   00CF C0 07               775 	push	ar7
   00D1 C0 02               776 	push	ar2
   00D3 C0 03               777 	push	ar3
   00D5 C0 04               778 	push	ar4
   00D7 C0 05               779 	push	ar5
   00D9 A9*00               780 	mov	r1,_bp
   00DB 09                  781 	inc	r1
   00DC 87 82               782 	mov	dpl,@r1
   00DE 09                  783 	inc	r1
   00DF 87 83               784 	mov	dph,@r1
   00E1 12s00r00            785 	lcall	_seek_read
   00E4 E5 81               786 	mov	a,sp
   00E6 24 F9               787 	add	a,#0xf9
   00E8 F5 81               788 	mov	sp,a
   00EA D0 00               789 	pop	ar0
   00EC D0 05               790 	pop	ar5
   00EE D0 04               791 	pop	ar4
                            792 ;	../../../core/loader/elfloader.c:189: if(s.st_name != 0) {
   00F0 E5*00               793 	mov	a,_bp
   00F2 24 33               794 	add	a,#0x33
   00F4 F9                  795 	mov	r1,a
   00F5 E6                  796 	mov	a,@r0
   00F6 F7                  797 	mov	@r1,a
   00F7 08                  798 	inc	r0
   00F8 E6                  799 	mov	a,@r0
   00F9 09                  800 	inc	r1
   00FA F7                  801 	mov	@r1,a
   00FB 08                  802 	inc	r0
   00FC E6                  803 	mov	a,@r0
   00FD 09                  804 	inc	r1
   00FE F7                  805 	mov	@r1,a
   00FF 08                  806 	inc	r0
   0100 E6                  807 	mov	a,@r0
   0101 09                  808 	inc	r1
   0102 F7                  809 	mov	@r1,a
   0103 18                  810 	dec	r0
   0104 18                  811 	dec	r0
   0105 18                  812 	dec	r0
   0106 E5*00               813 	mov	a,_bp
   0108 24 33               814 	add	a,#0x33
   010A F9                  815 	mov	r1,a
   010B E7                  816 	mov	a,@r1
   010C 09                  817 	inc	r1
   010D 47                  818 	orl	a,@r1
   010E 09                  819 	inc	r1
   010F 47                  820 	orl	a,@r1
   0110 09                  821 	inc	r1
   0111 47                  822 	orl	a,@r1
   0112 70 03               823 	jnz	00128$
   0114 02s02r61            824 	ljmp	00116$
   0117                     825 00128$:
                            826 ;	../../../core/loader/elfloader.c:190: seek_read(fd, strtab + s.st_name, name, sizeof(name));
   0117 C0 00               827 	push	ar0
   0119 E5*00               828 	mov	a,_bp
   011B 24 3B               829 	add	a,#0x3b
   011D F9                  830 	mov	r1,a
   011E C0 00               831 	push	ar0
   0120 E5*00               832 	mov	a,_bp
   0122 24 38               833 	add	a,#0x38
   0124 F8                  834 	mov	r0,a
   0125 E7                  835 	mov	a,@r1
   0126 F6                  836 	mov	@r0,a
   0127 08                  837 	inc	r0
   0128 76 00               838 	mov	@r0,#0x00
   012A 08                  839 	inc	r0
   012B 76 40               840 	mov	@r0,#0x40
   012D D0 00               841 	pop	ar0
   012F E5*00               842 	mov	a,_bp
   0131 24 F5               843 	add	a,#0xf5
   0133 F9                  844 	mov	r1,a
   0134 87 02               845 	mov	ar2,@r1
   0136 09                  846 	inc	r1
   0137 87 03               847 	mov	ar3,@r1
   0139 E4                  848 	clr	a
   013A FF                  849 	mov	r7,a
   013B FE                  850 	mov	r6,a
   013C E5*00               851 	mov	a,_bp
   013E 24 33               852 	add	a,#0x33
   0140 F9                  853 	mov	r1,a
   0141 E7                  854 	mov	a,@r1
   0142 2A                  855 	add	a,r2
   0143 FA                  856 	mov	r2,a
   0144 09                  857 	inc	r1
   0145 E7                  858 	mov	a,@r1
   0146 3B                  859 	addc	a,r3
   0147 FB                  860 	mov	r3,a
   0148 09                  861 	inc	r1
   0149 E7                  862 	mov	a,@r1
   014A 3F                  863 	addc	a,r7
   014B 09                  864 	inc	r1
   014C E7                  865 	mov	a,@r1
   014D 3E                  866 	addc	a,r6
   014E C0 04               867 	push	ar4
   0150 C0 05               868 	push	ar5
   0152 C0 00               869 	push	ar0
   0154 74 1E               870 	mov	a,#0x1E
   0156 C0 E0               871 	push	acc
   0158 E4                  872 	clr	a
   0159 C0 E0               873 	push	acc
   015B E5*00               874 	mov	a,_bp
   015D 24 38               875 	add	a,#0x38
   015F F9                  876 	mov	r1,a
   0160 E7                  877 	mov	a,@r1
   0161 C0 E0               878 	push	acc
   0163 09                  879 	inc	r1
   0164 E7                  880 	mov	a,@r1
   0165 C0 E0               881 	push	acc
   0167 09                  882 	inc	r1
   0168 E7                  883 	mov	a,@r1
   0169 C0 E0               884 	push	acc
   016B C0 02               885 	push	ar2
   016D C0 03               886 	push	ar3
   016F A9*00               887 	mov	r1,_bp
   0171 09                  888 	inc	r1
   0172 87 82               889 	mov	dpl,@r1
   0174 09                  890 	inc	r1
   0175 87 83               891 	mov	dph,@r1
   0177 12s00r00            892 	lcall	_seek_read
   017A E5 81               893 	mov	a,sp
   017C 24 F9               894 	add	a,#0xf9
   017E F5 81               895 	mov	sp,a
                            896 ;	../../../core/loader/elfloader.c:191: if(strcmp(name, symbol) == 0) {
   0180 E5*00               897 	mov	a,_bp
   0182 24 37               898 	add	a,#0x37
   0184 F9                  899 	mov	r1,a
   0185 87 07               900 	mov	ar7,@r1
   0187 7A 00               901 	mov	r2,#0x00
   0189 7B 40               902 	mov	r3,#0x40
   018B E5*00               903 	mov	a,_bp
   018D 24 FB               904 	add	a,#0xfb
   018F F9                  905 	mov	r1,a
   0190 E7                  906 	mov	a,@r1
   0191 C0 E0               907 	push	acc
   0193 09                  908 	inc	r1
   0194 E7                  909 	mov	a,@r1
   0195 C0 E0               910 	push	acc
   0197 09                  911 	inc	r1
   0198 E7                  912 	mov	a,@r1
   0199 C0 E0               913 	push	acc
   019B 8F 82               914 	mov	dpl,r7
   019D 8A 83               915 	mov	dph,r2
   019F 8B F0               916 	mov	b,r3
   01A1 12s00r00            917 	lcall	_strcmp
   01A4 AA 82               918 	mov	r2,dpl
   01A6 AB 83               919 	mov	r3,dph
   01A8 15 81               920 	dec	sp
   01AA 15 81               921 	dec	sp
   01AC 15 81               922 	dec	sp
   01AE D0 00               923 	pop	ar0
   01B0 D0 05               924 	pop	ar5
   01B2 D0 04               925 	pop	ar4
   01B4 D0 00               926 	pop	ar0
   01B6 EA                  927 	mov	a,r2
   01B7 4B                  928 	orl	a,r3
   01B8 60 03               929 	jz	00129$
   01BA 02s02r61            930 	ljmp	00116$
   01BD                     931 00129$:
                            932 ;	../../../core/loader/elfloader.c:192: if(s.st_shndx == bss.number) {
   01BD E5*00               933 	mov	a,_bp
   01BF 24 03               934 	add	a,#0x03
   01C1 FC                  935 	mov	r4,a
   01C2 24 0E               936 	add	a,#0x0E
   01C4 F9                  937 	mov	r1,a
   01C5 87 03               938 	mov	ar3,@r1
   01C7 09                  939 	inc	r1
   01C8 87 06               940 	mov	ar6,@r1
   01CA 90s00r21            941 	mov	dptr,#_bss
   01CD E0                  942 	movx	a,@dptr
   01CE FF                  943 	mov	r7,a
   01CF 7A 00               944 	mov	r2,#0x00
   01D1 EB                  945 	mov	a,r3
   01D2 B5 07 0C            946 	cjne	a,ar7,00108$
   01D5 EE                  947 	mov	a,r6
   01D6 B5 02 08            948 	cjne	a,ar2,00108$
                            949 ;	../../../core/loader/elfloader.c:193: sect = &bss;
   01D9 7Ar21               950 	mov	r2,#_bss
   01DB 7Bs00               951 	mov	r3,#(_bss >> 8)
   01DD 7D 00               952 	mov	r5,#0x00
   01DF 80 36               953 	sjmp	00109$
   01E1                     954 00108$:
                            955 ;	../../../core/loader/elfloader.c:194: } else if(s.st_shndx == data.number) {
   01E1 90s00r27            956 	mov	dptr,#_data
   01E4 E0                  957 	movx	a,@dptr
   01E5 FA                  958 	mov	r2,a
   01E6 7F 00               959 	mov	r7,#0x00
   01E8 EB                  960 	mov	a,r3
   01E9 B5 02 0C            961 	cjne	a,ar2,00105$
   01EC EE                  962 	mov	a,r6
   01ED B5 07 08            963 	cjne	a,ar7,00105$
                            964 ;	../../../core/loader/elfloader.c:195: sect = &data;
   01F0 7Ar27               965 	mov	r2,#_data
   01F2 7Bs00               966 	mov	r3,#(_data >> 8)
   01F4 7D 00               967 	mov	r5,#0x00
   01F6 80 1F               968 	sjmp	00109$
   01F8                     969 00105$:
                            970 ;	../../../core/loader/elfloader.c:196: } else if(s.st_shndx == text.number) {
   01F8 90s00r33            971 	mov	dptr,#_text
   01FB E0                  972 	movx	a,@dptr
   01FC FA                  973 	mov	r2,a
   01FD 7F 00               974 	mov	r7,#0x00
   01FF EB                  975 	mov	a,r3
   0200 B5 02 0C            976 	cjne	a,ar2,00102$
   0203 EE                  977 	mov	a,r6
   0204 B5 07 08            978 	cjne	a,ar7,00102$
                            979 ;	../../../core/loader/elfloader.c:197: sect = &text;
   0207 7Ar33               980 	mov	r2,#_text
   0209 7Bs00               981 	mov	r3,#(_text >> 8)
   020B 7D 00               982 	mov	r5,#0x00
   020D 80 08               983 	sjmp	00109$
   020F                     984 00102$:
                            985 ;	../../../core/loader/elfloader.c:199: return NULL;
   020F 90 00 00            986 	mov	dptr,#0x0000
   0212 75 F0 00            987 	mov	b,#0x00
   0215 80 5A               988 	sjmp	00118$
   0217                     989 00109$:
                            990 ;	../../../core/loader/elfloader.c:201: return &(sect->address[s.st_value]);
   0217 74 03               991 	mov	a,#0x03
   0219 2A                  992 	add	a,r2
   021A FA                  993 	mov	r2,a
   021B E4                  994 	clr	a
   021C 3B                  995 	addc	a,r3
   021D FB                  996 	mov	r3,a
   021E 8D 06               997 	mov	ar6,r5
   0220 8A 82               998 	mov	dpl,r2
   0222 8B 83               999 	mov	dph,r3
   0224 8E F0              1000 	mov	b,r6
   0226 E5*00              1001 	mov	a,_bp
   0228 24 33              1002 	add	a,#0x33
   022A F8                 1003 	mov	r0,a
   022B 12s00r00           1004 	lcall	__gptrget
   022E F6                 1005 	mov	@r0,a
   022F A3                 1006 	inc	dptr
   0230 12s00r00           1007 	lcall	__gptrget
   0233 08                 1008 	inc	r0
   0234 F6                 1009 	mov	@r0,a
   0235 A3                 1010 	inc	dptr
   0236 12s00r00           1011 	lcall	__gptrget
   0239 08                 1012 	inc	r0
   023A F6                 1013 	mov	@r0,a
   023B 74 04              1014 	mov	a,#0x04
   023D 2C                 1015 	add	a,r4
   023E F9                 1016 	mov	r1,a
   023F 87 07              1017 	mov	ar7,@r1
   0241 09                 1018 	inc	r1
   0242 87 02              1019 	mov	ar2,@r1
   0244 09                 1020 	inc	r1
   0245 87 03              1021 	mov	ar3,@r1
   0247 09                 1022 	inc	r1
   0248 87 06              1023 	mov	ar6,@r1
   024A E5*00              1024 	mov	a,_bp
   024C 24 33              1025 	add	a,#0x33
   024E F8                 1026 	mov	r0,a
   024F EF                 1027 	mov	a,r7
   0250 26                 1028 	add	a,@r0
   0251 FF                 1029 	mov	r7,a
   0252 EA                 1030 	mov	a,r2
   0253 08                 1031 	inc	r0
   0254 36                 1032 	addc	a,@r0
   0255 FA                 1033 	mov	r2,a
   0256 08                 1034 	inc	r0
   0257 86 03              1035 	mov	ar3,@r0
   0259 8F 82              1036 	mov	dpl,r7
   025B 8A 83              1037 	mov	dph,r2
   025D 8B F0              1038 	mov	b,r3
   025F 80 10              1039 	sjmp	00118$
   0261                    1040 00116$:
                           1041 ;	../../../core/loader/elfloader.c:186: for(a = symtab; a < symtab + symtabsize; a += sizeof(s)) {
   0261 74 10              1042 	mov	a,#0x10
   0263 2C                 1043 	add	a,r4
   0264 FC                 1044 	mov	r4,a
   0265 E4                 1045 	clr	a
   0266 3D                 1046 	addc	a,r5
   0267 FD                 1047 	mov	r5,a
   0268 02s00rA9           1048 	ljmp	00114$
   026B                    1049 00117$:
                           1050 ;	../../../core/loader/elfloader.c:205: return NULL;
   026B 90 00 00           1051 	mov	dptr,#0x0000
   026E 75 F0 00           1052 	mov	b,#0x00
   0271                    1053 00118$:
   0271 85*00 81           1054 	mov	sp,_bp
   0274 D0*00              1055 	pop	_bp
   0276 22                 1056 	ret
                           1057 ;------------------------------------------------------------
                           1058 ;Allocation info for local variables in function 'relocate_section'
                           1059 ;------------------------------------------------------------
                           1060 ;section                   Allocated to stack - offset -4
                           1061 ;size                      Allocated to stack - offset -6
                           1062 ;sectionaddr               Allocated to stack - offset -8
                           1063 ;sectionbase               Allocated to stack - offset -11
                           1064 ;strs                      Allocated to stack - offset -13
                           1065 ;strtab                    Allocated to stack - offset -15
                           1066 ;symtab                    Allocated to stack - offset -17
                           1067 ;symtabsize                Allocated to stack - offset -19
                           1068 ;using_relas               Allocated to stack - offset -20
                           1069 ;fd                        Allocated to stack - offset 1
                           1070 ;rela                      Allocated to stack - offset 3
                           1071 ;rel_size                  Allocated to stack - offset 15
                           1072 ;s                         Allocated to stack - offset 17
                           1073 ;a                         Allocated to stack - offset 33
                           1074 ;name                      Allocated to stack - offset 35
                           1075 ;addr                      Allocated to stack - offset 65
                           1076 ;sect                      Allocated to registers r5 r6 r7 
                           1077 ;sloc0                     Allocated to stack - offset 68
                           1078 ;sloc1                     Allocated to stack - offset 69
                           1079 ;sloc2                     Allocated to stack - offset 71
                           1080 ;sloc3                     Allocated to stack - offset 72
                           1081 ;sloc4                     Allocated to stack - offset 75
                           1082 ;sloc5                     Allocated to stack - offset 79
                           1083 ;sloc6                     Allocated to stack - offset 80
                           1084 ;------------------------------------------------------------
                           1085 ;	../../../core/loader/elfloader.c:209: relocate_section(int fd,
                           1086 ;	-----------------------------------------
                           1087 ;	 function relocate_section
                           1088 ;	-----------------------------------------
   0277                    1089 _relocate_section:
   0277 C0*00              1090 	push	_bp
   0279 85 81*00           1091 	mov	_bp,sp
   027C C0 82              1092 	push	dpl
   027E C0 83              1093 	push	dph
   0280 E5 81              1094 	mov	a,sp
   0282 24 53              1095 	add	a,#0x53
   0284 F5 81              1096 	mov	sp,a
                           1097 ;	../../../core/loader/elfloader.c:228: if(using_relas) {
   0286 E5*00              1098 	mov	a,_bp
   0288 24 EC              1099 	add	a,#0xec
   028A F8                 1100 	mov	r0,a
   028B E6                 1101 	mov	a,@r0
   028C 60 0C              1102 	jz	00102$
                           1103 ;	../../../core/loader/elfloader.c:229: rel_size = sizeof(struct elf32_rela);
   028E E5*00              1104 	mov	a,_bp
   0290 24 0F              1105 	add	a,#0x0f
   0292 F8                 1106 	mov	r0,a
   0293 76 0C              1107 	mov	@r0,#0x0C
   0295 08                 1108 	inc	r0
   0296 76 00              1109 	mov	@r0,#0x00
   0298 80 0A              1110 	sjmp	00103$
   029A                    1111 00102$:
                           1112 ;	../../../core/loader/elfloader.c:231: rel_size = sizeof(struct elf32_rel);
   029A E5*00              1113 	mov	a,_bp
   029C 24 0F              1114 	add	a,#0x0f
   029E F8                 1115 	mov	r0,a
   029F 76 08              1116 	mov	@r0,#0x08
   02A1 08                 1117 	inc	r0
   02A2 76 00              1118 	mov	@r0,#0x00
   02A4                    1119 00103$:
                           1120 ;	../../../core/loader/elfloader.c:234: for(a = section; a < section + size; a += rel_size) {
   02A4 E5*00              1121 	mov	a,_bp
   02A6 24 FC              1122 	add	a,#0xfc
   02A8 F8                 1123 	mov	r0,a
   02A9 E5*00              1124 	mov	a,_bp
   02AB 24 21              1125 	add	a,#0x21
   02AD F9                 1126 	mov	r1,a
   02AE E6                 1127 	mov	a,@r0
   02AF F7                 1128 	mov	@r1,a
   02B0 08                 1129 	inc	r0
   02B1 09                 1130 	inc	r1
   02B2 E6                 1131 	mov	a,@r0
   02B3 F7                 1132 	mov	@r1,a
   02B4 E5*00              1133 	mov	a,_bp
   02B6 24 11              1134 	add	a,#0x11
   02B8 24 0E              1135 	add	a,#0x0E
   02BA F8                 1136 	mov	r0,a
   02BB E5*00              1137 	mov	a,_bp
   02BD 24 47              1138 	add	a,#0x47
   02BF F9                 1139 	mov	r1,a
   02C0 E5*00              1140 	mov	a,_bp
   02C2 24 11              1141 	add	a,#0x11
   02C4 F7                 1142 	mov	@r1,a
   02C5 E5*00              1143 	mov	a,_bp
   02C7 24 11              1144 	add	a,#0x11
   02C9 C9                 1145 	xch	a,r1
   02CA E5*00              1146 	mov	a,_bp
   02CC 24 44              1147 	add	a,#0x44
   02CE C9                 1148 	xch	a,r1
   02CF 24 0E              1149 	add	a,#0x0E
   02D1 F7                 1150 	mov	@r1,a
   02D2 E5*00              1151 	mov	a,_bp
   02D4 24 21              1152 	add	a,#0x21
   02D6 F9                 1153 	mov	r1,a
   02D7 C0 00              1154 	push	ar0
   02D9 E5*00              1155 	mov	a,_bp
   02DB 24 FA              1156 	add	a,#0xfa
   02DD F8                 1157 	mov	r0,a
   02DE E6                 1158 	mov	a,@r0
   02DF 27                 1159 	add	a,@r1
   02E0 C0 E0              1160 	push	acc
   02E2 08                 1161 	inc	r0
   02E3 E6                 1162 	mov	a,@r0
   02E4 09                 1163 	inc	r1
   02E5 37                 1164 	addc	a,@r1
   02E6 C0 E0              1165 	push	acc
   02E8 E5*00              1166 	mov	a,_bp
   02EA 24 46              1167 	add	a,#0x46
   02EC F9                 1168 	mov	r1,a
   02ED D0 E0              1169 	pop	acc
   02EF F7                 1170 	mov	@r1,a
   02F0 19                 1171 	dec	r1
   02F1 D0 E0              1172 	pop	acc
   02F3 F7                 1173 	mov	@r1,a
   02F4 D0 00              1174 	pop	ar0
   02F6                    1175 00145$:
   02F6 E5*00              1176 	mov	a,_bp
   02F8 24 21              1177 	add	a,#0x21
   02FA F9                 1178 	mov	r1,a
   02FB C0 00              1179 	push	ar0
   02FD E5*00              1180 	mov	a,_bp
   02FF 24 45              1181 	add	a,#0x45
   0301 F8                 1182 	mov	r0,a
   0302 C3                 1183 	clr	c
   0303 E7                 1184 	mov	a,@r1
   0304 96                 1185 	subb	a,@r0
   0305 09                 1186 	inc	r1
   0306 E7                 1187 	mov	a,@r1
   0307 08                 1188 	inc	r0
   0308 96                 1189 	subb	a,@r0
   0309 D0 00              1190 	pop	ar0
   030B 40 03              1191 	jc	00167$
   030D 02s07r5C           1192 	ljmp	00148$
   0310                    1193 00167$:
                           1194 ;	../../../core/loader/elfloader.c:235: seek_read(fd, a, (char *)&rela, rel_size);
   0310 C0 00              1195 	push	ar0
   0312 E5*00              1196 	mov	a,_bp
   0314 24 03              1197 	add	a,#0x03
   0316 FC                 1198 	mov	r4,a
   0317 7D 00              1199 	mov	r5,#0x00
   0319 7E 40              1200 	mov	r6,#0x40
   031B C0 00              1201 	push	ar0
   031D E5*00              1202 	mov	a,_bp
   031F 24 0F              1203 	add	a,#0x0f
   0321 F9                 1204 	mov	r1,a
   0322 E7                 1205 	mov	a,@r1
   0323 C0 E0              1206 	push	acc
   0325 09                 1207 	inc	r1
   0326 E7                 1208 	mov	a,@r1
   0327 C0 E0              1209 	push	acc
   0329 C0 04              1210 	push	ar4
   032B C0 05              1211 	push	ar5
   032D C0 06              1212 	push	ar6
   032F E5*00              1213 	mov	a,_bp
   0331 24 21              1214 	add	a,#0x21
   0333 F9                 1215 	mov	r1,a
   0334 E7                 1216 	mov	a,@r1
   0335 C0 E0              1217 	push	acc
   0337 09                 1218 	inc	r1
   0338 E7                 1219 	mov	a,@r1
   0339 C0 E0              1220 	push	acc
   033B A9*00              1221 	mov	r1,_bp
   033D 09                 1222 	inc	r1
   033E 87 82              1223 	mov	dpl,@r1
   0340 09                 1224 	inc	r1
   0341 87 83              1225 	mov	dph,@r1
   0343 12s00r00           1226 	lcall	_seek_read
   0346 E5 81              1227 	mov	a,sp
   0348 24 F9              1228 	add	a,#0xf9
   034A F5 81              1229 	mov	sp,a
   034C D0 00              1230 	pop	ar0
                           1231 ;	../../../core/loader/elfloader.c:238: (char *)&s, sizeof(s));
   034E E5*00              1232 	mov	a,_bp
   0350 24 11              1233 	add	a,#0x11
   0352 FC                 1234 	mov	r4,a
   0353 E5*00              1235 	mov	a,_bp
   0355 24 48              1236 	add	a,#0x48
   0357 F9                 1237 	mov	r1,a
   0358 A7 04              1238 	mov	@r1,ar4
   035A 09                 1239 	inc	r1
   035B 77 00              1240 	mov	@r1,#0x00
   035D 09                 1241 	inc	r1
   035E 77 40              1242 	mov	@r1,#0x40
                           1243 ;	../../../core/loader/elfloader.c:237: symtab + sizeof(struct elf32_sym) * ELF32_R_SYM(rela.r_info),
   0360 E5*00              1244 	mov	a,_bp
   0362 24 03              1245 	add	a,#0x03
   0364 24 04              1246 	add	a,#0x04
   0366 F8                 1247 	mov	r0,a
   0367 86 07              1248 	mov	ar7,@r0
   0369 08                 1249 	inc	r0
   036A 86 02              1250 	mov	ar2,@r0
   036C 08                 1251 	inc	r0
   036D 86 03              1252 	mov	ar3,@r0
   036F 08                 1253 	inc	r0
   0370 86 04              1254 	mov	ar4,@r0
   0372 18                 1255 	dec	r0
   0373 18                 1256 	dec	r0
   0374 18                 1257 	dec	r0
   0375 8A 07              1258 	mov	ar7,r2
   0377 8B 02              1259 	mov	ar2,r3
   0379 EA                 1260 	mov	a,r2
   037A C4                 1261 	swap	a
   037B 54 F0              1262 	anl	a,#0xf0
   037D CF                 1263 	xch	a,r7
   037E C4                 1264 	swap	a
   037F CF                 1265 	xch	a,r7
   0380 6F                 1266 	xrl	a,r7
   0381 CF                 1267 	xch	a,r7
   0382 54 F0              1268 	anl	a,#0xf0
   0384 CF                 1269 	xch	a,r7
   0385 6F                 1270 	xrl	a,r7
   0386 FA                 1271 	mov	r2,a
   0387 E5*00              1272 	mov	a,_bp
   0389 24 EF              1273 	add	a,#0xef
   038B F9                 1274 	mov	r1,a
   038C EF                 1275 	mov	a,r7
   038D 27                 1276 	add	a,@r1
   038E FF                 1277 	mov	r7,a
   038F EA                 1278 	mov	a,r2
   0390 09                 1279 	inc	r1
   0391 37                 1280 	addc	a,@r1
   0392 FA                 1281 	mov	r2,a
                           1282 ;	../../../core/loader/elfloader.c:236: seek_read(fd,
   0393 C0 00              1283 	push	ar0
   0395 74 10              1284 	mov	a,#0x10
   0397 C0 E0              1285 	push	acc
   0399 E4                 1286 	clr	a
   039A C0 E0              1287 	push	acc
   039C E5*00              1288 	mov	a,_bp
   039E 24 48              1289 	add	a,#0x48
   03A0 F9                 1290 	mov	r1,a
   03A1 E7                 1291 	mov	a,@r1
   03A2 C0 E0              1292 	push	acc
   03A4 09                 1293 	inc	r1
   03A5 E7                 1294 	mov	a,@r1
   03A6 C0 E0              1295 	push	acc
   03A8 09                 1296 	inc	r1
   03A9 E7                 1297 	mov	a,@r1
   03AA C0 E0              1298 	push	acc
   03AC C0 07              1299 	push	ar7
   03AE C0 02              1300 	push	ar2
   03B0 A9*00              1301 	mov	r1,_bp
   03B2 09                 1302 	inc	r1
   03B3 87 82              1303 	mov	dpl,@r1
   03B5 09                 1304 	inc	r1
   03B6 87 83              1305 	mov	dph,@r1
   03B8 12s00r00           1306 	lcall	_seek_read
   03BB E5 81              1307 	mov	a,sp
   03BD 24 F9              1308 	add	a,#0xf9
   03BF F5 81              1309 	mov	sp,a
                           1310 ;	../../../core/loader/elfloader.c:239: if(s.st_name != 0) {
   03C1 E5*00              1311 	mov	a,_bp
   03C3 24 47              1312 	add	a,#0x47
   03C5 F9                 1313 	mov	r1,a
   03C6 E5*00              1314 	mov	a,_bp
   03C8 24 4B              1315 	add	a,#0x4b
   03CA F8                 1316 	mov	r0,a
   03CB 87 01              1317 	mov	ar1,@r1
   03CD E7                 1318 	mov	a,@r1
   03CE F6                 1319 	mov	@r0,a
   03CF 09                 1320 	inc	r1
   03D0 E7                 1321 	mov	a,@r1
   03D1 08                 1322 	inc	r0
   03D2 F6                 1323 	mov	@r0,a
   03D3 09                 1324 	inc	r1
   03D4 E7                 1325 	mov	a,@r1
   03D5 08                 1326 	inc	r0
   03D6 F6                 1327 	mov	@r0,a
   03D7 09                 1328 	inc	r1
   03D8 E7                 1329 	mov	a,@r1
   03D9 08                 1330 	inc	r0
   03DA F6                 1331 	mov	@r0,a
   03DB 19                 1332 	dec	r1
   03DC 19                 1333 	dec	r1
   03DD 19                 1334 	dec	r1
   03DE D0 00              1335 	pop	ar0
   03E0 D0 00              1336 	pop	ar0
   03E2 E5*00              1337 	mov	a,_bp
   03E4 24 4B              1338 	add	a,#0x4b
   03E6 F9                 1339 	mov	r1,a
   03E7 E7                 1340 	mov	a,@r1
   03E8 09                 1341 	inc	r1
   03E9 47                 1342 	orl	a,@r1
   03EA 09                 1343 	inc	r1
   03EB 47                 1344 	orl	a,@r1
   03EC 09                 1345 	inc	r1
   03ED 47                 1346 	orl	a,@r1
   03EE 70 03              1347 	jnz	00168$
   03F0 02s05rCD           1348 	ljmp	00141$
   03F3                    1349 00168$:
                           1350 ;	../../../core/loader/elfloader.c:240: seek_read(fd, strtab + s.st_name, name, sizeof(name));
   03F3 C0 00              1351 	push	ar0
   03F5 E5*00              1352 	mov	a,_bp
   03F7 24 4F              1353 	add	a,#0x4f
   03F9 F9                 1354 	mov	r1,a
   03FA E5*00              1355 	mov	a,_bp
   03FC 24 23              1356 	add	a,#0x23
   03FE F7                 1357 	mov	@r1,a
   03FF E5*00              1358 	mov	a,_bp
   0401 24 4F              1359 	add	a,#0x4f
   0403 F9                 1360 	mov	r1,a
   0404 C0 00              1361 	push	ar0
   0406 E5*00              1362 	mov	a,_bp
   0408 24 48              1363 	add	a,#0x48
   040A F8                 1364 	mov	r0,a
   040B E7                 1365 	mov	a,@r1
   040C F6                 1366 	mov	@r0,a
   040D 08                 1367 	inc	r0
   040E 76 00              1368 	mov	@r0,#0x00
   0410 08                 1369 	inc	r0
   0411 76 40              1370 	mov	@r0,#0x40
   0413 E5*00              1371 	mov	a,_bp
   0415 24 F1              1372 	add	a,#0xf1
   0417 F9                 1373 	mov	r1,a
   0418 87 06              1374 	mov	ar6,@r1
   041A 09                 1375 	inc	r1
   041B 87 07              1376 	mov	ar7,@r1
   041D E4                 1377 	clr	a
   041E FB                 1378 	mov	r3,a
   041F FC                 1379 	mov	r4,a
   0420 E5*00              1380 	mov	a,_bp
   0422 24 4B              1381 	add	a,#0x4b
   0424 F9                 1382 	mov	r1,a
   0425 E7                 1383 	mov	a,@r1
   0426 2E                 1384 	add	a,r6
   0427 FE                 1385 	mov	r6,a
   0428 09                 1386 	inc	r1
   0429 E7                 1387 	mov	a,@r1
   042A 3F                 1388 	addc	a,r7
   042B FF                 1389 	mov	r7,a
   042C 09                 1390 	inc	r1
   042D E7                 1391 	mov	a,@r1
   042E 3B                 1392 	addc	a,r3
   042F 09                 1393 	inc	r1
   0430 E7                 1394 	mov	a,@r1
   0431 3C                 1395 	addc	a,r4
   0432 74 1E              1396 	mov	a,#0x1E
   0434 C0 E0              1397 	push	acc
   0436 E4                 1398 	clr	a
   0437 C0 E0              1399 	push	acc
   0439 E5*00              1400 	mov	a,_bp
   043B 24 48              1401 	add	a,#0x48
   043D F9                 1402 	mov	r1,a
   043E E7                 1403 	mov	a,@r1
   043F C0 E0              1404 	push	acc
   0441 09                 1405 	inc	r1
   0442 E7                 1406 	mov	a,@r1
   0443 C0 E0              1407 	push	acc
   0445 09                 1408 	inc	r1
   0446 E7                 1409 	mov	a,@r1
   0447 C0 E0              1410 	push	acc
   0449 C0 06              1411 	push	ar6
   044B C0 07              1412 	push	ar7
   044D A9*00              1413 	mov	r1,_bp
   044F 09                 1414 	inc	r1
   0450 87 82              1415 	mov	dpl,@r1
   0452 09                 1416 	inc	r1
   0453 87 83              1417 	mov	dph,@r1
   0455 12s00r00           1418 	lcall	_seek_read
   0458 E5 81              1419 	mov	a,sp
   045A 24 F9              1420 	add	a,#0xf9
   045C F5 81              1421 	mov	sp,a
                           1422 ;	../../../core/loader/elfloader.c:242: addr = (char *)symtab_lookup(name);
   045E E5*00              1423 	mov	a,_bp
   0460 24 4F              1424 	add	a,#0x4f
   0462 F9                 1425 	mov	r1,a
   0463 87 03              1426 	mov	ar3,@r1
   0465 7C 00              1427 	mov	r4,#0x00
   0467 7D 40              1428 	mov	r5,#0x40
   0469 8B 82              1429 	mov	dpl,r3
   046B 8C 83              1430 	mov	dph,r4
   046D 8D F0              1431 	mov	b,r5
   046F 12s00r00           1432 	lcall	_symtab_lookup
   0472 AB 82              1433 	mov	r3,dpl
   0474 AC 83              1434 	mov	r4,dph
   0476 AD F0              1435 	mov	r5,b
   0478 D0 00              1436 	pop	ar0
   047A E5*00              1437 	mov	a,_bp
   047C 24 41              1438 	add	a,#0x41
   047E F9                 1439 	mov	r1,a
   047F A7 03              1440 	mov	@r1,ar3
   0481 09                 1441 	inc	r1
   0482 A7 04              1442 	mov	@r1,ar4
   0484 09                 1443 	inc	r1
   0485 A7 05              1444 	mov	@r1,ar5
                           1445 ;	../../../core/loader/elfloader.c:244: if(addr == NULL) {
   0487 D0 00              1446 	pop	ar0
   0489 E5*00              1447 	mov	a,_bp
   048B 24 41              1448 	add	a,#0x41
   048D F9                 1449 	mov	r1,a
   048E E7                 1450 	mov	a,@r1
   048F 09                 1451 	inc	r1
   0490 47                 1452 	orl	a,@r1
   0491 09                 1453 	inc	r1
   0492 47                 1454 	orl	a,@r1
   0493 70 5D              1455 	jnz	00111$
                           1456 ;	../../../core/loader/elfloader.c:246: addr = find_local_symbol(fd, name, symtab, symtabsize, strtab);
   0495 E5*00              1457 	mov	a,_bp
   0497 24 4F              1458 	add	a,#0x4f
   0499 F9                 1459 	mov	r1,a
   049A 87 03              1460 	mov	ar3,@r1
   049C 7C 00              1461 	mov	r4,#0x00
   049E 7D 40              1462 	mov	r5,#0x40
   04A0 C0 00              1463 	push	ar0
   04A2 E5*00              1464 	mov	a,_bp
   04A4 24 F1              1465 	add	a,#0xf1
   04A6 F9                 1466 	mov	r1,a
   04A7 E7                 1467 	mov	a,@r1
   04A8 C0 E0              1468 	push	acc
   04AA 09                 1469 	inc	r1
   04AB E7                 1470 	mov	a,@r1
   04AC C0 E0              1471 	push	acc
   04AE E5*00              1472 	mov	a,_bp
   04B0 24 ED              1473 	add	a,#0xed
   04B2 F9                 1474 	mov	r1,a
   04B3 E7                 1475 	mov	a,@r1
   04B4 C0 E0              1476 	push	acc
   04B6 09                 1477 	inc	r1
   04B7 E7                 1478 	mov	a,@r1
   04B8 C0 E0              1479 	push	acc
   04BA E5*00              1480 	mov	a,_bp
   04BC 24 EF              1481 	add	a,#0xef
   04BE F9                 1482 	mov	r1,a
   04BF E7                 1483 	mov	a,@r1
   04C0 C0 E0              1484 	push	acc
   04C2 09                 1485 	inc	r1
   04C3 E7                 1486 	mov	a,@r1
   04C4 C0 E0              1487 	push	acc
   04C6 C0 03              1488 	push	ar3
   04C8 C0 04              1489 	push	ar4
   04CA C0 05              1490 	push	ar5
   04CC A9*00              1491 	mov	r1,_bp
   04CE 09                 1492 	inc	r1
   04CF 87 82              1493 	mov	dpl,@r1
   04D1 09                 1494 	inc	r1
   04D2 87 83              1495 	mov	dph,@r1
   04D4 12s00r5F           1496 	lcall	_find_local_symbol
   04D7 AB 82              1497 	mov	r3,dpl
   04D9 AC 83              1498 	mov	r4,dph
   04DB AD F0              1499 	mov	r5,b
   04DD E5 81              1500 	mov	a,sp
   04DF 24 F7              1501 	add	a,#0xf7
   04E1 F5 81              1502 	mov	sp,a
   04E3 D0 00              1503 	pop	ar0
   04E5 E5*00              1504 	mov	a,_bp
   04E7 24 41              1505 	add	a,#0x41
   04E9 F9                 1506 	mov	r1,a
   04EA A7 03              1507 	mov	@r1,ar3
   04EC 09                 1508 	inc	r1
   04ED A7 04              1509 	mov	@r1,ar4
   04EF 09                 1510 	inc	r1
   04F0 A7 05              1511 	mov	@r1,ar5
                           1512 ;	../../../core/loader/elfloader.c:247: PRINTF("found address %p\n", addr);
   04F2                    1513 00111$:
                           1514 ;	../../../core/loader/elfloader.c:249: if(addr == NULL) {
   04F2 E5*00              1515 	mov	a,_bp
   04F4 24 41              1516 	add	a,#0x41
   04F6 F9                 1517 	mov	r1,a
   04F7 E7                 1518 	mov	a,@r1
   04F8 09                 1519 	inc	r1
   04F9 47                 1520 	orl	a,@r1
   04FA 09                 1521 	inc	r1
   04FB 47                 1522 	orl	a,@r1
   04FC 60 03              1523 	jz	00170$
   04FE 02s06r6E           1524 	ljmp	00142$
   0501                    1525 00170$:
                           1526 ;	../../../core/loader/elfloader.c:250: if(s.st_shndx == bss.number) {
   0501 86 04              1527 	mov	ar4,@r0
   0503 08                 1528 	inc	r0
   0504 86 07              1529 	mov	ar7,@r0
   0506 18                 1530 	dec	r0
   0507 90s00r21           1531 	mov	dptr,#_bss
   050A E0                 1532 	movx	a,@dptr
   050B FD                 1533 	mov	r5,a
   050C 7E 00              1534 	mov	r6,#0x00
   050E EC                 1535 	mov	a,r4
   050F B5 05 0D           1536 	cjne	a,ar5,00124$
   0512 EF                 1537 	mov	a,r7
   0513 B5 06 09           1538 	cjne	a,ar6,00124$
                           1539 ;	../../../core/loader/elfloader.c:251: sect = &bss;
   0516 7Dr21              1540 	mov	r5,#_bss
   0518 7Es00              1541 	mov	r6,#(_bss >> 8)
   051A 7F 00              1542 	mov	r7,#0x00
   051C 02s05rA0           1543 	ljmp	00125$
   051F                    1544 00124$:
                           1545 ;	../../../core/loader/elfloader.c:252: } else if(s.st_shndx == data.number) {
   051F C0 00              1546 	push	ar0
   0521 90s00r27           1547 	mov	dptr,#_data
   0524 E0                 1548 	movx	a,@dptr
   0525 FA                 1549 	mov	r2,a
   0526 7B 00              1550 	mov	r3,#0x00
   0528 EC                 1551 	mov	a,r4
   0529 B5 02 06           1552 	cjne	a,ar2,00173$
   052C EF                 1553 	mov	a,r7
   052D B5 03 02           1554 	cjne	a,ar3,00173$
   0530 80 04              1555 	sjmp	00174$
   0532                    1556 00173$:
   0532 D0 00              1557 	pop	ar0
   0534 80 0A              1558 	sjmp	00121$
   0536                    1559 00174$:
   0536 D0 00              1560 	pop	ar0
                           1561 ;	../../../core/loader/elfloader.c:253: sect = &data;
   0538 7Dr27              1562 	mov	r5,#_data
   053A 7Es00              1563 	mov	r6,#(_data >> 8)
   053C 7F 00              1564 	mov	r7,#0x00
   053E 80 60              1565 	sjmp	00125$
   0540                    1566 00121$:
                           1567 ;	../../../core/loader/elfloader.c:254: } else if(s.st_shndx == rodata.number) {
   0540 90s00r2D           1568 	mov	dptr,#_rodata
   0543 E0                 1569 	movx	a,@dptr
   0544 FA                 1570 	mov	r2,a
   0545 7B 00              1571 	mov	r3,#0x00
   0547 EC                 1572 	mov	a,r4
   0548 B5 02 0C           1573 	cjne	a,ar2,00118$
   054B EF                 1574 	mov	a,r7
   054C B5 03 08           1575 	cjne	a,ar3,00118$
                           1576 ;	../../../core/loader/elfloader.c:255: sect = &rodata;
   054F 7Dr2D              1577 	mov	r5,#_rodata
   0551 7Es00              1578 	mov	r6,#(_rodata >> 8)
   0553 7F 00              1579 	mov	r7,#0x00
   0555 80 49              1580 	sjmp	00125$
   0557                    1581 00118$:
                           1582 ;	../../../core/loader/elfloader.c:256: } else if(s.st_shndx == text.number) {
   0557 90s00r33           1583 	mov	dptr,#_text
   055A E0                 1584 	movx	a,@dptr
   055B FA                 1585 	mov	r2,a
   055C 7B 00              1586 	mov	r3,#0x00
   055E EC                 1587 	mov	a,r4
   055F B5 02 0C           1588 	cjne	a,ar2,00112$
   0562 EF                 1589 	mov	a,r7
   0563 B5 03 08           1590 	cjne	a,ar3,00112$
                           1591 ;	../../../core/loader/elfloader.c:257: sect = &text;
   0566 7Dr33              1592 	mov	r5,#_text
   0568 7Es00              1593 	mov	r6,#(_text >> 8)
   056A 7F 00              1594 	mov	r7,#0x00
                           1595 ;	../../../core/loader/elfloader.c:259: PRINTF("elfloader unknown name: '%30s'\n", name);
   056C 80 32              1596 	sjmp	00125$
   056E                    1597 00112$:
                           1598 ;	../../../core/loader/elfloader.c:260: memcpy(elfloader_unknown, name, sizeof(elfloader_unknown));
   056E E5*00              1599 	mov	a,_bp
   0570 24 4F              1600 	add	a,#0x4f
   0572 F8                 1601 	mov	r0,a
   0573 86 02              1602 	mov	ar2,@r0
   0575 7B 00              1603 	mov	r3,#0x00
   0577 7C 40              1604 	mov	r4,#0x40
   0579 74 1E              1605 	mov	a,#0x1E
   057B C0 E0              1606 	push	acc
   057D E4                 1607 	clr	a
   057E C0 E0              1608 	push	acc
   0580 C0 02              1609 	push	ar2
   0582 C0 03              1610 	push	ar3
   0584 C0 04              1611 	push	ar4
   0586 90s00r00           1612 	mov	dptr,#_elfloader_unknown
   0589 75 F0 00           1613 	mov	b,#0x00
   058C 12s00r00           1614 	lcall	_memcpy
   058F E5 81              1615 	mov	a,sp
   0591 24 FB              1616 	add	a,#0xfb
   0593 F5 81              1617 	mov	sp,a
                           1618 ;	../../../core/loader/elfloader.c:261: elfloader_unknown[sizeof(elfloader_unknown) - 1] = 0;
   0595 90s00r1D           1619 	mov	dptr,#(_elfloader_unknown + 0x001d)
   0598 E4                 1620 	clr	a
   0599 F0                 1621 	movx	@dptr,a
                           1622 ;	../../../core/loader/elfloader.c:262: return ELFLOADER_SYMBOL_NOT_FOUND;
   059A 90 00 05           1623 	mov	dptr,#0x0005
   059D 02s07r5F           1624 	ljmp	00149$
   05A0                    1625 00125$:
                           1626 ;	../../../core/loader/elfloader.c:264: addr = sect->address;
   05A0 74 03              1627 	mov	a,#0x03
   05A2 2D                 1628 	add	a,r5
   05A3 FA                 1629 	mov	r2,a
   05A4 E4                 1630 	clr	a
   05A5 3E                 1631 	addc	a,r6
   05A6 FB                 1632 	mov	r3,a
   05A7 8F 04              1633 	mov	ar4,r7
   05A9 8A 82              1634 	mov	dpl,r2
   05AB 8B 83              1635 	mov	dph,r3
   05AD 8C F0              1636 	mov	b,r4
   05AF 12s00r00           1637 	lcall	__gptrget
   05B2 FA                 1638 	mov	r2,a
   05B3 A3                 1639 	inc	dptr
   05B4 12s00r00           1640 	lcall	__gptrget
   05B7 FB                 1641 	mov	r3,a
   05B8 A3                 1642 	inc	dptr
   05B9 12s00r00           1643 	lcall	__gptrget
   05BC FC                 1644 	mov	r4,a
   05BD E5*00              1645 	mov	a,_bp
   05BF 24 41              1646 	add	a,#0x41
   05C1 F9                 1647 	mov	r1,a
   05C2 A7 02              1648 	mov	@r1,ar2
   05C4 09                 1649 	inc	r1
   05C5 A7 03              1650 	mov	@r1,ar3
   05C7 09                 1651 	inc	r1
   05C8 A7 04              1652 	mov	@r1,ar4
   05CA 02s06r6E           1653 	ljmp	00142$
   05CD                    1654 00141$:
                           1655 ;	../../../core/loader/elfloader.c:267: if(s.st_shndx == bss.number) {
   05CD C0 00              1656 	push	ar0
   05CF E5*00              1657 	mov	a,_bp
   05D1 24 44              1658 	add	a,#0x44
   05D3 F9                 1659 	mov	r1,a
   05D4 87 01              1660 	mov	ar1,@r1
   05D6 87 05              1661 	mov	ar5,@r1
   05D8 09                 1662 	inc	r1
   05D9 87 06              1663 	mov	ar6,@r1
   05DB 19                 1664 	dec	r1
   05DC 90s00r21           1665 	mov	dptr,#_bss
   05DF E0                 1666 	movx	a,@dptr
   05E0 FC                 1667 	mov	r4,a
   05E1 7A 00              1668 	mov	r2,#0x00
   05E3 ED                 1669 	mov	a,r5
   05E4 B5 04 06           1670 	cjne	a,ar4,00179$
   05E7 EE                 1671 	mov	a,r6
   05E8 B5 02 02           1672 	cjne	a,ar2,00179$
   05EB 80 04              1673 	sjmp	00180$
   05ED                    1674 00179$:
   05ED D0 00              1675 	pop	ar0
   05EF 80 0A              1676 	sjmp	00138$
   05F1                    1677 00180$:
   05F1 D0 00              1678 	pop	ar0
                           1679 ;	../../../core/loader/elfloader.c:268: sect = &bss;
   05F3 7Dr21              1680 	mov	r5,#_bss
   05F5 7Es00              1681 	mov	r6,#(_bss >> 8)
   05F7 7F 00              1682 	mov	r7,#0x00
   05F9 80 4B              1683 	sjmp	00139$
   05FB                    1684 00138$:
                           1685 ;	../../../core/loader/elfloader.c:269: } else if(s.st_shndx == data.number) {
   05FB 90s00r27           1686 	mov	dptr,#_data
   05FE E0                 1687 	movx	a,@dptr
   05FF FA                 1688 	mov	r2,a
   0600 7B 00              1689 	mov	r3,#0x00
   0602 ED                 1690 	mov	a,r5
   0603 B5 02 0C           1691 	cjne	a,ar2,00135$
   0606 EE                 1692 	mov	a,r6
   0607 B5 03 08           1693 	cjne	a,ar3,00135$
                           1694 ;	../../../core/loader/elfloader.c:270: sect = &data;
   060A 7Dr27              1695 	mov	r5,#_data
   060C 7Es00              1696 	mov	r6,#(_data >> 8)
   060E 7F 00              1697 	mov	r7,#0x00
   0610 80 34              1698 	sjmp	00139$
   0612                    1699 00135$:
                           1700 ;	../../../core/loader/elfloader.c:271: } else if(s.st_shndx == rodata.number) {
   0612 90s00r2D           1701 	mov	dptr,#_rodata
   0615 E0                 1702 	movx	a,@dptr
   0616 FA                 1703 	mov	r2,a
   0617 7B 00              1704 	mov	r3,#0x00
   0619 ED                 1705 	mov	a,r5
   061A B5 02 0C           1706 	cjne	a,ar2,00132$
   061D EE                 1707 	mov	a,r6
   061E B5 03 08           1708 	cjne	a,ar3,00132$
                           1709 ;	../../../core/loader/elfloader.c:272: sect = &rodata;
   0621 7Dr2D              1710 	mov	r5,#_rodata
   0623 7Es00              1711 	mov	r6,#(_rodata >> 8)
   0625 7F 00              1712 	mov	r7,#0x00
   0627 80 1D              1713 	sjmp	00139$
   0629                    1714 00132$:
                           1715 ;	../../../core/loader/elfloader.c:273: } else if(s.st_shndx == text.number) {
   0629 90s00r33           1716 	mov	dptr,#_text
   062C E0                 1717 	movx	a,@dptr
   062D FA                 1718 	mov	r2,a
   062E 7B 00              1719 	mov	r3,#0x00
   0630 ED                 1720 	mov	a,r5
   0631 B5 02 0C           1721 	cjne	a,ar2,00129$
   0634 EE                 1722 	mov	a,r6
   0635 B5 03 08           1723 	cjne	a,ar3,00129$
                           1724 ;	../../../core/loader/elfloader.c:274: sect = &text;
   0638 7Dr33              1725 	mov	r5,#_text
   063A 7Es00              1726 	mov	r6,#(_text >> 8)
   063C 7F 00              1727 	mov	r7,#0x00
   063E 80 06              1728 	sjmp	00139$
   0640                    1729 00129$:
                           1730 ;	../../../core/loader/elfloader.c:276: return ELFLOADER_SEGMENT_NOT_FOUND;
   0640 90 00 06           1731 	mov	dptr,#0x0006
   0643 02s07r5F           1732 	ljmp	00149$
   0646                    1733 00139$:
                           1734 ;	../../../core/loader/elfloader.c:279: addr = sect->address;
   0646 74 03              1735 	mov	a,#0x03
   0648 2D                 1736 	add	a,r5
   0649 FD                 1737 	mov	r5,a
   064A E4                 1738 	clr	a
   064B 3E                 1739 	addc	a,r6
   064C FE                 1740 	mov	r6,a
   064D 8D 82              1741 	mov	dpl,r5
   064F 8E 83              1742 	mov	dph,r6
   0651 8F F0              1743 	mov	b,r7
   0653 12s00r00           1744 	lcall	__gptrget
   0656 FD                 1745 	mov	r5,a
   0657 A3                 1746 	inc	dptr
   0658 12s00r00           1747 	lcall	__gptrget
   065B FE                 1748 	mov	r6,a
   065C A3                 1749 	inc	dptr
   065D 12s00r00           1750 	lcall	__gptrget
   0660 FF                 1751 	mov	r7,a
   0661 E5*00              1752 	mov	a,_bp
   0663 24 41              1753 	add	a,#0x41
   0665 F9                 1754 	mov	r1,a
   0666 A7 05              1755 	mov	@r1,ar5
   0668 09                 1756 	inc	r1
   0669 A7 06              1757 	mov	@r1,ar6
   066B 09                 1758 	inc	r1
   066C A7 07              1759 	mov	@r1,ar7
   066E                    1760 00142$:
                           1761 ;	../../../core/loader/elfloader.c:282: if(!using_relas) {
   066E E5*00              1762 	mov	a,_bp
   0670 24 EC              1763 	add	a,#0xec
   0672 F9                 1764 	mov	r1,a
   0673 E7                 1765 	mov	a,@r1
   0674 60 03              1766 	jz	00187$
   0676 02s06rF7           1767 	ljmp	00144$
   0679                    1768 00187$:
                           1769 ;	../../../core/loader/elfloader.c:284: seek_read(fd, sectionaddr + rela.r_offset, (char *)&rela.r_addend, 4);
   0679 C0 00              1770 	push	ar0
   067B E5*00              1771 	mov	a,_bp
   067D 24 03              1772 	add	a,#0x03
   067F F9                 1773 	mov	r1,a
   0680 24 08              1774 	add	a,#0x08
   0682 FA                 1775 	mov	r2,a
   0683 C0 00              1776 	push	ar0
   0685 E5*00              1777 	mov	a,_bp
   0687 24 4B              1778 	add	a,#0x4b
   0689 F8                 1779 	mov	r0,a
   068A A6 02              1780 	mov	@r0,ar2
   068C 08                 1781 	inc	r0
   068D 76 00              1782 	mov	@r0,#0x00
   068F 08                 1783 	inc	r0
   0690 76 40              1784 	mov	@r0,#0x40
   0692 E5*00              1785 	mov	a,_bp
   0694 24 50              1786 	add	a,#0x50
   0696 F8                 1787 	mov	r0,a
   0697 E7                 1788 	mov	a,@r1
   0698 F6                 1789 	mov	@r0,a
   0699 09                 1790 	inc	r1
   069A E7                 1791 	mov	a,@r1
   069B 08                 1792 	inc	r0
   069C F6                 1793 	mov	@r0,a
   069D 09                 1794 	inc	r1
   069E E7                 1795 	mov	a,@r1
   069F 08                 1796 	inc	r0
   06A0 F6                 1797 	mov	@r0,a
   06A1 09                 1798 	inc	r1
   06A2 E7                 1799 	mov	a,@r1
   06A3 08                 1800 	inc	r0
   06A4 F6                 1801 	mov	@r0,a
   06A5 19                 1802 	dec	r1
   06A6 19                 1803 	dec	r1
   06A7 19                 1804 	dec	r1
   06A8 E5*00              1805 	mov	a,_bp
   06AA 24 F8              1806 	add	a,#0xf8
   06AC F9                 1807 	mov	r1,a
   06AD 87 03              1808 	mov	ar3,@r1
   06AF 09                 1809 	inc	r1
   06B0 87 04              1810 	mov	ar4,@r1
   06B2 E4                 1811 	clr	a
   06B3 FA                 1812 	mov	r2,a
   06B4 FD                 1813 	mov	r5,a
   06B5 E5*00              1814 	mov	a,_bp
   06B7 24 50              1815 	add	a,#0x50
   06B9 F9                 1816 	mov	r1,a
   06BA E7                 1817 	mov	a,@r1
   06BB 2B                 1818 	add	a,r3
   06BC FB                 1819 	mov	r3,a
   06BD 09                 1820 	inc	r1
   06BE E7                 1821 	mov	a,@r1
   06BF 3C                 1822 	addc	a,r4
   06C0 FC                 1823 	mov	r4,a
   06C1 09                 1824 	inc	r1
   06C2 E7                 1825 	mov	a,@r1
   06C3 3A                 1826 	addc	a,r2
   06C4 09                 1827 	inc	r1
   06C5 E7                 1828 	mov	a,@r1
   06C6 3D                 1829 	addc	a,r5
   06C7 74 04              1830 	mov	a,#0x04
   06C9 C0 E0              1831 	push	acc
   06CB E4                 1832 	clr	a
   06CC C0 E0              1833 	push	acc
   06CE E5*00              1834 	mov	a,_bp
   06D0 24 4B              1835 	add	a,#0x4b
   06D2 F9                 1836 	mov	r1,a
   06D3 E7                 1837 	mov	a,@r1
   06D4 C0 E0              1838 	push	acc
   06D6 09                 1839 	inc	r1
   06D7 E7                 1840 	mov	a,@r1
   06D8 C0 E0              1841 	push	acc
   06DA 09                 1842 	inc	r1
   06DB E7                 1843 	mov	a,@r1
   06DC C0 E0              1844 	push	acc
   06DE C0 03              1845 	push	ar3
   06E0 C0 04              1846 	push	ar4
   06E2 A9*00              1847 	mov	r1,_bp
   06E4 09                 1848 	inc	r1
   06E5 87 82              1849 	mov	dpl,@r1
   06E7 09                 1850 	inc	r1
   06E8 87 83              1851 	mov	dph,@r1
   06EA 12s00r00           1852 	lcall	_seek_read
   06ED E5 81              1853 	mov	a,sp
   06EF 24 F9              1854 	add	a,#0xf9
   06F1 F5 81              1855 	mov	sp,a
   06F3 D0 00              1856 	pop	ar0
                           1857 ;	../../../core/loader/elfloader.c:289: return ELFLOADER_OK;
   06F5 D0 00              1858 	pop	ar0
                           1859 ;	../../../core/loader/elfloader.c:284: seek_read(fd, sectionaddr + rela.r_offset, (char *)&rela.r_addend, 4);
   06F7                    1860 00144$:
                           1861 ;	../../../core/loader/elfloader.c:287: elfloader_arch_relocate(fd, sectionaddr, sectionbase, &rela, addr);
   06F7 E5*00              1862 	mov	a,_bp
   06F9 24 03              1863 	add	a,#0x03
   06FB FA                 1864 	mov	r2,a
   06FC 7B 00              1865 	mov	r3,#0x00
   06FE 7C 40              1866 	mov	r4,#0x40
   0700 C0 00              1867 	push	ar0
   0702 E5*00              1868 	mov	a,_bp
   0704 24 41              1869 	add	a,#0x41
   0706 F9                 1870 	mov	r1,a
   0707 E7                 1871 	mov	a,@r1
   0708 C0 E0              1872 	push	acc
   070A 09                 1873 	inc	r1
   070B E7                 1874 	mov	a,@r1
   070C C0 E0              1875 	push	acc
   070E 09                 1876 	inc	r1
   070F E7                 1877 	mov	a,@r1
   0710 C0 E0              1878 	push	acc
   0712 C0 02              1879 	push	ar2
   0714 C0 03              1880 	push	ar3
   0716 C0 04              1881 	push	ar4
   0718 E5*00              1882 	mov	a,_bp
   071A 24 F5              1883 	add	a,#0xf5
   071C F9                 1884 	mov	r1,a
   071D E7                 1885 	mov	a,@r1
   071E C0 E0              1886 	push	acc
   0720 09                 1887 	inc	r1
   0721 E7                 1888 	mov	a,@r1
   0722 C0 E0              1889 	push	acc
   0724 09                 1890 	inc	r1
   0725 E7                 1891 	mov	a,@r1
   0726 C0 E0              1892 	push	acc
   0728 E5*00              1893 	mov	a,_bp
   072A 24 F8              1894 	add	a,#0xf8
   072C F9                 1895 	mov	r1,a
   072D E7                 1896 	mov	a,@r1
   072E C0 E0              1897 	push	acc
   0730 09                 1898 	inc	r1
   0731 E7                 1899 	mov	a,@r1
   0732 C0 E0              1900 	push	acc
   0734 A9*00              1901 	mov	r1,_bp
   0736 09                 1902 	inc	r1
   0737 87 82              1903 	mov	dpl,@r1
   0739 09                 1904 	inc	r1
   073A 87 83              1905 	mov	dph,@r1
   073C 12s00r00           1906 	lcall	_elfloader_arch_relocate
   073F E5 81              1907 	mov	a,sp
   0741 24 F5              1908 	add	a,#0xf5
   0743 F5 81              1909 	mov	sp,a
                           1910 ;	../../../core/loader/elfloader.c:234: for(a = section; a < section + size; a += rel_size) {
   0745 E5*00              1911 	mov	a,_bp
   0747 24 21              1912 	add	a,#0x21
   0749 F9                 1913 	mov	r1,a
   074A E5*00              1914 	mov	a,_bp
   074C 24 0F              1915 	add	a,#0x0f
   074E F8                 1916 	mov	r0,a
   074F E6                 1917 	mov	a,@r0
   0750 27                 1918 	add	a,@r1
   0751 F7                 1919 	mov	@r1,a
   0752 08                 1920 	inc	r0
   0753 E6                 1921 	mov	a,@r0
   0754 09                 1922 	inc	r1
   0755 37                 1923 	addc	a,@r1
   0756 F7                 1924 	mov	@r1,a
   0757 D0 00              1925 	pop	ar0
   0759 02s02rF6           1926 	ljmp	00145$
   075C                    1927 00148$:
                           1928 ;	../../../core/loader/elfloader.c:289: return ELFLOADER_OK;
   075C 90 00 00           1929 	mov	dptr,#0x0000
   075F                    1930 00149$:
   075F 85*00 81           1931 	mov	sp,_bp
   0762 D0*00              1932 	pop	_bp
   0764 22                 1933 	ret
                           1934 ;------------------------------------------------------------
                           1935 ;Allocation info for local variables in function 'find_program_processes'
                           1936 ;------------------------------------------------------------
                           1937 ;symtab                    Allocated to stack - offset -4
                           1938 ;size                      Allocated to stack - offset -6
                           1939 ;strtab                    Allocated to stack - offset -8
                           1940 ;fd                        Allocated to stack - offset 1
                           1941 ;s                         Allocated to stack - offset 3
                           1942 ;a                         Allocated to registers r4 r5 
                           1943 ;name                      Allocated to stack - offset 19
                           1944 ;sloc0                     Allocated to stack - offset 49
                           1945 ;sloc1                     Allocated to stack - offset 51
                           1946 ;sloc2                     Allocated to stack - offset 55
                           1947 ;sloc3                     Allocated to stack - offset 56
                           1948 ;sloc4                     Allocated to stack - offset 59
                           1949 ;------------------------------------------------------------
                           1950 ;	../../../core/loader/elfloader.c:293: find_program_processes(int fd,
                           1951 ;	-----------------------------------------
                           1952 ;	 function find_program_processes
                           1953 ;	-----------------------------------------
   0765                    1954 _find_program_processes:
   0765 C0*00              1955 	push	_bp
   0767 85 81*00           1956 	mov	_bp,sp
   076A C0 82              1957 	push	dpl
   076C C0 83              1958 	push	dph
   076E E5 81              1959 	mov	a,sp
   0770 24 3B              1960 	add	a,#0x3b
   0772 F5 81              1961 	mov	sp,a
                           1962 ;	../../../core/loader/elfloader.c:301: for(a = symtab; a < symtab + size; a += sizeof(s)) {
   0774 E5*00              1963 	mov	a,_bp
   0776 24 FC              1964 	add	a,#0xfc
   0778 F8                 1965 	mov	r0,a
   0779 86 04              1966 	mov	ar4,@r0
   077B 08                 1967 	inc	r0
   077C 86 05              1968 	mov	ar5,@r0
   077E E5*00              1969 	mov	a,_bp
   0780 24 3B              1970 	add	a,#0x3b
   0782 F8                 1971 	mov	r0,a
   0783 E5*00              1972 	mov	a,_bp
   0785 24 13              1973 	add	a,#0x13
   0787 F6                 1974 	mov	@r0,a
   0788 E5*00              1975 	mov	a,_bp
   078A 24 3B              1976 	add	a,#0x3b
   078C F8                 1977 	mov	r0,a
   078D E5*00              1978 	mov	a,_bp
   078F 24 37              1979 	add	a,#0x37
   0791 F9                 1980 	mov	r1,a
   0792 E6                 1981 	mov	a,@r0
   0793 F7                 1982 	mov	@r1,a
   0794 E5*00              1983 	mov	a,_bp
   0796 24 03              1984 	add	a,#0x03
   0798 F8                 1985 	mov	r0,a
   0799 E5*00              1986 	mov	a,_bp
   079B 24 FA              1987 	add	a,#0xfa
   079D F9                 1988 	mov	r1,a
   079E C0 00              1989 	push	ar0
   07A0 E5*00              1990 	mov	a,_bp
   07A2 24 31              1991 	add	a,#0x31
   07A4 F8                 1992 	mov	r0,a
   07A5 E7                 1993 	mov	a,@r1
   07A6 2C                 1994 	add	a,r4
   07A7 F6                 1995 	mov	@r0,a
   07A8 09                 1996 	inc	r1
   07A9 E7                 1997 	mov	a,@r1
   07AA 3D                 1998 	addc	a,r5
   07AB 08                 1999 	inc	r0
   07AC F6                 2000 	mov	@r0,a
   07AD D0 00              2001 	pop	ar0
   07AF                    2002 00105$:
   07AF E5*00              2003 	mov	a,_bp
   07B1 24 31              2004 	add	a,#0x31
   07B3 F9                 2005 	mov	r1,a
   07B4 C3                 2006 	clr	c
   07B5 EC                 2007 	mov	a,r4
   07B6 97                 2008 	subb	a,@r1
   07B7 ED                 2009 	mov	a,r5
   07B8 09                 2010 	inc	r1
   07B9 97                 2011 	subb	a,@r1
   07BA 40 03              2012 	jc	00115$
   07BC 02s09r01           2013 	ljmp	00108$
   07BF                    2014 00115$:
                           2015 ;	../../../core/loader/elfloader.c:302: seek_read(fd, a, (char *)&s, sizeof(s));
   07BF E5*00              2016 	mov	a,_bp
   07C1 24 03              2017 	add	a,#0x03
   07C3 FF                 2018 	mov	r7,a
   07C4 7A 00              2019 	mov	r2,#0x00
   07C6 7B 40              2020 	mov	r3,#0x40
   07C8 C0 04              2021 	push	ar4
   07CA C0 05              2022 	push	ar5
   07CC C0 00              2023 	push	ar0
   07CE 74 10              2024 	mov	a,#0x10
   07D0 C0 E0              2025 	push	acc
   07D2 E4                 2026 	clr	a
   07D3 C0 E0              2027 	push	acc
   07D5 C0 07              2028 	push	ar7
   07D7 C0 02              2029 	push	ar2
   07D9 C0 03              2030 	push	ar3
   07DB C0 04              2031 	push	ar4
   07DD C0 05              2032 	push	ar5
   07DF A9*00              2033 	mov	r1,_bp
   07E1 09                 2034 	inc	r1
   07E2 87 82              2035 	mov	dpl,@r1
   07E4 09                 2036 	inc	r1
   07E5 87 83              2037 	mov	dph,@r1
   07E7 12s00r00           2038 	lcall	_seek_read
   07EA E5 81              2039 	mov	a,sp
   07EC 24 F9              2040 	add	a,#0xf9
   07EE F5 81              2041 	mov	sp,a
   07F0 D0 00              2042 	pop	ar0
   07F2 D0 05              2043 	pop	ar5
   07F4 D0 04              2044 	pop	ar4
                           2045 ;	../../../core/loader/elfloader.c:304: if(s.st_name != 0) {
   07F6 E5*00              2046 	mov	a,_bp
   07F8 24 33              2047 	add	a,#0x33
   07FA F9                 2048 	mov	r1,a
   07FB E6                 2049 	mov	a,@r0
   07FC F7                 2050 	mov	@r1,a
   07FD 08                 2051 	inc	r0
   07FE E6                 2052 	mov	a,@r0
   07FF 09                 2053 	inc	r1
   0800 F7                 2054 	mov	@r1,a
   0801 08                 2055 	inc	r0
   0802 E6                 2056 	mov	a,@r0
   0803 09                 2057 	inc	r1
   0804 F7                 2058 	mov	@r1,a
   0805 08                 2059 	inc	r0
   0806 E6                 2060 	mov	a,@r0
   0807 09                 2061 	inc	r1
   0808 F7                 2062 	mov	@r1,a
   0809 18                 2063 	dec	r0
   080A 18                 2064 	dec	r0
   080B 18                 2065 	dec	r0
   080C E5*00              2066 	mov	a,_bp
   080E 24 33              2067 	add	a,#0x33
   0810 F9                 2068 	mov	r1,a
   0811 E7                 2069 	mov	a,@r1
   0812 09                 2070 	inc	r1
   0813 47                 2071 	orl	a,@r1
   0814 09                 2072 	inc	r1
   0815 47                 2073 	orl	a,@r1
   0816 09                 2074 	inc	r1
   0817 47                 2075 	orl	a,@r1
   0818 70 03              2076 	jnz	00116$
   081A 02s08rF7           2077 	ljmp	00107$
   081D                    2078 00116$:
                           2079 ;	../../../core/loader/elfloader.c:305: seek_read(fd, strtab + s.st_name, name, sizeof(name));
   081D C0 00              2080 	push	ar0
   081F E5*00              2081 	mov	a,_bp
   0821 24 3B              2082 	add	a,#0x3b
   0823 F9                 2083 	mov	r1,a
   0824 C0 00              2084 	push	ar0
   0826 E5*00              2085 	mov	a,_bp
   0828 24 38              2086 	add	a,#0x38
   082A F8                 2087 	mov	r0,a
   082B E7                 2088 	mov	a,@r1
   082C F6                 2089 	mov	@r0,a
   082D 08                 2090 	inc	r0
   082E 76 00              2091 	mov	@r0,#0x00
   0830 08                 2092 	inc	r0
   0831 76 40              2093 	mov	@r0,#0x40
   0833 D0 00              2094 	pop	ar0
   0835 E5*00              2095 	mov	a,_bp
   0837 24 F8              2096 	add	a,#0xf8
   0839 F9                 2097 	mov	r1,a
   083A 87 02              2098 	mov	ar2,@r1
   083C 09                 2099 	inc	r1
   083D 87 03              2100 	mov	ar3,@r1
   083F E4                 2101 	clr	a
   0840 FF                 2102 	mov	r7,a
   0841 FE                 2103 	mov	r6,a
   0842 E5*00              2104 	mov	a,_bp
   0844 24 33              2105 	add	a,#0x33
   0846 F9                 2106 	mov	r1,a
   0847 E7                 2107 	mov	a,@r1
   0848 2A                 2108 	add	a,r2
   0849 FA                 2109 	mov	r2,a
   084A 09                 2110 	inc	r1
   084B E7                 2111 	mov	a,@r1
   084C 3B                 2112 	addc	a,r3
   084D FB                 2113 	mov	r3,a
   084E 09                 2114 	inc	r1
   084F E7                 2115 	mov	a,@r1
   0850 3F                 2116 	addc	a,r7
   0851 09                 2117 	inc	r1
   0852 E7                 2118 	mov	a,@r1
   0853 3E                 2119 	addc	a,r6
   0854 C0 04              2120 	push	ar4
   0856 C0 05              2121 	push	ar5
   0858 C0 00              2122 	push	ar0
   085A 74 1E              2123 	mov	a,#0x1E
   085C C0 E0              2124 	push	acc
   085E E4                 2125 	clr	a
   085F C0 E0              2126 	push	acc
   0861 E5*00              2127 	mov	a,_bp
   0863 24 38              2128 	add	a,#0x38
   0865 F9                 2129 	mov	r1,a
   0866 E7                 2130 	mov	a,@r1
   0867 C0 E0              2131 	push	acc
   0869 09                 2132 	inc	r1
   086A E7                 2133 	mov	a,@r1
   086B C0 E0              2134 	push	acc
   086D 09                 2135 	inc	r1
   086E E7                 2136 	mov	a,@r1
   086F C0 E0              2137 	push	acc
   0871 C0 02              2138 	push	ar2
   0873 C0 03              2139 	push	ar3
   0875 A9*00              2140 	mov	r1,_bp
   0877 09                 2141 	inc	r1
   0878 87 82              2142 	mov	dpl,@r1
   087A 09                 2143 	inc	r1
   087B 87 83              2144 	mov	dph,@r1
   087D 12s00r00           2145 	lcall	_seek_read
   0880 E5 81              2146 	mov	a,sp
   0882 24 F9              2147 	add	a,#0xf9
   0884 F5 81              2148 	mov	sp,a
                           2149 ;	../../../core/loader/elfloader.c:306: if(strcmp(name, "autostart_processes") == 0) {
   0886 E5*00              2150 	mov	a,_bp
   0888 24 37              2151 	add	a,#0x37
   088A F9                 2152 	mov	r1,a
   088B 87 07              2153 	mov	ar7,@r1
   088D 7A 00              2154 	mov	r2,#0x00
   088F 7B 40              2155 	mov	r3,#0x40
   0891 74r07              2156 	mov	a,#__str_0
   0893 C0 E0              2157 	push	acc
   0895 74s00              2158 	mov	a,#(__str_0 >> 8)
   0897 C0 E0              2159 	push	acc
   0899 74 80              2160 	mov	a,#0x80
   089B C0 E0              2161 	push	acc
   089D 8F 82              2162 	mov	dpl,r7
   089F 8A 83              2163 	mov	dph,r2
   08A1 8B F0              2164 	mov	b,r3
   08A3 12s00r00           2165 	lcall	_strcmp
   08A6 AA 82              2166 	mov	r2,dpl
   08A8 AB 83              2167 	mov	r3,dph
   08AA 15 81              2168 	dec	sp
   08AC 15 81              2169 	dec	sp
   08AE 15 81              2170 	dec	sp
   08B0 D0 00              2171 	pop	ar0
   08B2 D0 05              2172 	pop	ar5
   08B4 D0 04              2173 	pop	ar4
   08B6 D0 00              2174 	pop	ar0
   08B8 EA                 2175 	mov	a,r2
   08B9 4B                 2176 	orl	a,r3
   08BA 70 3B              2177 	jnz	00107$
                           2178 ;	../../../core/loader/elfloader.c:307: return &data.address[s.st_value];
   08BC 90s00r2A           2179 	mov	dptr,#(_data + 0x0003)
   08BF E5*00              2180 	mov	a,_bp
   08C1 24 38              2181 	add	a,#0x38
   08C3 F8                 2182 	mov	r0,a
   08C4 E0                 2183 	movx	a,@dptr
   08C5 F6                 2184 	mov	@r0,a
   08C6 A3                 2185 	inc	dptr
   08C7 E0                 2186 	movx	a,@dptr
   08C8 08                 2187 	inc	r0
   08C9 F6                 2188 	mov	@r0,a
   08CA A3                 2189 	inc	dptr
   08CB E0                 2190 	movx	a,@dptr
   08CC 08                 2191 	inc	r0
   08CD F6                 2192 	mov	@r0,a
   08CE E5*00              2193 	mov	a,_bp
   08D0 24 03              2194 	add	a,#0x03
   08D2 24 04              2195 	add	a,#0x04
   08D4 F9                 2196 	mov	r1,a
   08D5 87 07              2197 	mov	ar7,@r1
   08D7 09                 2198 	inc	r1
   08D8 87 02              2199 	mov	ar2,@r1
   08DA 09                 2200 	inc	r1
   08DB 87 03              2201 	mov	ar3,@r1
   08DD 09                 2202 	inc	r1
   08DE 87 06              2203 	mov	ar6,@r1
   08E0 E5*00              2204 	mov	a,_bp
   08E2 24 38              2205 	add	a,#0x38
   08E4 F8                 2206 	mov	r0,a
   08E5 EF                 2207 	mov	a,r7
   08E6 26                 2208 	add	a,@r0
   08E7 FF                 2209 	mov	r7,a
   08E8 EA                 2210 	mov	a,r2
   08E9 08                 2211 	inc	r0
   08EA 36                 2212 	addc	a,@r0
   08EB FA                 2213 	mov	r2,a
   08EC 08                 2214 	inc	r0
   08ED 86 03              2215 	mov	ar3,@r0
   08EF 8F 82              2216 	mov	dpl,r7
   08F1 8A 83              2217 	mov	dph,r2
   08F3 8B F0              2218 	mov	b,r3
   08F5 80 10              2219 	sjmp	00109$
   08F7                    2220 00107$:
                           2221 ;	../../../core/loader/elfloader.c:301: for(a = symtab; a < symtab + size; a += sizeof(s)) {
   08F7 74 10              2222 	mov	a,#0x10
   08F9 2C                 2223 	add	a,r4
   08FA FC                 2224 	mov	r4,a
   08FB E4                 2225 	clr	a
   08FC 3D                 2226 	addc	a,r5
   08FD FD                 2227 	mov	r5,a
   08FE 02s07rAF           2228 	ljmp	00105$
   0901                    2229 00108$:
                           2230 ;	../../../core/loader/elfloader.c:311: return NULL;
   0901 90 00 00           2231 	mov	dptr,#0x0000
   0904 75 F0 00           2232 	mov	b,#0x00
   0907                    2233 00109$:
   0907 85*00 81           2234 	mov	sp,_bp
   090A D0*00              2235 	pop	_bp
   090C 22                 2236 	ret
                           2237 ;------------------------------------------------------------
                           2238 ;Allocation info for local variables in function 'elfloader_init'
                           2239 ;------------------------------------------------------------
                           2240 ;------------------------------------------------------------
                           2241 ;	../../../core/loader/elfloader.c:316: elfloader_init(void)
                           2242 ;	-----------------------------------------
                           2243 ;	 function elfloader_init
                           2244 ;	-----------------------------------------
   090D                    2245 _elfloader_init:
                           2246 ;	../../../core/loader/elfloader.c:318: elfloader_autostart_processes = NULL;
   090D 90s00r1E           2247 	mov	dptr,#_elfloader_autostart_processes
   0910 E4                 2248 	clr	a
   0911 F0                 2249 	movx	@dptr,a
   0912 A3                 2250 	inc	dptr
   0913 F0                 2251 	movx	@dptr,a
   0914 A3                 2252 	inc	dptr
   0915 F0                 2253 	movx	@dptr,a
   0916 22                 2254 	ret
                           2255 ;------------------------------------------------------------
                           2256 ;Allocation info for local variables in function 'elfloader_load'
                           2257 ;------------------------------------------------------------
                           2258 ;fd                        Allocated to stack - offset 1
                           2259 ;ehdr                      Allocated to stack - offset 3
                           2260 ;shdr                      Allocated to stack - offset 55
                           2261 ;strtable                  Allocated to stack - offset 95
                           2262 ;strs                      Allocated to stack - offset 135
                           2263 ;shdrptr                   Allocated to stack - offset 137
                           2264 ;nameptr                   Allocated to registers r5 r3 
                           2265 ;name                      Allocated to stack - offset 139
                           2266 ;i                         Allocated to stack - offset 151
                           2267 ;shdrnum                   Allocated to stack - offset 153
                           2268 ;shdrsize                  Allocated to stack - offset 155
                           2269 ;using_relas               Allocated to stack - offset 157
                           2270 ;textoff                   Allocated to stack - offset 158
                           2271 ;textsize                  Allocated to stack - offset 160
                           2272 ;textrelaoff               Allocated to registers r7 r4 
                           2273 ;textrelasize              Allocated to stack - offset 192
                           2274 ;dataoff                   Allocated to stack - offset 162
                           2275 ;datasize                  Allocated to stack - offset 190
                           2276 ;datarelaoff               Allocated to stack - offset 172
                           2277 ;datarelasize              Allocated to stack - offset 188
                           2278 ;rodataoff                 Allocated to stack - offset 164
                           2279 ;rodatasize                Allocated to stack - offset 186
                           2280 ;rodatarelaoff             Allocated to stack - offset 174
                           2281 ;rodatarelasize            Allocated to stack - offset 178
                           2282 ;symtaboff                 Allocated to stack - offset 166
                           2283 ;symtabsize                Allocated to stack - offset 168
                           2284 ;strtaboff                 Allocated to stack - offset 170
                           2285 ;strtabsize                Allocated to stack - offset 182
                           2286 ;bsssize                   Allocated to stack - offset 176
                           2287 ;process                   Allocated to registers r2 r3 r4 
                           2288 ;ret                       Allocated to registers r2 r3 
                           2289 ;sloc0                     Allocated to stack - offset 172
                           2290 ;sloc1                     Allocated to stack - offset 174
                           2291 ;sloc2                     Allocated to stack - offset 176
                           2292 ;sloc3                     Allocated to stack - offset 178
                           2293 ;sloc4                     Allocated to stack - offset 181
                           2294 ;sloc5                     Allocated to stack - offset 182
                           2295 ;sloc6                     Allocated to stack - offset 186
                           2296 ;sloc7                     Allocated to stack - offset 188
                           2297 ;sloc8                     Allocated to stack - offset 190
                           2298 ;sloc9                     Allocated to stack - offset 192
                           2299 ;sloc10                    Allocated to stack - offset 194
                           2300 ;sloc11                    Allocated to stack - offset 195
                           2301 ;sloc12                    Allocated to stack - offset 196
                           2302 ;sloc13                    Allocated to stack - offset 197
                           2303 ;sloc14                    Allocated to stack - offset 198
                           2304 ;sloc15                    Allocated to stack - offset 199
                           2305 ;sloc16                    Allocated to stack - offset 200
                           2306 ;sloc17                    Allocated to stack - offset 201
                           2307 ;sloc18                    Allocated to stack - offset 202
                           2308 ;sloc19                    Allocated to stack - offset 203
                           2309 ;sloc20                    Allocated to stack - offset 204
                           2310 ;sloc21                    Allocated to stack - offset 205
                           2311 ;sloc22                    Allocated to stack - offset 206
                           2312 ;sloc23                    Allocated to stack - offset 207
                           2313 ;sloc24                    Allocated to stack - offset 208
                           2314 ;sloc25                    Allocated to stack - offset 209
                           2315 ;sloc26                    Allocated to stack - offset 210
                           2316 ;sloc27                    Allocated to stack - offset 211
                           2317 ;sloc28                    Allocated to stack - offset 212
                           2318 ;sloc29                    Allocated to stack - offset 213
                           2319 ;sloc30                    Allocated to stack - offset 214
                           2320 ;sloc31                    Allocated to stack - offset 215
                           2321 ;sloc32                    Allocated to stack - offset 216
                           2322 ;sloc33                    Allocated to stack - offset 217
                           2323 ;sloc34                    Allocated to stack - offset 218
                           2324 ;sloc35                    Allocated to stack - offset 219
                           2325 ;sloc36                    Allocated to stack - offset 220
                           2326 ;sloc37                    Allocated to stack - offset 221
                           2327 ;sloc38                    Allocated to stack - offset 222
                           2328 ;sloc39                    Allocated to stack - offset 223
                           2329 ;sloc40                    Allocated to stack - offset 251
                           2330 ;sloc41                    Allocated to stack - offset 224
                           2331 ;sloc42                    Allocated to stack - offset 228
                           2332 ;------------------------------------------------------------
                           2333 ;	../../../core/loader/elfloader.c:338: elfloader_load(int fd)
                           2334 ;	-----------------------------------------
                           2335 ;	 function elfloader_load
                           2336 ;	-----------------------------------------
   0917                    2337 _elfloader_load:
   0917 C0*00              2338 	push	_bp
   0919 85 81*00           2339 	mov	_bp,sp
   091C C0 82              2340 	push	dpl
   091E C0 83              2341 	push	dph
   0920 E5 81              2342 	mov	a,sp
   0922 24 E4              2343 	add	a,#0xe4
   0924 F5 81              2344 	mov	sp,a
                           2345 ;	../../../core/loader/elfloader.c:351: unsigned char using_relas = -1;
   0926 E5*00              2346 	mov	a,_bp
   0928 24 9D              2347 	add	a,#0x9d
   092A F8                 2348 	mov	r0,a
   092B 76 FF              2349 	mov	@r0,#0xFF
                           2350 ;	../../../core/loader/elfloader.c:352: unsigned short textoff = 0, textsize, textrelaoff = 0, textrelasize;
   092D E5*00              2351 	mov	a,_bp
   092F 24 9E              2352 	add	a,#0x9e
   0931 F8                 2353 	mov	r0,a
   0932 E4                 2354 	clr	a
   0933 F6                 2355 	mov	@r0,a
   0934 08                 2356 	inc	r0
   0935 F6                 2357 	mov	@r0,a
                           2358 ;	../../../core/loader/elfloader.c:353: unsigned short dataoff = 0, datasize, datarelaoff = 0, datarelasize;
   0936 E4                 2359 	clr	a
   0937 FF                 2360 	mov	r7,a
   0938 FC                 2361 	mov	r4,a
   0939 E5*00              2362 	mov	a,_bp
   093B 24 A2              2363 	add	a,#0xa2
   093D F8                 2364 	mov	r0,a
   093E E4                 2365 	clr	a
   093F F6                 2366 	mov	@r0,a
   0940 08                 2367 	inc	r0
   0941 F6                 2368 	mov	@r0,a
   0942 E5*00              2369 	mov	a,_bp
   0944 24 AC              2370 	add	a,#0xac
   0946 F8                 2371 	mov	r0,a
   0947 E4                 2372 	clr	a
   0948 F6                 2373 	mov	@r0,a
   0949 08                 2374 	inc	r0
   094A F6                 2375 	mov	@r0,a
                           2376 ;	../../../core/loader/elfloader.c:354: unsigned short rodataoff = 0, rodatasize, rodatarelaoff = 0, rodatarelasize;
   094B E5*00              2377 	mov	a,_bp
   094D 24 A4              2378 	add	a,#0xa4
   094F F8                 2379 	mov	r0,a
   0950 E4                 2380 	clr	a
   0951 F6                 2381 	mov	@r0,a
   0952 08                 2382 	inc	r0
   0953 F6                 2383 	mov	@r0,a
   0954 E5*00              2384 	mov	a,_bp
   0956 24 AE              2385 	add	a,#0xae
   0958 F8                 2386 	mov	r0,a
   0959 E4                 2387 	clr	a
   095A F6                 2388 	mov	@r0,a
   095B 08                 2389 	inc	r0
   095C F6                 2390 	mov	@r0,a
                           2391 ;	../../../core/loader/elfloader.c:355: unsigned short symtaboff = 0, symtabsize;
   095D E5*00              2392 	mov	a,_bp
   095F 24 A6              2393 	add	a,#0xa6
   0961 F8                 2394 	mov	r0,a
   0962 E4                 2395 	clr	a
   0963 F6                 2396 	mov	@r0,a
   0964 08                 2397 	inc	r0
   0965 F6                 2398 	mov	@r0,a
                           2399 ;	../../../core/loader/elfloader.c:356: unsigned short strtaboff = 0, strtabsize;
   0966 E5*00              2400 	mov	a,_bp
   0968 24 AA              2401 	add	a,#0xaa
   096A F8                 2402 	mov	r0,a
   096B E4                 2403 	clr	a
   096C F6                 2404 	mov	@r0,a
   096D 08                 2405 	inc	r0
   096E F6                 2406 	mov	@r0,a
                           2407 ;	../../../core/loader/elfloader.c:357: unsigned short bsssize = 0;
   096F E5*00              2408 	mov	a,_bp
   0971 24 B0              2409 	add	a,#0xb0
   0973 F8                 2410 	mov	r0,a
   0974 E4                 2411 	clr	a
   0975 F6                 2412 	mov	@r0,a
   0976 08                 2413 	inc	r0
   0977 F6                 2414 	mov	@r0,a
                           2415 ;	../../../core/loader/elfloader.c:362: elfloader_unknown[0] = 0;
   0978 90s00r00           2416 	mov	dptr,#_elfloader_unknown
   097B E4                 2417 	clr	a
   097C F0                 2418 	movx	@dptr,a
                           2419 ;	../../../core/loader/elfloader.c:365: seek_read(fd, 0, (char *)&ehdr, sizeof(ehdr));
   097D E5*00              2420 	mov	a,_bp
   097F 24 03              2421 	add	a,#0x03
   0981 FD                 2422 	mov	r5,a
   0982 7E 00              2423 	mov	r6,#0x00
   0984 7A 40              2424 	mov	r2,#0x40
   0986 C0 04              2425 	push	ar4
   0988 C0 07              2426 	push	ar7
   098A 74 34              2427 	mov	a,#0x34
   098C C0 E0              2428 	push	acc
   098E E4                 2429 	clr	a
   098F C0 E0              2430 	push	acc
   0991 C0 05              2431 	push	ar5
   0993 C0 06              2432 	push	ar6
   0995 C0 02              2433 	push	ar2
   0997 E4                 2434 	clr	a
   0998 C0 E0              2435 	push	acc
   099A C0 E0              2436 	push	acc
   099C A8*00              2437 	mov	r0,_bp
   099E 08                 2438 	inc	r0
   099F 86 82              2439 	mov	dpl,@r0
   09A1 08                 2440 	inc	r0
   09A2 86 83              2441 	mov	dph,@r0
   09A4 12s00r00           2442 	lcall	_seek_read
   09A7 E5 81              2443 	mov	a,sp
   09A9 24 F9              2444 	add	a,#0xf9
   09AB F5 81              2445 	mov	sp,a
                           2446 ;	../../../core/loader/elfloader.c:370: if(memcmp(ehdr.e_ident, elf_magic_header, sizeof(elf_magic_header)) != 0) {
   09AD E5*00              2447 	mov	a,_bp
   09AF 24 03              2448 	add	a,#0x03
   09B1 FA                 2449 	mov	r2,a
   09B2 7B 00              2450 	mov	r3,#0x00
   09B4 7D 40              2451 	mov	r5,#0x40
   09B6 74 07              2452 	mov	a,#0x07
   09B8 C0 E0              2453 	push	acc
   09BA E4                 2454 	clr	a
   09BB C0 E0              2455 	push	acc
   09BD 74r00              2456 	mov	a,#_elf_magic_header
   09BF C0 E0              2457 	push	acc
   09C1 74s00              2458 	mov	a,#(_elf_magic_header >> 8)
   09C3 C0 E0              2459 	push	acc
   09C5 74 80              2460 	mov	a,#0x80
   09C7 C0 E0              2461 	push	acc
   09C9 8A 82              2462 	mov	dpl,r2
   09CB 8B 83              2463 	mov	dph,r3
   09CD 8D F0              2464 	mov	b,r5
   09CF 12s00r00           2465 	lcall	_memcmp
   09D2 AA 82              2466 	mov	r2,dpl
   09D4 AB 83              2467 	mov	r3,dph
   09D6 E5 81              2468 	mov	a,sp
   09D8 24 FB              2469 	add	a,#0xfb
   09DA F5 81              2470 	mov	sp,a
   09DC D0 07              2471 	pop	ar7
   09DE D0 04              2472 	pop	ar4
   09E0 EA                 2473 	mov	a,r2
   09E1 4B                 2474 	orl	a,r3
   09E2 60 06              2475 	jz	00104$
                           2476 ;	../../../core/loader/elfloader.c:372: return ELFLOADER_BAD_ELF_HEADER;
   09E4 90 00 01           2477 	mov	dptr,#0x0001
   09E7 02s19r4F           2478 	ljmp	00207$
   09EA                    2479 00104$:
                           2480 ;	../../../core/loader/elfloader.c:376: shdrptr = ehdr.e_shoff;
   09EA C0 07              2481 	push	ar7
   09EC C0 04              2482 	push	ar4
   09EE E5*00              2483 	mov	a,_bp
   09F0 24 03              2484 	add	a,#0x03
   09F2 24 20              2485 	add	a,#0x20
   09F4 F8                 2486 	mov	r0,a
   09F5 86 02              2487 	mov	ar2,@r0
   09F7 08                 2488 	inc	r0
   09F8 86 03              2489 	mov	ar3,@r0
   09FA 08                 2490 	inc	r0
   09FB 86 05              2491 	mov	ar5,@r0
   09FD 08                 2492 	inc	r0
   09FE 86 06              2493 	mov	ar6,@r0
   0A00 E5*00              2494 	mov	a,_bp
   0A02 24 89              2495 	add	a,#0x89
   0A04 F8                 2496 	mov	r0,a
   0A05 A6 02              2497 	mov	@r0,ar2
   0A07 08                 2498 	inc	r0
   0A08 A6 03              2499 	mov	@r0,ar3
                           2500 ;	../../../core/loader/elfloader.c:377: seek_read(fd, shdrptr, (char *)&shdr, sizeof(shdr));
   0A0A E5*00              2501 	mov	a,_bp
   0A0C 24 37              2502 	add	a,#0x37
   0A0E FD                 2503 	mov	r5,a
   0A0F 7E 00              2504 	mov	r6,#0x00
   0A11 7C 40              2505 	mov	r4,#0x40
   0A13 C0 04              2506 	push	ar4
   0A15 C0 07              2507 	push	ar7
   0A17 74 28              2508 	mov	a,#0x28
   0A19 C0 E0              2509 	push	acc
   0A1B E4                 2510 	clr	a
   0A1C C0 E0              2511 	push	acc
   0A1E C0 05              2512 	push	ar5
   0A20 C0 06              2513 	push	ar6
   0A22 C0 04              2514 	push	ar4
   0A24 E5*00              2515 	mov	a,_bp
   0A26 24 89              2516 	add	a,#0x89
   0A28 F8                 2517 	mov	r0,a
   0A29 E6                 2518 	mov	a,@r0
   0A2A C0 E0              2519 	push	acc
   0A2C 08                 2520 	inc	r0
   0A2D E6                 2521 	mov	a,@r0
   0A2E C0 E0              2522 	push	acc
   0A30 A8*00              2523 	mov	r0,_bp
   0A32 08                 2524 	inc	r0
   0A33 86 82              2525 	mov	dpl,@r0
   0A35 08                 2526 	inc	r0
   0A36 86 83              2527 	mov	dph,@r0
   0A38 12s00r00           2528 	lcall	_seek_read
   0A3B E5 81              2529 	mov	a,sp
   0A3D 24 F9              2530 	add	a,#0xf9
   0A3F F5 81              2531 	mov	sp,a
   0A41 D0 07              2532 	pop	ar7
   0A43 D0 04              2533 	pop	ar4
                           2534 ;	../../../core/loader/elfloader.c:380: shdrsize = ehdr.e_shentsize;
   0A45 E5*00              2535 	mov	a,_bp
   0A47 24 03              2536 	add	a,#0x03
   0A49 FA                 2537 	mov	r2,a
   0A4A 24 2E              2538 	add	a,#0x2E
   0A4C F8                 2539 	mov	r0,a
   0A4D 86 05              2540 	mov	ar5,@r0
   0A4F 08                 2541 	inc	r0
   0A50 86 06              2542 	mov	ar6,@r0
   0A52 E5*00              2543 	mov	a,_bp
   0A54 24 9B              2544 	add	a,#0x9b
   0A56 F8                 2545 	mov	r0,a
   0A57 A6 05              2546 	mov	@r0,ar5
   0A59 08                 2547 	inc	r0
   0A5A A6 06              2548 	mov	@r0,ar6
                           2549 ;	../../../core/loader/elfloader.c:381: shdrnum = ehdr.e_shnum;
   0A5C 74 30              2550 	mov	a,#0x30
   0A5E 2A                 2551 	add	a,r2
   0A5F F8                 2552 	mov	r0,a
   0A60 86 05              2553 	mov	ar5,@r0
   0A62 08                 2554 	inc	r0
   0A63 86 06              2555 	mov	ar6,@r0
   0A65 E5*00              2556 	mov	a,_bp
   0A67 24 99              2557 	add	a,#0x99
   0A69 F8                 2558 	mov	r0,a
   0A6A A6 05              2559 	mov	@r0,ar5
   0A6C 08                 2560 	inc	r0
   0A6D A6 06              2561 	mov	@r0,ar6
                           2562 ;	../../../core/loader/elfloader.c:387: (char *)&strtable, sizeof(strtable));
   0A6F E5*00              2563 	mov	a,_bp
   0A71 24 5F              2564 	add	a,#0x5f
   0A73 FD                 2565 	mov	r5,a
   0A74 E5*00              2566 	mov	a,_bp
   0A76 24 B2              2567 	add	a,#0xb2
   0A78 F8                 2568 	mov	r0,a
   0A79 A6 05              2569 	mov	@r0,ar5
   0A7B 08                 2570 	inc	r0
   0A7C 76 00              2571 	mov	@r0,#0x00
   0A7E 08                 2572 	inc	r0
   0A7F 76 40              2573 	mov	@r0,#0x40
                           2574 ;	../../../core/loader/elfloader.c:386: seek_read(fd, ehdr.e_shoff + shdrsize * ehdr.e_shstrndx,
   0A81 74 20              2575 	mov	a,#0x20
   0A83 2A                 2576 	add	a,r2
   0A84 F8                 2577 	mov	r0,a
   0A85 E5*00              2578 	mov	a,_bp
   0A87 24 B6              2579 	add	a,#0xb6
   0A89 F9                 2580 	mov	r1,a
   0A8A E6                 2581 	mov	a,@r0
   0A8B F7                 2582 	mov	@r1,a
   0A8C 08                 2583 	inc	r0
   0A8D E6                 2584 	mov	a,@r0
   0A8E 09                 2585 	inc	r1
   0A8F F7                 2586 	mov	@r1,a
   0A90 08                 2587 	inc	r0
   0A91 E6                 2588 	mov	a,@r0
   0A92 09                 2589 	inc	r1
   0A93 F7                 2590 	mov	@r1,a
   0A94 08                 2591 	inc	r0
   0A95 E6                 2592 	mov	a,@r0
   0A96 09                 2593 	inc	r1
   0A97 F7                 2594 	mov	@r1,a
   0A98 74 32              2595 	mov	a,#0x32
   0A9A 2A                 2596 	add	a,r2
   0A9B F8                 2597 	mov	r0,a
   0A9C 86 04              2598 	mov	ar4,@r0
   0A9E 08                 2599 	inc	r0
   0A9F 86 05              2600 	mov	ar5,@r0
   0AA1 C0 07              2601 	push	ar7
   0AA3 C0 04              2602 	push	ar4
   0AA5 C0 05              2603 	push	ar5
   0AA7 E5*00              2604 	mov	a,_bp
   0AA9 24 9B              2605 	add	a,#0x9b
   0AAB F8                 2606 	mov	r0,a
   0AAC 86 82              2607 	mov	dpl,@r0
   0AAE 08                 2608 	inc	r0
   0AAF 86 83              2609 	mov	dph,@r0
   0AB1 12s00r00           2610 	lcall	__mulint
   0AB4 AC 82              2611 	mov	r4,dpl
   0AB6 AD 83              2612 	mov	r5,dph
   0AB8 15 81              2613 	dec	sp
   0ABA 15 81              2614 	dec	sp
   0ABC D0 07              2615 	pop	ar7
   0ABE E4                 2616 	clr	a
   0ABF FE                 2617 	mov	r6,a
   0AC0 FF                 2618 	mov	r7,a
   0AC1 E5*00              2619 	mov	a,_bp
   0AC3 24 B6              2620 	add	a,#0xb6
   0AC5 F8                 2621 	mov	r0,a
   0AC6 EC                 2622 	mov	a,r4
   0AC7 26                 2623 	add	a,@r0
   0AC8 FC                 2624 	mov	r4,a
   0AC9 ED                 2625 	mov	a,r5
   0ACA 08                 2626 	inc	r0
   0ACB 36                 2627 	addc	a,@r0
   0ACC FD                 2628 	mov	r5,a
   0ACD EE                 2629 	mov	a,r6
   0ACE 08                 2630 	inc	r0
   0ACF 36                 2631 	addc	a,@r0
   0AD0 EF                 2632 	mov	a,r7
   0AD1 08                 2633 	inc	r0
   0AD2 36                 2634 	addc	a,@r0
   0AD3 FF                 2635 	mov	r7,a
   0AD4 C0 04              2636 	push	ar4
   0AD6 C0 07              2637 	push	ar7
   0AD8 74 28              2638 	mov	a,#0x28
   0ADA C0 E0              2639 	push	acc
   0ADC E4                 2640 	clr	a
   0ADD C0 E0              2641 	push	acc
   0ADF E5*00              2642 	mov	a,_bp
   0AE1 24 B2              2643 	add	a,#0xb2
   0AE3 F8                 2644 	mov	r0,a
   0AE4 E6                 2645 	mov	a,@r0
   0AE5 C0 E0              2646 	push	acc
   0AE7 08                 2647 	inc	r0
   0AE8 E6                 2648 	mov	a,@r0
   0AE9 C0 E0              2649 	push	acc
   0AEB 08                 2650 	inc	r0
   0AEC E6                 2651 	mov	a,@r0
   0AED C0 E0              2652 	push	acc
   0AEF C0 04              2653 	push	ar4
   0AF1 C0 05              2654 	push	ar5
   0AF3 A8*00              2655 	mov	r0,_bp
   0AF5 08                 2656 	inc	r0
   0AF6 86 82              2657 	mov	dpl,@r0
   0AF8 08                 2658 	inc	r0
   0AF9 86 83              2659 	mov	dph,@r0
   0AFB 12s00r00           2660 	lcall	_seek_read
   0AFE E5 81              2661 	mov	a,sp
   0B00 24 F9              2662 	add	a,#0xf9
   0B02 F5 81              2663 	mov	sp,a
   0B04 D0 07              2664 	pop	ar7
   0B06 D0 04              2665 	pop	ar4
                           2666 ;	../../../core/loader/elfloader.c:392: strs = strtable.sh_offset;
   0B08 E5*00              2667 	mov	a,_bp
   0B0A 24 5F              2668 	add	a,#0x5f
   0B0C 24 10              2669 	add	a,#0x10
   0B0E F8                 2670 	mov	r0,a
   0B0F 86 04              2671 	mov	ar4,@r0
   0B11 08                 2672 	inc	r0
   0B12 86 05              2673 	mov	ar5,@r0
   0B14 08                 2674 	inc	r0
   0B15 86 06              2675 	mov	ar6,@r0
   0B17 08                 2676 	inc	r0
   0B18 86 07              2677 	mov	ar7,@r0
   0B1A E5*00              2678 	mov	a,_bp
   0B1C 24 87              2679 	add	a,#0x87
   0B1E F8                 2680 	mov	r0,a
   0B1F A6 04              2681 	mov	@r0,ar4
   0B21 08                 2682 	inc	r0
   0B22 A6 05              2683 	mov	@r0,ar5
                           2684 ;	../../../core/loader/elfloader.c:415: rodatasize = rodatarelasize = symtabsize = strtabsize = 0;
   0B24 E5*00              2685 	mov	a,_bp
   0B26 24 B6              2686 	add	a,#0xb6
   0B28 F8                 2687 	mov	r0,a
   0B29 E4                 2688 	clr	a
   0B2A F6                 2689 	mov	@r0,a
   0B2B 08                 2690 	inc	r0
   0B2C F6                 2691 	mov	@r0,a
   0B2D E5*00              2692 	mov	a,_bp
   0B2F 24 A8              2693 	add	a,#0xa8
   0B31 F8                 2694 	mov	r0,a
   0B32 E4                 2695 	clr	a
   0B33 F6                 2696 	mov	@r0,a
   0B34 08                 2697 	inc	r0
   0B35 F6                 2698 	mov	@r0,a
   0B36 E5*00              2699 	mov	a,_bp
   0B38 24 B2              2700 	add	a,#0xb2
   0B3A F8                 2701 	mov	r0,a
   0B3B E4                 2702 	clr	a
   0B3C F6                 2703 	mov	@r0,a
   0B3D 08                 2704 	inc	r0
   0B3E F6                 2705 	mov	@r0,a
   0B3F E5*00              2706 	mov	a,_bp
   0B41 24 BA              2707 	add	a,#0xba
   0B43 F8                 2708 	mov	r0,a
   0B44 E4                 2709 	clr	a
   0B45 F6                 2710 	mov	@r0,a
   0B46 08                 2711 	inc	r0
   0B47 F6                 2712 	mov	@r0,a
   0B48 E5*00              2713 	mov	a,_bp
   0B4A 24 BC              2714 	add	a,#0xbc
   0B4C F8                 2715 	mov	r0,a
   0B4D E4                 2716 	clr	a
   0B4E F6                 2717 	mov	@r0,a
   0B4F 08                 2718 	inc	r0
   0B50 F6                 2719 	mov	@r0,a
   0B51 E5*00              2720 	mov	a,_bp
   0B53 24 BE              2721 	add	a,#0xbe
   0B55 F8                 2722 	mov	r0,a
   0B56 E4                 2723 	clr	a
   0B57 F6                 2724 	mov	@r0,a
   0B58 08                 2725 	inc	r0
   0B59 F6                 2726 	mov	@r0,a
   0B5A E5*00              2727 	mov	a,_bp
   0B5C 24 C0              2728 	add	a,#0xc0
   0B5E F8                 2729 	mov	r0,a
   0B5F E4                 2730 	clr	a
   0B60 F6                 2731 	mov	@r0,a
   0B61 08                 2732 	inc	r0
   0B62 F6                 2733 	mov	@r0,a
   0B63 E5*00              2734 	mov	a,_bp
   0B65 24 A0              2735 	add	a,#0xa0
   0B67 F8                 2736 	mov	r0,a
   0B68 E4                 2737 	clr	a
   0B69 F6                 2738 	mov	@r0,a
   0B6A 08                 2739 	inc	r0
   0B6B F6                 2740 	mov	@r0,a
                           2741 ;	../../../core/loader/elfloader.c:417: bss.number = data.number = rodata.number = text.number = -1;
   0B6C 90s00r33           2742 	mov	dptr,#_text
   0B6F 74 FF              2743 	mov	a,#0xFF
   0B71 F0                 2744 	movx	@dptr,a
   0B72 90s00r2D           2745 	mov	dptr,#_rodata
   0B75 74 FF              2746 	mov	a,#0xFF
   0B77 F0                 2747 	movx	@dptr,a
   0B78 90s00r27           2748 	mov	dptr,#_data
   0B7B 74 FF              2749 	mov	a,#0xFF
   0B7D F0                 2750 	movx	@dptr,a
   0B7E 90s00r21           2751 	mov	dptr,#_bss
   0B81 74 FF              2752 	mov	a,#0xFF
   0B83 F0                 2753 	movx	@dptr,a
                           2754 ;	../../../core/loader/elfloader.c:419: shdrptr = ehdr.e_shoff;
   0B84 E5*00              2755 	mov	a,_bp
   0B86 24 03              2756 	add	a,#0x03
   0B88 24 20              2757 	add	a,#0x20
   0B8A F8                 2758 	mov	r0,a
   0B8B 86 04              2759 	mov	ar4,@r0
   0B8D 08                 2760 	inc	r0
   0B8E 86 05              2761 	mov	ar5,@r0
   0B90 08                 2762 	inc	r0
   0B91 86 06              2763 	mov	ar6,@r0
   0B93 08                 2764 	inc	r0
   0B94 86 07              2765 	mov	ar7,@r0
   0B96 E5*00              2766 	mov	a,_bp
   0B98 24 89              2767 	add	a,#0x89
   0B9A F8                 2768 	mov	r0,a
   0B9B A6 04              2769 	mov	@r0,ar4
   0B9D 08                 2770 	inc	r0
   0B9E A6 05              2771 	mov	@r0,ar5
                           2772 ;	../../../core/loader/elfloader.c:586: return ELFLOADER_NO_STARTPOINT;
   0BA0 D0 04              2773 	pop	ar4
   0BA2 D0 07              2774 	pop	ar7
                           2775 ;	../../../core/loader/elfloader.c:420: for(i = 0; i < shdrnum; ++i) {
   0BA4 E5*00              2776 	mov	a,_bp
   0BA6 24 E4              2777 	add	a,#0xe4
   0BA8 F8                 2778 	mov	r0,a
   0BA9 E5*00              2779 	mov	a,_bp
   0BAB 24 8B              2780 	add	a,#0x8b
   0BAD F6                 2781 	mov	@r0,a
   0BAE E5*00              2782 	mov	a,_bp
   0BB0 24 37              2783 	add	a,#0x37
   0BB2 FE                 2784 	mov	r6,a
   0BB3 24 04              2785 	add	a,#0x04
   0BB5 F8                 2786 	mov	r0,a
   0BB6 E5*00              2787 	mov	a,_bp
   0BB8 24 E4              2788 	add	a,#0xe4
   0BBA F9                 2789 	mov	r1,a
   0BBB C0 00              2790 	push	ar0
   0BBD E5*00              2791 	mov	a,_bp
   0BBF 24 B5              2792 	add	a,#0xb5
   0BC1 F8                 2793 	mov	r0,a
   0BC2 E7                 2794 	mov	a,@r1
   0BC3 F6                 2795 	mov	@r0,a
   0BC4 E5*00              2796 	mov	a,_bp
   0BC6 24 E4              2797 	add	a,#0xe4
   0BC8 F9                 2798 	mov	r1,a
   0BC9 E5*00              2799 	mov	a,_bp
   0BCB 24 C2              2800 	add	a,#0xc2
   0BCD F8                 2801 	mov	r0,a
   0BCE E7                 2802 	mov	a,@r1
   0BCF F6                 2803 	mov	@r0,a
   0BD0 E5*00              2804 	mov	a,_bp
   0BD2 24 E4              2805 	add	a,#0xe4
   0BD4 F9                 2806 	mov	r1,a
   0BD5 E5*00              2807 	mov	a,_bp
   0BD7 24 C3              2808 	add	a,#0xc3
   0BD9 F8                 2809 	mov	r0,a
   0BDA E7                 2810 	mov	a,@r1
   0BDB F6                 2811 	mov	@r0,a
   0BDC E5*00              2812 	mov	a,_bp
   0BDE 24 E4              2813 	add	a,#0xe4
   0BE0 F9                 2814 	mov	r1,a
   0BE1 E5*00              2815 	mov	a,_bp
   0BE3 24 C4              2816 	add	a,#0xc4
   0BE5 F8                 2817 	mov	r0,a
   0BE6 E7                 2818 	mov	a,@r1
   0BE7 F6                 2819 	mov	@r0,a
   0BE8 E5*00              2820 	mov	a,_bp
   0BEA 24 E4              2821 	add	a,#0xe4
   0BEC F9                 2822 	mov	r1,a
   0BED E5*00              2823 	mov	a,_bp
   0BEF 24 C5              2824 	add	a,#0xc5
   0BF1 F8                 2825 	mov	r0,a
   0BF2 E7                 2826 	mov	a,@r1
   0BF3 F6                 2827 	mov	@r0,a
   0BF4 E5*00              2828 	mov	a,_bp
   0BF6 24 E4              2829 	add	a,#0xe4
   0BF8 F9                 2830 	mov	r1,a
   0BF9 E5*00              2831 	mov	a,_bp
   0BFB 24 C6              2832 	add	a,#0xc6
   0BFD F8                 2833 	mov	r0,a
   0BFE E7                 2834 	mov	a,@r1
   0BFF F6                 2835 	mov	@r0,a
   0C00 E5*00              2836 	mov	a,_bp
   0C02 24 E4              2837 	add	a,#0xe4
   0C04 F9                 2838 	mov	r1,a
   0C05 E5*00              2839 	mov	a,_bp
   0C07 24 C7              2840 	add	a,#0xc7
   0C09 F8                 2841 	mov	r0,a
   0C0A E7                 2842 	mov	a,@r1
   0C0B F6                 2843 	mov	@r0,a
   0C0C E5*00              2844 	mov	a,_bp
   0C0E 24 E4              2845 	add	a,#0xe4
   0C10 F9                 2846 	mov	r1,a
   0C11 E5*00              2847 	mov	a,_bp
   0C13 24 C8              2848 	add	a,#0xc8
   0C15 F8                 2849 	mov	r0,a
   0C16 E7                 2850 	mov	a,@r1
   0C17 F6                 2851 	mov	@r0,a
   0C18 E5*00              2852 	mov	a,_bp
   0C1A 24 E4              2853 	add	a,#0xe4
   0C1C F9                 2854 	mov	r1,a
   0C1D E5*00              2855 	mov	a,_bp
   0C1F 24 C9              2856 	add	a,#0xc9
   0C21 F8                 2857 	mov	r0,a
   0C22 E7                 2858 	mov	a,@r1
   0C23 F6                 2859 	mov	@r0,a
   0C24 74 14              2860 	mov	a,#0x14
   0C26 2E                 2861 	add	a,r6
   0C27 F9                 2862 	mov	r1,a
   0C28 E5*00              2863 	mov	a,_bp
   0C2A 24 E4              2864 	add	a,#0xe4
   0C2C F8                 2865 	mov	r0,a
   0C2D C0 01              2866 	push	ar1
   0C2F E5*00              2867 	mov	a,_bp
   0C31 24 CA              2868 	add	a,#0xca
   0C33 F9                 2869 	mov	r1,a
   0C34 E6                 2870 	mov	a,@r0
   0C35 F7                 2871 	mov	@r1,a
   0C36 D0 01              2872 	pop	ar1
   0C38 74 10              2873 	mov	a,#0x10
   0C3A 2E                 2874 	add	a,r6
   0C3B FE                 2875 	mov	r6,a
   0C3C E5*00              2876 	mov	a,_bp
   0C3E 24 CB              2877 	add	a,#0xcb
   0C40 F8                 2878 	mov	r0,a
   0C41 A6 01              2879 	mov	@r0,ar1
   0C43 E5*00              2880 	mov	a,_bp
   0C45 24 CC              2881 	add	a,#0xcc
   0C47 F8                 2882 	mov	r0,a
   0C48 A6 06              2883 	mov	@r0,ar6
   0C4A E5*00              2884 	mov	a,_bp
   0C4C 24 CD              2885 	add	a,#0xcd
   0C4E F8                 2886 	mov	r0,a
   0C4F A6 01              2887 	mov	@r0,ar1
   0C51 E5*00              2888 	mov	a,_bp
   0C53 24 CE              2889 	add	a,#0xce
   0C55 F8                 2890 	mov	r0,a
   0C56 A6 06              2891 	mov	@r0,ar6
   0C58 E5*00              2892 	mov	a,_bp
   0C5A 24 CF              2893 	add	a,#0xcf
   0C5C F8                 2894 	mov	r0,a
   0C5D A6 01              2895 	mov	@r0,ar1
   0C5F E5*00              2896 	mov	a,_bp
   0C61 24 D0              2897 	add	a,#0xd0
   0C63 F8                 2898 	mov	r0,a
   0C64 A6 06              2899 	mov	@r0,ar6
   0C66 E5*00              2900 	mov	a,_bp
   0C68 24 D1              2901 	add	a,#0xd1
   0C6A F8                 2902 	mov	r0,a
   0C6B A6 01              2903 	mov	@r0,ar1
   0C6D E5*00              2904 	mov	a,_bp
   0C6F 24 D2              2905 	add	a,#0xd2
   0C71 F8                 2906 	mov	r0,a
   0C72 A6 06              2907 	mov	@r0,ar6
   0C74 E5*00              2908 	mov	a,_bp
   0C76 24 D3              2909 	add	a,#0xd3
   0C78 F8                 2910 	mov	r0,a
   0C79 A6 01              2911 	mov	@r0,ar1
   0C7B E5*00              2912 	mov	a,_bp
   0C7D 24 D4              2913 	add	a,#0xd4
   0C7F F8                 2914 	mov	r0,a
   0C80 A6 06              2915 	mov	@r0,ar6
   0C82 E5*00              2916 	mov	a,_bp
   0C84 24 D5              2917 	add	a,#0xd5
   0C86 F8                 2918 	mov	r0,a
   0C87 A6 01              2919 	mov	@r0,ar1
   0C89 E5*00              2920 	mov	a,_bp
   0C8B 24 D6              2921 	add	a,#0xd6
   0C8D F8                 2922 	mov	r0,a
   0C8E A6 06              2923 	mov	@r0,ar6
   0C90 E5*00              2924 	mov	a,_bp
   0C92 24 D7              2925 	add	a,#0xd7
   0C94 F8                 2926 	mov	r0,a
   0C95 A6 01              2927 	mov	@r0,ar1
   0C97 E5*00              2928 	mov	a,_bp
   0C99 24 D8              2929 	add	a,#0xd8
   0C9B F8                 2930 	mov	r0,a
   0C9C A6 06              2931 	mov	@r0,ar6
   0C9E E5*00              2932 	mov	a,_bp
   0CA0 24 D9              2933 	add	a,#0xd9
   0CA2 F8                 2934 	mov	r0,a
   0CA3 A6 01              2935 	mov	@r0,ar1
   0CA5 E5*00              2936 	mov	a,_bp
   0CA7 24 DA              2937 	add	a,#0xda
   0CA9 F8                 2938 	mov	r0,a
   0CAA A6 06              2939 	mov	@r0,ar6
   0CAC E5*00              2940 	mov	a,_bp
   0CAE 24 DB              2941 	add	a,#0xdb
   0CB0 F8                 2942 	mov	r0,a
   0CB1 A6 01              2943 	mov	@r0,ar1
   0CB3 E5*00              2944 	mov	a,_bp
   0CB5 24 DC              2945 	add	a,#0xdc
   0CB7 F8                 2946 	mov	r0,a
   0CB8 A6 06              2947 	mov	@r0,ar6
   0CBA E5*00              2948 	mov	a,_bp
   0CBC 24 DD              2949 	add	a,#0xdd
   0CBE F8                 2950 	mov	r0,a
   0CBF A6 01              2951 	mov	@r0,ar1
   0CC1 E5*00              2952 	mov	a,_bp
   0CC3 24 DE              2953 	add	a,#0xde
   0CC5 F8                 2954 	mov	r0,a
   0CC6 A6 06              2955 	mov	@r0,ar6
   0CC8 E5*00              2956 	mov	a,_bp
   0CCA 24 DF              2957 	add	a,#0xdf
   0CCC F8                 2958 	mov	r0,a
   0CCD A6 01              2959 	mov	@r0,ar1
   0CCF E5*00              2960 	mov	a,_bp
   0CD1 24 97              2961 	add	a,#0x97
   0CD3 F8                 2962 	mov	r0,a
   0CD4 E4                 2963 	clr	a
   0CD5 F6                 2964 	mov	@r0,a
   0CD6 08                 2965 	inc	r0
   0CD7 F6                 2966 	mov	@r0,a
   0CD8 D0 00              2967 	pop	ar0
   0CDA                    2968 00203$:
   0CDA C0 07              2969 	push	ar7
   0CDC C0 04              2970 	push	ar4
   0CDE C0 00              2971 	push	ar0
   0CE0 E5*00              2972 	mov	a,_bp
   0CE2 24 97              2973 	add	a,#0x97
   0CE4 F8                 2974 	mov	r0,a
   0CE5 86 04              2975 	mov	ar4,@r0
   0CE7 08                 2976 	inc	r0
   0CE8 86 07              2977 	mov	ar7,@r0
   0CEA E5*00              2978 	mov	a,_bp
   0CEC 24 99              2979 	add	a,#0x99
   0CEE F8                 2980 	mov	r0,a
   0CEF C3                 2981 	clr	c
   0CF0 EC                 2982 	mov	a,r4
   0CF1 96                 2983 	subb	a,@r0
   0CF2 EF                 2984 	mov	a,r7
   0CF3 08                 2985 	inc	r0
   0CF4 96                 2986 	subb	a,@r0
   0CF5 D0 00              2987 	pop	ar0
   0CF7 D0 04              2988 	pop	ar4
   0CF9 D0 07              2989 	pop	ar7
   0CFB 40 03              2990 	jc	00236$
   0CFD 02s15r4A           2991 	ljmp	00206$
   0D00                    2992 00236$:
                           2993 ;	../../../core/loader/elfloader.c:422: seek_read(fd, shdrptr, (char *)&shdr, sizeof(shdr));
   0D00 C0 07              2994 	push	ar7
   0D02 C0 04              2995 	push	ar4
   0D04 E5*00              2996 	mov	a,_bp
   0D06 24 37              2997 	add	a,#0x37
   0D08 FC                 2998 	mov	r4,a
   0D09 7F 00              2999 	mov	r7,#0x00
   0D0B 7A 40              3000 	mov	r2,#0x40
   0D0D C0 04              3001 	push	ar4
   0D0F C0 06              3002 	push	ar6
   0D11 C0 07              3003 	push	ar7
   0D13 C0 00              3004 	push	ar0
   0D15 C0 01              3005 	push	ar1
   0D17 74 28              3006 	mov	a,#0x28
   0D19 C0 E0              3007 	push	acc
   0D1B E4                 3008 	clr	a
   0D1C C0 E0              3009 	push	acc
   0D1E C0 04              3010 	push	ar4
   0D20 C0 07              3011 	push	ar7
   0D22 C0 02              3012 	push	ar2
   0D24 85 00 F0           3013 	mov	b,ar0
   0D27 E5*00              3014 	mov	a,_bp
   0D29 24 89              3015 	add	a,#0x89
   0D2B F8                 3016 	mov	r0,a
   0D2C E6                 3017 	mov	a,@r0
   0D2D C0 E0              3018 	push	acc
   0D2F 08                 3019 	inc	r0
   0D30 E6                 3020 	mov	a,@r0
   0D31 C0 E0              3021 	push	acc
   0D33 A8 F0              3022 	mov	r0,b
   0D35 C0 00              3023 	push	ar0
   0D37 A8*00              3024 	mov	r0,_bp
   0D39 08                 3025 	inc	r0
   0D3A 86 82              3026 	mov	dpl,@r0
   0D3C 08                 3027 	inc	r0
   0D3D 86 83              3028 	mov	dph,@r0
   0D3F D0 00              3029 	pop	ar0
   0D41 12s00r00           3030 	lcall	_seek_read
   0D44 E5 81              3031 	mov	a,sp
   0D46 24 F9              3032 	add	a,#0xf9
   0D48 F5 81              3033 	mov	sp,a
   0D4A D0 01              3034 	pop	ar1
   0D4C D0 00              3035 	pop	ar0
   0D4E D0 07              3036 	pop	ar7
   0D50 D0 06              3037 	pop	ar6
   0D52 D0 04              3038 	pop	ar4
                           3039 ;	../../../core/loader/elfloader.c:425: nameptr = strs + shdr.sh_name;
   0D54 E5*00              3040 	mov	a,_bp
   0D56 24 37              3041 	add	a,#0x37
   0D58 FA                 3042 	mov	r2,a
   0D59 C0 00              3043 	push	ar0
   0D5B E5*00              3044 	mov	a,_bp
   0D5D 24 E0              3045 	add	a,#0xe0
   0D5F F8                 3046 	mov	r0,a
   0D60 C0 01              3047 	push	ar1
   0D62 A9 02              3048 	mov	r1,ar2
   0D64 E7                 3049 	mov	a,@r1
   0D65 F6                 3050 	mov	@r0,a
   0D66 09                 3051 	inc	r1
   0D67 E7                 3052 	mov	a,@r1
   0D68 08                 3053 	inc	r0
   0D69 F6                 3054 	mov	@r0,a
   0D6A 09                 3055 	inc	r1
   0D6B E7                 3056 	mov	a,@r1
   0D6C 08                 3057 	inc	r0
   0D6D F6                 3058 	mov	@r0,a
   0D6E 09                 3059 	inc	r1
   0D6F E7                 3060 	mov	a,@r1
   0D70 08                 3061 	inc	r0
   0D71 F6                 3062 	mov	@r0,a
   0D72 D0 01              3063 	pop	ar1
   0D74 E5*00              3064 	mov	a,_bp
   0D76 24 87              3065 	add	a,#0x87
   0D78 F8                 3066 	mov	r0,a
   0D79 86 02              3067 	mov	ar2,@r0
   0D7B 08                 3068 	inc	r0
   0D7C 86 03              3069 	mov	ar3,@r0
   0D7E E4                 3070 	clr	a
   0D7F FC                 3071 	mov	r4,a
   0D80 FF                 3072 	mov	r7,a
   0D81 E5*00              3073 	mov	a,_bp
   0D83 24 E0              3074 	add	a,#0xe0
   0D85 F8                 3075 	mov	r0,a
   0D86 E6                 3076 	mov	a,@r0
   0D87 2A                 3077 	add	a,r2
   0D88 FA                 3078 	mov	r2,a
   0D89 08                 3079 	inc	r0
   0D8A E6                 3080 	mov	a,@r0
   0D8B 3B                 3081 	addc	a,r3
   0D8C FB                 3082 	mov	r3,a
   0D8D 08                 3083 	inc	r0
   0D8E E6                 3084 	mov	a,@r0
   0D8F 3C                 3085 	addc	a,r4
   0D90 08                 3086 	inc	r0
   0D91 E6                 3087 	mov	a,@r0
   0D92 3F                 3088 	addc	a,r7
   0D93 8A 05              3089 	mov	ar5,r2
                           3090 ;	../../../core/loader/elfloader.c:426: seek_read(fd, nameptr, name, sizeof(name));
   0D95 E5*00              3091 	mov	a,_bp
   0D97 24 E4              3092 	add	a,#0xe4
   0D99 F8                 3093 	mov	r0,a
   0D9A 86 04              3094 	mov	ar4,@r0
   0D9C 7F 00              3095 	mov	r7,#0x00
   0D9E 7A 40              3096 	mov	r2,#0x40
   0DA0 D0 00              3097 	pop	ar0
   0DA2 C0 04              3098 	push	ar4
   0DA4 C0 06              3099 	push	ar6
   0DA6 C0 07              3100 	push	ar7
   0DA8 C0 00              3101 	push	ar0
   0DAA C0 01              3102 	push	ar1
   0DAC 74 0C              3103 	mov	a,#0x0C
   0DAE C0 E0              3104 	push	acc
   0DB0 E4                 3105 	clr	a
   0DB1 C0 E0              3106 	push	acc
   0DB3 C0 04              3107 	push	ar4
   0DB5 C0 07              3108 	push	ar7
   0DB7 C0 02              3109 	push	ar2
   0DB9 C0 05              3110 	push	ar5
   0DBB C0 03              3111 	push	ar3
   0DBD C0 00              3112 	push	ar0
   0DBF A8*00              3113 	mov	r0,_bp
   0DC1 08                 3114 	inc	r0
   0DC2 86 82              3115 	mov	dpl,@r0
   0DC4 08                 3116 	inc	r0
   0DC5 86 83              3117 	mov	dph,@r0
   0DC7 D0 00              3118 	pop	ar0
   0DC9 12s00r00           3119 	lcall	_seek_read
   0DCC E5 81              3120 	mov	a,sp
   0DCE 24 F9              3121 	add	a,#0xf9
   0DD0 F5 81              3122 	mov	sp,a
   0DD2 D0 01              3123 	pop	ar1
   0DD4 D0 00              3124 	pop	ar0
   0DD6 D0 07              3125 	pop	ar7
   0DD8 D0 06              3126 	pop	ar6
   0DDA D0 04              3127 	pop	ar4
                           3128 ;	../../../core/loader/elfloader.c:436: if(shdr.sh_type == SHT_SYMTAB/*strncmp(name, ".symtab", 7) == 0*/) {
   0DDC C0 01              3129 	push	ar1
   0DDE E5*00              3130 	mov	a,_bp
   0DE0 24 E0              3131 	add	a,#0xe0
   0DE2 F9                 3132 	mov	r1,a
   0DE3 E6                 3133 	mov	a,@r0
   0DE4 F7                 3134 	mov	@r1,a
   0DE5 08                 3135 	inc	r0
   0DE6 E6                 3136 	mov	a,@r0
   0DE7 09                 3137 	inc	r1
   0DE8 F7                 3138 	mov	@r1,a
   0DE9 08                 3139 	inc	r0
   0DEA E6                 3140 	mov	a,@r0
   0DEB 09                 3141 	inc	r1
   0DEC F7                 3142 	mov	@r1,a
   0DED 08                 3143 	inc	r0
   0DEE E6                 3144 	mov	a,@r0
   0DEF 09                 3145 	inc	r1
   0DF0 F7                 3146 	mov	@r1,a
   0DF1 18                 3147 	dec	r0
   0DF2 18                 3148 	dec	r0
   0DF3 18                 3149 	dec	r0
   0DF4 D0 01              3150 	pop	ar1
   0DF6 C0 00              3151 	push	ar0
   0DF8 E5*00              3152 	mov	a,_bp
   0DFA 24 E0              3153 	add	a,#0xe0
   0DFC F8                 3154 	mov	r0,a
   0DFD B6 02 0E           3155 	cjne	@r0,#0x02,00237$
   0E00 08                 3156 	inc	r0
   0E01 B6 00 0A           3157 	cjne	@r0,#0x00,00237$
   0E04 08                 3158 	inc	r0
   0E05 B6 00 06           3159 	cjne	@r0,#0x00,00237$
   0E08 08                 3160 	inc	r0
   0E09 B6 00 02           3161 	cjne	@r0,#0x00,00237$
   0E0C 80 08              3162 	sjmp	00238$
   0E0E                    3163 00237$:
   0E0E D0 00              3164 	pop	ar0
   0E10 D0 04              3165 	pop	ar4
   0E12 D0 07              3166 	pop	ar7
   0E14 80 47              3167 	sjmp	00148$
   0E16                    3168 00238$:
                           3169 ;	../../../core/loader/elfloader.c:438: symtaboff = shdr.sh_offset;
   0E16 E5*00              3170 	mov	a,_bp
   0E18 24 DE              3171 	add	a,#0xde
   0E1A F8                 3172 	mov	r0,a
   0E1B 86 00              3173 	mov	ar0,@r0
   0E1D 86 02              3174 	mov	ar2,@r0
   0E1F 08                 3175 	inc	r0
   0E20 86 03              3176 	mov	ar3,@r0
   0E22 08                 3177 	inc	r0
   0E23 86 04              3178 	mov	ar4,@r0
   0E25 08                 3179 	inc	r0
   0E26 86 07              3180 	mov	ar7,@r0
   0E28 18                 3181 	dec	r0
   0E29 18                 3182 	dec	r0
   0E2A 18                 3183 	dec	r0
   0E2B E5*00              3184 	mov	a,_bp
   0E2D 24 A6              3185 	add	a,#0xa6
   0E2F F8                 3186 	mov	r0,a
   0E30 A6 02              3187 	mov	@r0,ar2
   0E32 08                 3188 	inc	r0
   0E33 A6 03              3189 	mov	@r0,ar3
                           3190 ;	../../../core/loader/elfloader.c:439: symtabsize = shdr.sh_size;
   0E35 E5*00              3191 	mov	a,_bp
   0E37 24 DF              3192 	add	a,#0xdf
   0E39 F8                 3193 	mov	r0,a
   0E3A 86 00              3194 	mov	ar0,@r0
   0E3C 86 02              3195 	mov	ar2,@r0
   0E3E 08                 3196 	inc	r0
   0E3F 86 03              3197 	mov	ar3,@r0
   0E41 08                 3198 	inc	r0
   0E42 86 04              3199 	mov	ar4,@r0
   0E44 08                 3200 	inc	r0
   0E45 86 07              3201 	mov	ar7,@r0
   0E47 18                 3202 	dec	r0
   0E48 18                 3203 	dec	r0
   0E49 18                 3204 	dec	r0
   0E4A E5*00              3205 	mov	a,_bp
   0E4C 24 A8              3206 	add	a,#0xa8
   0E4E F8                 3207 	mov	r0,a
   0E4F A6 02              3208 	mov	@r0,ar2
   0E51 08                 3209 	inc	r0
   0E52 A6 03              3210 	mov	@r0,ar3
   0E54 D0 00              3211 	pop	ar0
   0E56 D0 04              3212 	pop	ar4
   0E58 D0 07              3213 	pop	ar7
   0E5A 02s15r22           3214 	ljmp	00149$
   0E5D                    3215 00148$:
                           3216 ;	../../../core/loader/elfloader.c:440: } else if(shdr.sh_type == SHT_STRTAB/*strncmp(name, ".strtab", 7) == 0*/) {
   0E5D C0 00              3217 	push	ar0
   0E5F E5*00              3218 	mov	a,_bp
   0E61 24 E0              3219 	add	a,#0xe0
   0E63 F8                 3220 	mov	r0,a
   0E64 B6 03 0E           3221 	cjne	@r0,#0x03,00239$
   0E67 08                 3222 	inc	r0
   0E68 B6 00 0A           3223 	cjne	@r0,#0x00,00239$
   0E6B 08                 3224 	inc	r0
   0E6C B6 00 06           3225 	cjne	@r0,#0x00,00239$
   0E6F 08                 3226 	inc	r0
   0E70 B6 00 02           3227 	cjne	@r0,#0x00,00239$
   0E73 80 04              3228 	sjmp	00240$
   0E75                    3229 00239$:
   0E75 D0 00              3230 	pop	ar0
   0E77 80 4F              3231 	sjmp	00145$
   0E79                    3232 00240$:
   0E79 D0 00              3233 	pop	ar0
                           3234 ;	../../../core/loader/elfloader.c:442: strtaboff = shdr.sh_offset;
   0E7B C0 07              3235 	push	ar7
   0E7D C0 04              3236 	push	ar4
   0E7F C0 00              3237 	push	ar0
   0E81 E5*00              3238 	mov	a,_bp
   0E83 24 DC              3239 	add	a,#0xdc
   0E85 F8                 3240 	mov	r0,a
   0E86 86 00              3241 	mov	ar0,@r0
   0E88 86 02              3242 	mov	ar2,@r0
   0E8A 08                 3243 	inc	r0
   0E8B 86 03              3244 	mov	ar3,@r0
   0E8D 08                 3245 	inc	r0
   0E8E 86 04              3246 	mov	ar4,@r0
   0E90 08                 3247 	inc	r0
   0E91 86 07              3248 	mov	ar7,@r0
   0E93 18                 3249 	dec	r0
   0E94 18                 3250 	dec	r0
   0E95 18                 3251 	dec	r0
   0E96 E5*00              3252 	mov	a,_bp
   0E98 24 AA              3253 	add	a,#0xaa
   0E9A F8                 3254 	mov	r0,a
   0E9B A6 02              3255 	mov	@r0,ar2
   0E9D 08                 3256 	inc	r0
   0E9E A6 03              3257 	mov	@r0,ar3
                           3258 ;	../../../core/loader/elfloader.c:443: strtabsize = shdr.sh_size;
   0EA0 E5*00              3259 	mov	a,_bp
   0EA2 24 DD              3260 	add	a,#0xdd
   0EA4 F8                 3261 	mov	r0,a
   0EA5 86 00              3262 	mov	ar0,@r0
   0EA7 86 02              3263 	mov	ar2,@r0
   0EA9 08                 3264 	inc	r0
   0EAA 86 03              3265 	mov	ar3,@r0
   0EAC 08                 3266 	inc	r0
   0EAD 86 04              3267 	mov	ar4,@r0
   0EAF 08                 3268 	inc	r0
   0EB0 86 07              3269 	mov	ar7,@r0
   0EB2 18                 3270 	dec	r0
   0EB3 18                 3271 	dec	r0
   0EB4 18                 3272 	dec	r0
   0EB5 E5*00              3273 	mov	a,_bp
   0EB7 24 B6              3274 	add	a,#0xb6
   0EB9 F8                 3275 	mov	r0,a
   0EBA A6 02              3276 	mov	@r0,ar2
   0EBC 08                 3277 	inc	r0
   0EBD A6 03              3278 	mov	@r0,ar3
   0EBF D0 00              3279 	pop	ar0
   0EC1 D0 04              3280 	pop	ar4
   0EC3 D0 07              3281 	pop	ar7
   0EC5 02s15r22           3282 	ljmp	00149$
   0EC8                    3283 00145$:
                           3284 ;	../../../core/loader/elfloader.c:444: } else if(strncmp(name, ".text", 5) == 0) {
   0EC8 C0 07              3285 	push	ar7
   0ECA C0 04              3286 	push	ar4
   0ECC C0 00              3287 	push	ar0
   0ECE E5*00              3288 	mov	a,_bp
   0ED0 24 B5              3289 	add	a,#0xb5
   0ED2 F8                 3290 	mov	r0,a
   0ED3 86 02              3291 	mov	ar2,@r0
   0ED5 7B 00              3292 	mov	r3,#0x00
   0ED7 7C 40              3293 	mov	r4,#0x40
   0ED9 D0 00              3294 	pop	ar0
   0EDB C0 04              3295 	push	ar4
   0EDD C0 06              3296 	push	ar6
   0EDF C0 07              3297 	push	ar7
   0EE1 C0 00              3298 	push	ar0
   0EE3 C0 01              3299 	push	ar1
   0EE5 74 05              3300 	mov	a,#0x05
   0EE7 C0 E0              3301 	push	acc
   0EE9 E4                 3302 	clr	a
   0EEA C0 E0              3303 	push	acc
   0EEC 74r1B              3304 	mov	a,#__str_1
   0EEE C0 E0              3305 	push	acc
   0EF0 74s00              3306 	mov	a,#(__str_1 >> 8)
   0EF2 C0 E0              3307 	push	acc
   0EF4 74 80              3308 	mov	a,#0x80
   0EF6 C0 E0              3309 	push	acc
   0EF8 8A 82              3310 	mov	dpl,r2
   0EFA 8B 83              3311 	mov	dph,r3
   0EFC 8C F0              3312 	mov	b,r4
   0EFE 12s00r00           3313 	lcall	_strncmp
   0F01 AA 82              3314 	mov	r2,dpl
   0F03 AB 83              3315 	mov	r3,dph
   0F05 E5 81              3316 	mov	a,sp
   0F07 24 FB              3317 	add	a,#0xfb
   0F09 F5 81              3318 	mov	sp,a
   0F0B D0 01              3319 	pop	ar1
   0F0D D0 00              3320 	pop	ar0
   0F0F D0 07              3321 	pop	ar7
   0F11 D0 06              3322 	pop	ar6
   0F13 D0 04              3323 	pop	ar4
   0F15 D0 04              3324 	pop	ar4
   0F17 D0 07              3325 	pop	ar7
   0F19 EA                 3326 	mov	a,r2
   0F1A 4B                 3327 	orl	a,r3
   0F1B 70 67              3328 	jnz	00142$
                           3329 ;	../../../core/loader/elfloader.c:445: textoff = shdr.sh_offset;
   0F1D C0 07              3330 	push	ar7
   0F1F C0 04              3331 	push	ar4
   0F21 C0 00              3332 	push	ar0
   0F23 E5*00              3333 	mov	a,_bp
   0F25 24 DA              3334 	add	a,#0xda
   0F27 F8                 3335 	mov	r0,a
   0F28 86 00              3336 	mov	ar0,@r0
   0F2A 86 02              3337 	mov	ar2,@r0
   0F2C 08                 3338 	inc	r0
   0F2D 86 03              3339 	mov	ar3,@r0
   0F2F 08                 3340 	inc	r0
   0F30 86 04              3341 	mov	ar4,@r0
   0F32 08                 3342 	inc	r0
   0F33 86 07              3343 	mov	ar7,@r0
   0F35 18                 3344 	dec	r0
   0F36 18                 3345 	dec	r0
   0F37 18                 3346 	dec	r0
   0F38 E5*00              3347 	mov	a,_bp
   0F3A 24 9E              3348 	add	a,#0x9e
   0F3C F8                 3349 	mov	r0,a
   0F3D A6 02              3350 	mov	@r0,ar2
   0F3F 08                 3351 	inc	r0
   0F40 A6 03              3352 	mov	@r0,ar3
                           3353 ;	../../../core/loader/elfloader.c:446: textsize = shdr.sh_size;
   0F42 E5*00              3354 	mov	a,_bp
   0F44 24 DB              3355 	add	a,#0xdb
   0F46 F8                 3356 	mov	r0,a
   0F47 86 00              3357 	mov	ar0,@r0
   0F49 86 02              3358 	mov	ar2,@r0
   0F4B 08                 3359 	inc	r0
   0F4C 86 03              3360 	mov	ar3,@r0
   0F4E 08                 3361 	inc	r0
   0F4F 86 04              3362 	mov	ar4,@r0
   0F51 08                 3363 	inc	r0
   0F52 86 07              3364 	mov	ar7,@r0
   0F54 18                 3365 	dec	r0
   0F55 18                 3366 	dec	r0
   0F56 18                 3367 	dec	r0
   0F57 E5*00              3368 	mov	a,_bp
   0F59 24 A0              3369 	add	a,#0xa0
   0F5B F8                 3370 	mov	r0,a
   0F5C A6 02              3371 	mov	@r0,ar2
   0F5E 08                 3372 	inc	r0
   0F5F A6 03              3373 	mov	@r0,ar3
                           3374 ;	../../../core/loader/elfloader.c:447: text.number = i;
   0F61 E5*00              3375 	mov	a,_bp
   0F63 24 97              3376 	add	a,#0x97
   0F65 F8                 3377 	mov	r0,a
   0F66 86 02              3378 	mov	ar2,@r0
   0F68 90s00r33           3379 	mov	dptr,#_text
   0F6B EA                 3380 	mov	a,r2
   0F6C F0                 3381 	movx	@dptr,a
                           3382 ;	../../../core/loader/elfloader.c:448: text.offset = textoff;
   0F6D 90s00r34           3383 	mov	dptr,#(_text + 0x0001)
   0F70 E5*00              3384 	mov	a,_bp
   0F72 24 9E              3385 	add	a,#0x9e
   0F74 F8                 3386 	mov	r0,a
   0F75 E6                 3387 	mov	a,@r0
   0F76 F0                 3388 	movx	@dptr,a
   0F77 A3                 3389 	inc	dptr
   0F78 08                 3390 	inc	r0
   0F79 E6                 3391 	mov	a,@r0
   0F7A F0                 3392 	movx	@dptr,a
   0F7B D0 00              3393 	pop	ar0
   0F7D D0 04              3394 	pop	ar4
   0F7F D0 07              3395 	pop	ar7
   0F81 02s15r22           3396 	ljmp	00149$
   0F84                    3397 00142$:
                           3398 ;	../../../core/loader/elfloader.c:449: } else if(strncmp(name, ".rel.text", 9) == 0) {
   0F84 C0 07              3399 	push	ar7
   0F86 C0 04              3400 	push	ar4
   0F88 C0 00              3401 	push	ar0
   0F8A E5*00              3402 	mov	a,_bp
   0F8C 24 C2              3403 	add	a,#0xc2
   0F8E F8                 3404 	mov	r0,a
   0F8F 86 02              3405 	mov	ar2,@r0
   0F91 7B 00              3406 	mov	r3,#0x00
   0F93 7C 40              3407 	mov	r4,#0x40
   0F95 D0 00              3408 	pop	ar0
   0F97 C0 04              3409 	push	ar4
   0F99 C0 06              3410 	push	ar6
   0F9B C0 07              3411 	push	ar7
   0F9D C0 00              3412 	push	ar0
   0F9F C0 01              3413 	push	ar1
   0FA1 74 09              3414 	mov	a,#0x09
   0FA3 C0 E0              3415 	push	acc
   0FA5 E4                 3416 	clr	a
   0FA6 C0 E0              3417 	push	acc
   0FA8 74r21              3418 	mov	a,#__str_2
   0FAA C0 E0              3419 	push	acc
   0FAC 74s00              3420 	mov	a,#(__str_2 >> 8)
   0FAE C0 E0              3421 	push	acc
   0FB0 74 80              3422 	mov	a,#0x80
   0FB2 C0 E0              3423 	push	acc
   0FB4 8A 82              3424 	mov	dpl,r2
   0FB6 8B 83              3425 	mov	dph,r3
   0FB8 8C F0              3426 	mov	b,r4
   0FBA 12s00r00           3427 	lcall	_strncmp
   0FBD AA 82              3428 	mov	r2,dpl
   0FBF AB 83              3429 	mov	r3,dph
   0FC1 E5 81              3430 	mov	a,sp
   0FC3 24 FB              3431 	add	a,#0xfb
   0FC5 F5 81              3432 	mov	sp,a
   0FC7 D0 01              3433 	pop	ar1
   0FC9 D0 00              3434 	pop	ar0
   0FCB D0 07              3435 	pop	ar7
   0FCD D0 06              3436 	pop	ar6
   0FCF D0 04              3437 	pop	ar4
   0FD1 D0 04              3438 	pop	ar4
   0FD3 D0 07              3439 	pop	ar7
   0FD5 EA                 3440 	mov	a,r2
   0FD6 4B                 3441 	orl	a,r3
   0FD7 70 4A              3442 	jnz	00139$
                           3443 ;	../../../core/loader/elfloader.c:450: using_relas = 0;
   0FD9 C0 06              3444 	push	ar6
   0FDB C0 00              3445 	push	ar0
   0FDD E5*00              3446 	mov	a,_bp
   0FDF 24 9D              3447 	add	a,#0x9d
   0FE1 F8                 3448 	mov	r0,a
   0FE2 76 00              3449 	mov	@r0,#0x00
                           3450 ;	../../../core/loader/elfloader.c:451: textrelaoff = shdr.sh_offset;
   0FE4 E5*00              3451 	mov	a,_bp
   0FE6 24 D8              3452 	add	a,#0xd8
   0FE8 F8                 3453 	mov	r0,a
   0FE9 86 00              3454 	mov	ar0,@r0
   0FEB 86 02              3455 	mov	ar2,@r0
   0FED 08                 3456 	inc	r0
   0FEE 86 03              3457 	mov	ar3,@r0
   0FF0 08                 3458 	inc	r0
   0FF1 86 06              3459 	mov	ar6,@r0
   0FF3 08                 3460 	inc	r0
   0FF4 86 05              3461 	mov	ar5,@r0
   0FF6 18                 3462 	dec	r0
   0FF7 18                 3463 	dec	r0
   0FF8 18                 3464 	dec	r0
   0FF9 8A 07              3465 	mov	ar7,r2
   0FFB 8B 04              3466 	mov	ar4,r3
                           3467 ;	../../../core/loader/elfloader.c:452: textrelasize = shdr.sh_size;
   0FFD E5*00              3468 	mov	a,_bp
   0FFF 24 D9              3469 	add	a,#0xd9
   1001 F8                 3470 	mov	r0,a
   1002 86 00              3471 	mov	ar0,@r0
   1004 86 02              3472 	mov	ar2,@r0
   1006 08                 3473 	inc	r0
   1007 86 03              3474 	mov	ar3,@r0
   1009 08                 3475 	inc	r0
   100A 86 05              3476 	mov	ar5,@r0
   100C 08                 3477 	inc	r0
   100D 86 06              3478 	mov	ar6,@r0
   100F 18                 3479 	dec	r0
   1010 18                 3480 	dec	r0
   1011 18                 3481 	dec	r0
   1012 E5*00              3482 	mov	a,_bp
   1014 24 C0              3483 	add	a,#0xc0
   1016 F8                 3484 	mov	r0,a
   1017 A6 02              3485 	mov	@r0,ar2
   1019 08                 3486 	inc	r0
   101A A6 03              3487 	mov	@r0,ar3
   101C D0 00              3488 	pop	ar0
   101E D0 06              3489 	pop	ar6
   1020 02s15r22           3490 	ljmp	00149$
   1023                    3491 00139$:
                           3492 ;	../../../core/loader/elfloader.c:453: } else if(strncmp(name, ".rela.text", 10) == 0) {
   1023 C0 00              3493 	push	ar0
   1025 E5*00              3494 	mov	a,_bp
   1027 24 C3              3495 	add	a,#0xc3
   1029 F8                 3496 	mov	r0,a
   102A 86 02              3497 	mov	ar2,@r0
   102C 7B 00              3498 	mov	r3,#0x00
   102E 7D 40              3499 	mov	r5,#0x40
   1030 D0 00              3500 	pop	ar0
   1032 C0 04              3501 	push	ar4
   1034 C0 06              3502 	push	ar6
   1036 C0 07              3503 	push	ar7
   1038 C0 00              3504 	push	ar0
   103A C0 01              3505 	push	ar1
   103C 74 0A              3506 	mov	a,#0x0A
   103E C0 E0              3507 	push	acc
   1040 E4                 3508 	clr	a
   1041 C0 E0              3509 	push	acc
   1043 74r2B              3510 	mov	a,#__str_3
   1045 C0 E0              3511 	push	acc
   1047 74s00              3512 	mov	a,#(__str_3 >> 8)
   1049 C0 E0              3513 	push	acc
   104B 74 80              3514 	mov	a,#0x80
   104D C0 E0              3515 	push	acc
   104F 8A 82              3516 	mov	dpl,r2
   1051 8B 83              3517 	mov	dph,r3
   1053 8D F0              3518 	mov	b,r5
   1055 12s00r00           3519 	lcall	_strncmp
   1058 AA 82              3520 	mov	r2,dpl
   105A AB 83              3521 	mov	r3,dph
   105C E5 81              3522 	mov	a,sp
   105E 24 FB              3523 	add	a,#0xfb
   1060 F5 81              3524 	mov	sp,a
   1062 D0 01              3525 	pop	ar1
   1064 D0 00              3526 	pop	ar0
   1066 D0 07              3527 	pop	ar7
   1068 D0 06              3528 	pop	ar6
   106A D0 04              3529 	pop	ar4
   106C EA                 3530 	mov	a,r2
   106D 4B                 3531 	orl	a,r3
   106E 70 4A              3532 	jnz	00136$
                           3533 ;	../../../core/loader/elfloader.c:454: using_relas = 1;
   1070 C0 06              3534 	push	ar6
   1072 C0 00              3535 	push	ar0
   1074 E5*00              3536 	mov	a,_bp
   1076 24 9D              3537 	add	a,#0x9d
   1078 F8                 3538 	mov	r0,a
   1079 76 01              3539 	mov	@r0,#0x01
                           3540 ;	../../../core/loader/elfloader.c:455: textrelaoff = shdr.sh_offset;
   107B E5*00              3541 	mov	a,_bp
   107D 24 D6              3542 	add	a,#0xd6
   107F F8                 3543 	mov	r0,a
   1080 86 00              3544 	mov	ar0,@r0
   1082 86 02              3545 	mov	ar2,@r0
   1084 08                 3546 	inc	r0
   1085 86 03              3547 	mov	ar3,@r0
   1087 08                 3548 	inc	r0
   1088 86 05              3549 	mov	ar5,@r0
   108A 08                 3550 	inc	r0
   108B 86 06              3551 	mov	ar6,@r0
   108D 18                 3552 	dec	r0
   108E 18                 3553 	dec	r0
   108F 18                 3554 	dec	r0
   1090 8A 07              3555 	mov	ar7,r2
   1092 8B 04              3556 	mov	ar4,r3
                           3557 ;	../../../core/loader/elfloader.c:456: textrelasize = shdr.sh_size;
   1094 E5*00              3558 	mov	a,_bp
   1096 24 D7              3559 	add	a,#0xd7
   1098 F8                 3560 	mov	r0,a
   1099 86 00              3561 	mov	ar0,@r0
   109B 86 02              3562 	mov	ar2,@r0
   109D 08                 3563 	inc	r0
   109E 86 03              3564 	mov	ar3,@r0
   10A0 08                 3565 	inc	r0
   10A1 86 05              3566 	mov	ar5,@r0
   10A3 08                 3567 	inc	r0
   10A4 86 06              3568 	mov	ar6,@r0
   10A6 18                 3569 	dec	r0
   10A7 18                 3570 	dec	r0
   10A8 18                 3571 	dec	r0
   10A9 E5*00              3572 	mov	a,_bp
   10AB 24 C0              3573 	add	a,#0xc0
   10AD F8                 3574 	mov	r0,a
   10AE A6 02              3575 	mov	@r0,ar2
   10B0 08                 3576 	inc	r0
   10B1 A6 03              3577 	mov	@r0,ar3
   10B3 D0 00              3578 	pop	ar0
   10B5 D0 06              3579 	pop	ar6
   10B7 02s15r22           3580 	ljmp	00149$
   10BA                    3581 00136$:
                           3582 ;	../../../core/loader/elfloader.c:457: } else if(strncmp(name, ".data", 5) == 0) {
   10BA C0 00              3583 	push	ar0
   10BC E5*00              3584 	mov	a,_bp
   10BE 24 C4              3585 	add	a,#0xc4
   10C0 F8                 3586 	mov	r0,a
   10C1 86 02              3587 	mov	ar2,@r0
   10C3 7B 00              3588 	mov	r3,#0x00
   10C5 7D 40              3589 	mov	r5,#0x40
   10C7 D0 00              3590 	pop	ar0
   10C9 C0 04              3591 	push	ar4
   10CB C0 06              3592 	push	ar6
   10CD C0 07              3593 	push	ar7
   10CF C0 00              3594 	push	ar0
   10D1 C0 01              3595 	push	ar1
   10D3 74 05              3596 	mov	a,#0x05
   10D5 C0 E0              3597 	push	acc
   10D7 E4                 3598 	clr	a
   10D8 C0 E0              3599 	push	acc
   10DA 74r36              3600 	mov	a,#__str_4
   10DC C0 E0              3601 	push	acc
   10DE 74s00              3602 	mov	a,#(__str_4 >> 8)
   10E0 C0 E0              3603 	push	acc
   10E2 74 80              3604 	mov	a,#0x80
   10E4 C0 E0              3605 	push	acc
   10E6 8A 82              3606 	mov	dpl,r2
   10E8 8B 83              3607 	mov	dph,r3
   10EA 8D F0              3608 	mov	b,r5
   10EC 12s00r00           3609 	lcall	_strncmp
   10EF AA 82              3610 	mov	r2,dpl
   10F1 AB 83              3611 	mov	r3,dph
   10F3 E5 81              3612 	mov	a,sp
   10F5 24 FB              3613 	add	a,#0xfb
   10F7 F5 81              3614 	mov	sp,a
   10F9 D0 01              3615 	pop	ar1
   10FB D0 00              3616 	pop	ar0
   10FD D0 07              3617 	pop	ar7
   10FF D0 06              3618 	pop	ar6
   1101 D0 04              3619 	pop	ar4
   1103 EA                 3620 	mov	a,r2
   1104 4B                 3621 	orl	a,r3
   1105 70 67              3622 	jnz	00133$
                           3623 ;	../../../core/loader/elfloader.c:458: dataoff = shdr.sh_offset;
   1107 C0 07              3624 	push	ar7
   1109 C0 04              3625 	push	ar4
   110B C0 00              3626 	push	ar0
   110D E5*00              3627 	mov	a,_bp
   110F 24 D4              3628 	add	a,#0xd4
   1111 F8                 3629 	mov	r0,a
   1112 86 00              3630 	mov	ar0,@r0
   1114 86 02              3631 	mov	ar2,@r0
   1116 08                 3632 	inc	r0
   1117 86 03              3633 	mov	ar3,@r0
   1119 08                 3634 	inc	r0
   111A 86 05              3635 	mov	ar5,@r0
   111C 08                 3636 	inc	r0
   111D 86 04              3637 	mov	ar4,@r0
   111F 18                 3638 	dec	r0
   1120 18                 3639 	dec	r0
   1121 18                 3640 	dec	r0
   1122 E5*00              3641 	mov	a,_bp
   1124 24 A2              3642 	add	a,#0xa2
   1126 F8                 3643 	mov	r0,a
   1127 A6 02              3644 	mov	@r0,ar2
   1129 08                 3645 	inc	r0
   112A A6 03              3646 	mov	@r0,ar3
                           3647 ;	../../../core/loader/elfloader.c:459: datasize = shdr.sh_size;
   112C E5*00              3648 	mov	a,_bp
   112E 24 D5              3649 	add	a,#0xd5
   1130 F8                 3650 	mov	r0,a
   1131 86 00              3651 	mov	ar0,@r0
   1133 86 02              3652 	mov	ar2,@r0
   1135 08                 3653 	inc	r0
   1136 86 03              3654 	mov	ar3,@r0
   1138 08                 3655 	inc	r0
   1139 86 04              3656 	mov	ar4,@r0
   113B 08                 3657 	inc	r0
   113C 86 05              3658 	mov	ar5,@r0
   113E 18                 3659 	dec	r0
   113F 18                 3660 	dec	r0
   1140 18                 3661 	dec	r0
   1141 E5*00              3662 	mov	a,_bp
   1143 24 BE              3663 	add	a,#0xbe
   1145 F8                 3664 	mov	r0,a
   1146 A6 02              3665 	mov	@r0,ar2
   1148 08                 3666 	inc	r0
   1149 A6 03              3667 	mov	@r0,ar3
                           3668 ;	../../../core/loader/elfloader.c:460: data.number = i;
   114B E5*00              3669 	mov	a,_bp
   114D 24 97              3670 	add	a,#0x97
   114F F8                 3671 	mov	r0,a
   1150 86 02              3672 	mov	ar2,@r0
   1152 90s00r27           3673 	mov	dptr,#_data
   1155 EA                 3674 	mov	a,r2
   1156 F0                 3675 	movx	@dptr,a
                           3676 ;	../../../core/loader/elfloader.c:461: data.offset = dataoff;
   1157 90s00r28           3677 	mov	dptr,#(_data + 0x0001)
   115A E5*00              3678 	mov	a,_bp
   115C 24 A2              3679 	add	a,#0xa2
   115E F8                 3680 	mov	r0,a
   115F E6                 3681 	mov	a,@r0
   1160 F0                 3682 	movx	@dptr,a
   1161 A3                 3683 	inc	dptr
   1162 08                 3684 	inc	r0
   1163 E6                 3685 	mov	a,@r0
   1164 F0                 3686 	movx	@dptr,a
   1165 D0 00              3687 	pop	ar0
   1167 D0 04              3688 	pop	ar4
   1169 D0 07              3689 	pop	ar7
   116B 02s15r22           3690 	ljmp	00149$
   116E                    3691 00133$:
                           3692 ;	../../../core/loader/elfloader.c:462: } else if(strncmp(name, ".rodata", 7) == 0) {
   116E C0 00              3693 	push	ar0
   1170 E5*00              3694 	mov	a,_bp
   1172 24 C5              3695 	add	a,#0xc5
   1174 F8                 3696 	mov	r0,a
   1175 86 02              3697 	mov	ar2,@r0
   1177 7B 00              3698 	mov	r3,#0x00
   1179 7D 40              3699 	mov	r5,#0x40
   117B D0 00              3700 	pop	ar0
   117D C0 04              3701 	push	ar4
   117F C0 06              3702 	push	ar6
   1181 C0 07              3703 	push	ar7
   1183 C0 00              3704 	push	ar0
   1185 C0 01              3705 	push	ar1
   1187 74 07              3706 	mov	a,#0x07
   1189 C0 E0              3707 	push	acc
   118B E4                 3708 	clr	a
   118C C0 E0              3709 	push	acc
   118E 74r3C              3710 	mov	a,#__str_5
   1190 C0 E0              3711 	push	acc
   1192 74s00              3712 	mov	a,#(__str_5 >> 8)
   1194 C0 E0              3713 	push	acc
   1196 74 80              3714 	mov	a,#0x80
   1198 C0 E0              3715 	push	acc
   119A 8A 82              3716 	mov	dpl,r2
   119C 8B 83              3717 	mov	dph,r3
   119E 8D F0              3718 	mov	b,r5
   11A0 12s00r00           3719 	lcall	_strncmp
   11A3 AA 82              3720 	mov	r2,dpl
   11A5 AB 83              3721 	mov	r3,dph
   11A7 E5 81              3722 	mov	a,sp
   11A9 24 FB              3723 	add	a,#0xfb
   11AB F5 81              3724 	mov	sp,a
   11AD D0 01              3725 	pop	ar1
   11AF D0 00              3726 	pop	ar0
   11B1 D0 07              3727 	pop	ar7
   11B3 D0 06              3728 	pop	ar6
   11B5 D0 04              3729 	pop	ar4
   11B7 EA                 3730 	mov	a,r2
   11B8 4B                 3731 	orl	a,r3
   11B9 70 67              3732 	jnz	00130$
                           3733 ;	../../../core/loader/elfloader.c:464: rodataoff = shdr.sh_offset;
   11BB C0 07              3734 	push	ar7
   11BD C0 04              3735 	push	ar4
   11BF C0 00              3736 	push	ar0
   11C1 E5*00              3737 	mov	a,_bp
   11C3 24 D2              3738 	add	a,#0xd2
   11C5 F8                 3739 	mov	r0,a
   11C6 86 00              3740 	mov	ar0,@r0
   11C8 86 02              3741 	mov	ar2,@r0
   11CA 08                 3742 	inc	r0
   11CB 86 03              3743 	mov	ar3,@r0
   11CD 08                 3744 	inc	r0
   11CE 86 05              3745 	mov	ar5,@r0
   11D0 08                 3746 	inc	r0
   11D1 86 04              3747 	mov	ar4,@r0
   11D3 18                 3748 	dec	r0
   11D4 18                 3749 	dec	r0
   11D5 18                 3750 	dec	r0
   11D6 E5*00              3751 	mov	a,_bp
   11D8 24 A4              3752 	add	a,#0xa4
   11DA F8                 3753 	mov	r0,a
   11DB A6 02              3754 	mov	@r0,ar2
   11DD 08                 3755 	inc	r0
   11DE A6 03              3756 	mov	@r0,ar3
                           3757 ;	../../../core/loader/elfloader.c:465: rodatasize = shdr.sh_size;
   11E0 E5*00              3758 	mov	a,_bp
   11E2 24 D3              3759 	add	a,#0xd3
   11E4 F8                 3760 	mov	r0,a
   11E5 86 00              3761 	mov	ar0,@r0
   11E7 86 02              3762 	mov	ar2,@r0
   11E9 08                 3763 	inc	r0
   11EA 86 03              3764 	mov	ar3,@r0
   11EC 08                 3765 	inc	r0
   11ED 86 04              3766 	mov	ar4,@r0
   11EF 08                 3767 	inc	r0
   11F0 86 05              3768 	mov	ar5,@r0
   11F2 18                 3769 	dec	r0
   11F3 18                 3770 	dec	r0
   11F4 18                 3771 	dec	r0
   11F5 E5*00              3772 	mov	a,_bp
   11F7 24 BA              3773 	add	a,#0xba
   11F9 F8                 3774 	mov	r0,a
   11FA A6 02              3775 	mov	@r0,ar2
   11FC 08                 3776 	inc	r0
   11FD A6 03              3777 	mov	@r0,ar3
                           3778 ;	../../../core/loader/elfloader.c:466: rodata.number = i;
   11FF E5*00              3779 	mov	a,_bp
   1201 24 97              3780 	add	a,#0x97
   1203 F8                 3781 	mov	r0,a
   1204 86 02              3782 	mov	ar2,@r0
   1206 90s00r2D           3783 	mov	dptr,#_rodata
   1209 EA                 3784 	mov	a,r2
   120A F0                 3785 	movx	@dptr,a
                           3786 ;	../../../core/loader/elfloader.c:467: rodata.offset = rodataoff;
   120B 90s00r2E           3787 	mov	dptr,#(_rodata + 0x0001)
   120E E5*00              3788 	mov	a,_bp
   1210 24 A4              3789 	add	a,#0xa4
   1212 F8                 3790 	mov	r0,a
   1213 E6                 3791 	mov	a,@r0
   1214 F0                 3792 	movx	@dptr,a
   1215 A3                 3793 	inc	dptr
   1216 08                 3794 	inc	r0
   1217 E6                 3795 	mov	a,@r0
   1218 F0                 3796 	movx	@dptr,a
   1219 D0 00              3797 	pop	ar0
   121B D0 04              3798 	pop	ar4
   121D D0 07              3799 	pop	ar7
   121F 02s15r22           3800 	ljmp	00149$
   1222                    3801 00130$:
                           3802 ;	../../../core/loader/elfloader.c:468: } else if(strncmp(name, ".rel.rodata", 11) == 0) {
   1222 C0 00              3803 	push	ar0
   1224 E5*00              3804 	mov	a,_bp
   1226 24 C6              3805 	add	a,#0xc6
   1228 F8                 3806 	mov	r0,a
   1229 86 02              3807 	mov	ar2,@r0
   122B 7B 00              3808 	mov	r3,#0x00
   122D 7D 40              3809 	mov	r5,#0x40
   122F D0 00              3810 	pop	ar0
   1231 C0 04              3811 	push	ar4
   1233 C0 06              3812 	push	ar6
   1235 C0 07              3813 	push	ar7
   1237 C0 00              3814 	push	ar0
   1239 C0 01              3815 	push	ar1
   123B 74 0B              3816 	mov	a,#0x0B
   123D C0 E0              3817 	push	acc
   123F E4                 3818 	clr	a
   1240 C0 E0              3819 	push	acc
   1242 74r44              3820 	mov	a,#__str_6
   1244 C0 E0              3821 	push	acc
   1246 74s00              3822 	mov	a,#(__str_6 >> 8)
   1248 C0 E0              3823 	push	acc
   124A 74 80              3824 	mov	a,#0x80
   124C C0 E0              3825 	push	acc
   124E 8A 82              3826 	mov	dpl,r2
   1250 8B 83              3827 	mov	dph,r3
   1252 8D F0              3828 	mov	b,r5
   1254 12s00r00           3829 	lcall	_strncmp
   1257 AA 82              3830 	mov	r2,dpl
   1259 AB 83              3831 	mov	r3,dph
   125B E5 81              3832 	mov	a,sp
   125D 24 FB              3833 	add	a,#0xfb
   125F F5 81              3834 	mov	sp,a
   1261 D0 01              3835 	pop	ar1
   1263 D0 00              3836 	pop	ar0
   1265 D0 07              3837 	pop	ar7
   1267 D0 06              3838 	pop	ar6
   1269 D0 04              3839 	pop	ar4
   126B EA                 3840 	mov	a,r2
   126C 4B                 3841 	orl	a,r3
   126D 70 54              3842 	jnz	00127$
                           3843 ;	../../../core/loader/elfloader.c:470: using_relas = 0;
   126F C0 07              3844 	push	ar7
   1271 C0 04              3845 	push	ar4
   1273 C0 00              3846 	push	ar0
   1275 E5*00              3847 	mov	a,_bp
   1277 24 9D              3848 	add	a,#0x9d
   1279 F8                 3849 	mov	r0,a
   127A 76 00              3850 	mov	@r0,#0x00
                           3851 ;	../../../core/loader/elfloader.c:471: rodatarelaoff = shdr.sh_offset;
   127C E5*00              3852 	mov	a,_bp
   127E 24 D0              3853 	add	a,#0xd0
   1280 F8                 3854 	mov	r0,a
   1281 86 00              3855 	mov	ar0,@r0
   1283 86 02              3856 	mov	ar2,@r0
   1285 08                 3857 	inc	r0
   1286 86 03              3858 	mov	ar3,@r0
   1288 08                 3859 	inc	r0
   1289 86 05              3860 	mov	ar5,@r0
   128B 08                 3861 	inc	r0
   128C 86 04              3862 	mov	ar4,@r0
   128E 18                 3863 	dec	r0
   128F 18                 3864 	dec	r0
   1290 18                 3865 	dec	r0
   1291 E5*00              3866 	mov	a,_bp
   1293 24 AE              3867 	add	a,#0xae
   1295 F8                 3868 	mov	r0,a
   1296 A6 02              3869 	mov	@r0,ar2
   1298 08                 3870 	inc	r0
   1299 A6 03              3871 	mov	@r0,ar3
                           3872 ;	../../../core/loader/elfloader.c:472: rodatarelasize = shdr.sh_size;
   129B E5*00              3873 	mov	a,_bp
   129D 24 D1              3874 	add	a,#0xd1
   129F F8                 3875 	mov	r0,a
   12A0 86 00              3876 	mov	ar0,@r0
   12A2 86 02              3877 	mov	ar2,@r0
   12A4 08                 3878 	inc	r0
   12A5 86 03              3879 	mov	ar3,@r0
   12A7 08                 3880 	inc	r0
   12A8 86 04              3881 	mov	ar4,@r0
   12AA 08                 3882 	inc	r0
   12AB 86 05              3883 	mov	ar5,@r0
   12AD 18                 3884 	dec	r0
   12AE 18                 3885 	dec	r0
   12AF 18                 3886 	dec	r0
   12B0 E5*00              3887 	mov	a,_bp
   12B2 24 B2              3888 	add	a,#0xb2
   12B4 F8                 3889 	mov	r0,a
   12B5 A6 02              3890 	mov	@r0,ar2
   12B7 08                 3891 	inc	r0
   12B8 A6 03              3892 	mov	@r0,ar3
   12BA D0 00              3893 	pop	ar0
   12BC D0 04              3894 	pop	ar4
   12BE D0 07              3895 	pop	ar7
   12C0 02s15r22           3896 	ljmp	00149$
   12C3                    3897 00127$:
                           3898 ;	../../../core/loader/elfloader.c:473: } else if(strncmp(name, ".rela.rodata", 12) == 0) {
   12C3 C0 00              3899 	push	ar0
   12C5 E5*00              3900 	mov	a,_bp
   12C7 24 C7              3901 	add	a,#0xc7
   12C9 F8                 3902 	mov	r0,a
   12CA 86 02              3903 	mov	ar2,@r0
   12CC 7B 00              3904 	mov	r3,#0x00
   12CE 7D 40              3905 	mov	r5,#0x40
   12D0 D0 00              3906 	pop	ar0
   12D2 C0 04              3907 	push	ar4
   12D4 C0 06              3908 	push	ar6
   12D6 C0 07              3909 	push	ar7
   12D8 C0 00              3910 	push	ar0
   12DA C0 01              3911 	push	ar1
   12DC 74 0C              3912 	mov	a,#0x0C
   12DE C0 E0              3913 	push	acc
   12E0 E4                 3914 	clr	a
   12E1 C0 E0              3915 	push	acc
   12E3 74r50              3916 	mov	a,#__str_7
   12E5 C0 E0              3917 	push	acc
   12E7 74s00              3918 	mov	a,#(__str_7 >> 8)
   12E9 C0 E0              3919 	push	acc
   12EB 74 80              3920 	mov	a,#0x80
   12ED C0 E0              3921 	push	acc
   12EF 8A 82              3922 	mov	dpl,r2
   12F1 8B 83              3923 	mov	dph,r3
   12F3 8D F0              3924 	mov	b,r5
   12F5 12s00r00           3925 	lcall	_strncmp
   12F8 AA 82              3926 	mov	r2,dpl
   12FA AB 83              3927 	mov	r3,dph
   12FC E5 81              3928 	mov	a,sp
   12FE 24 FB              3929 	add	a,#0xfb
   1300 F5 81              3930 	mov	sp,a
   1302 D0 01              3931 	pop	ar1
   1304 D0 00              3932 	pop	ar0
   1306 D0 07              3933 	pop	ar7
   1308 D0 06              3934 	pop	ar6
   130A D0 04              3935 	pop	ar4
   130C EA                 3936 	mov	a,r2
   130D 4B                 3937 	orl	a,r3
   130E 70 54              3938 	jnz	00124$
                           3939 ;	../../../core/loader/elfloader.c:474: using_relas = 1;
   1310 C0 07              3940 	push	ar7
   1312 C0 04              3941 	push	ar4
   1314 C0 00              3942 	push	ar0
   1316 E5*00              3943 	mov	a,_bp
   1318 24 9D              3944 	add	a,#0x9d
   131A F8                 3945 	mov	r0,a
   131B 76 01              3946 	mov	@r0,#0x01
                           3947 ;	../../../core/loader/elfloader.c:475: rodatarelaoff = shdr.sh_offset;
   131D E5*00              3948 	mov	a,_bp
   131F 24 CE              3949 	add	a,#0xce
   1321 F8                 3950 	mov	r0,a
   1322 86 00              3951 	mov	ar0,@r0
   1324 86 02              3952 	mov	ar2,@r0
   1326 08                 3953 	inc	r0
   1327 86 03              3954 	mov	ar3,@r0
   1329 08                 3955 	inc	r0
   132A 86 05              3956 	mov	ar5,@r0
   132C 08                 3957 	inc	r0
   132D 86 04              3958 	mov	ar4,@r0
   132F 18                 3959 	dec	r0
   1330 18                 3960 	dec	r0
   1331 18                 3961 	dec	r0
   1332 E5*00              3962 	mov	a,_bp
   1334 24 AE              3963 	add	a,#0xae
   1336 F8                 3964 	mov	r0,a
   1337 A6 02              3965 	mov	@r0,ar2
   1339 08                 3966 	inc	r0
   133A A6 03              3967 	mov	@r0,ar3
                           3968 ;	../../../core/loader/elfloader.c:476: rodatarelasize = shdr.sh_size;
   133C E5*00              3969 	mov	a,_bp
   133E 24 CF              3970 	add	a,#0xcf
   1340 F8                 3971 	mov	r0,a
   1341 86 00              3972 	mov	ar0,@r0
   1343 86 02              3973 	mov	ar2,@r0
   1345 08                 3974 	inc	r0
   1346 86 03              3975 	mov	ar3,@r0
   1348 08                 3976 	inc	r0
   1349 86 04              3977 	mov	ar4,@r0
   134B 08                 3978 	inc	r0
   134C 86 05              3979 	mov	ar5,@r0
   134E 18                 3980 	dec	r0
   134F 18                 3981 	dec	r0
   1350 18                 3982 	dec	r0
   1351 E5*00              3983 	mov	a,_bp
   1353 24 B2              3984 	add	a,#0xb2
   1355 F8                 3985 	mov	r0,a
   1356 A6 02              3986 	mov	@r0,ar2
   1358 08                 3987 	inc	r0
   1359 A6 03              3988 	mov	@r0,ar3
   135B D0 00              3989 	pop	ar0
   135D D0 04              3990 	pop	ar4
   135F D0 07              3991 	pop	ar7
   1361 02s15r22           3992 	ljmp	00149$
   1364                    3993 00124$:
                           3994 ;	../../../core/loader/elfloader.c:477: } else if(strncmp(name, ".rel.data", 9) == 0) {
   1364 C0 00              3995 	push	ar0
   1366 E5*00              3996 	mov	a,_bp
   1368 24 C8              3997 	add	a,#0xc8
   136A F8                 3998 	mov	r0,a
   136B 86 02              3999 	mov	ar2,@r0
   136D 7B 00              4000 	mov	r3,#0x00
   136F 7D 40              4001 	mov	r5,#0x40
   1371 D0 00              4002 	pop	ar0
   1373 C0 04              4003 	push	ar4
   1375 C0 06              4004 	push	ar6
   1377 C0 07              4005 	push	ar7
   1379 C0 00              4006 	push	ar0
   137B C0 01              4007 	push	ar1
   137D 74 09              4008 	mov	a,#0x09
   137F C0 E0              4009 	push	acc
   1381 E4                 4010 	clr	a
   1382 C0 E0              4011 	push	acc
   1384 74r5D              4012 	mov	a,#__str_8
   1386 C0 E0              4013 	push	acc
   1388 74s00              4014 	mov	a,#(__str_8 >> 8)
   138A C0 E0              4015 	push	acc
   138C 74 80              4016 	mov	a,#0x80
   138E C0 E0              4017 	push	acc
   1390 8A 82              4018 	mov	dpl,r2
   1392 8B 83              4019 	mov	dph,r3
   1394 8D F0              4020 	mov	b,r5
   1396 12s00r00           4021 	lcall	_strncmp
   1399 AA 82              4022 	mov	r2,dpl
   139B AB 83              4023 	mov	r3,dph
   139D E5 81              4024 	mov	a,sp
   139F 24 FB              4025 	add	a,#0xfb
   13A1 F5 81              4026 	mov	sp,a
   13A3 D0 01              4027 	pop	ar1
   13A5 D0 00              4028 	pop	ar0
   13A7 D0 07              4029 	pop	ar7
   13A9 D0 06              4030 	pop	ar6
   13AB D0 04              4031 	pop	ar4
   13AD EA                 4032 	mov	a,r2
   13AE 4B                 4033 	orl	a,r3
   13AF 70 54              4034 	jnz	00121$
                           4035 ;	../../../core/loader/elfloader.c:479: using_relas = 0;
   13B1 C0 07              4036 	push	ar7
   13B3 C0 04              4037 	push	ar4
   13B5 C0 00              4038 	push	ar0
   13B7 E5*00              4039 	mov	a,_bp
   13B9 24 9D              4040 	add	a,#0x9d
   13BB F8                 4041 	mov	r0,a
   13BC 76 00              4042 	mov	@r0,#0x00
                           4043 ;	../../../core/loader/elfloader.c:480: datarelaoff = shdr.sh_offset;
   13BE E5*00              4044 	mov	a,_bp
   13C0 24 CC              4045 	add	a,#0xcc
   13C2 F8                 4046 	mov	r0,a
   13C3 86 00              4047 	mov	ar0,@r0
   13C5 86 02              4048 	mov	ar2,@r0
   13C7 08                 4049 	inc	r0
   13C8 86 03              4050 	mov	ar3,@r0
   13CA 08                 4051 	inc	r0
   13CB 86 05              4052 	mov	ar5,@r0
   13CD 08                 4053 	inc	r0
   13CE 86 04              4054 	mov	ar4,@r0
   13D0 18                 4055 	dec	r0
   13D1 18                 4056 	dec	r0
   13D2 18                 4057 	dec	r0
   13D3 E5*00              4058 	mov	a,_bp
   13D5 24 AC              4059 	add	a,#0xac
   13D7 F8                 4060 	mov	r0,a
   13D8 A6 02              4061 	mov	@r0,ar2
   13DA 08                 4062 	inc	r0
   13DB A6 03              4063 	mov	@r0,ar3
                           4064 ;	../../../core/loader/elfloader.c:481: datarelasize = shdr.sh_size;
   13DD E5*00              4065 	mov	a,_bp
   13DF 24 CD              4066 	add	a,#0xcd
   13E1 F8                 4067 	mov	r0,a
   13E2 86 00              4068 	mov	ar0,@r0
   13E4 86 02              4069 	mov	ar2,@r0
   13E6 08                 4070 	inc	r0
   13E7 86 03              4071 	mov	ar3,@r0
   13E9 08                 4072 	inc	r0
   13EA 86 04              4073 	mov	ar4,@r0
   13EC 08                 4074 	inc	r0
   13ED 86 05              4075 	mov	ar5,@r0
   13EF 18                 4076 	dec	r0
   13F0 18                 4077 	dec	r0
   13F1 18                 4078 	dec	r0
   13F2 E5*00              4079 	mov	a,_bp
   13F4 24 BC              4080 	add	a,#0xbc
   13F6 F8                 4081 	mov	r0,a
   13F7 A6 02              4082 	mov	@r0,ar2
   13F9 08                 4083 	inc	r0
   13FA A6 03              4084 	mov	@r0,ar3
   13FC D0 00              4085 	pop	ar0
   13FE D0 04              4086 	pop	ar4
   1400 D0 07              4087 	pop	ar7
   1402 02s15r22           4088 	ljmp	00149$
   1405                    4089 00121$:
                           4090 ;	../../../core/loader/elfloader.c:482: } else if(strncmp(name, ".rela.data", 10) == 0) {
   1405 C0 00              4091 	push	ar0
   1407 E5*00              4092 	mov	a,_bp
   1409 24 C9              4093 	add	a,#0xc9
   140B F8                 4094 	mov	r0,a
   140C 86 02              4095 	mov	ar2,@r0
   140E 7B 00              4096 	mov	r3,#0x00
   1410 7D 40              4097 	mov	r5,#0x40
   1412 D0 00              4098 	pop	ar0
   1414 C0 04              4099 	push	ar4
   1416 C0 06              4100 	push	ar6
   1418 C0 07              4101 	push	ar7
   141A C0 00              4102 	push	ar0
   141C C0 01              4103 	push	ar1
   141E 74 0A              4104 	mov	a,#0x0A
   1420 C0 E0              4105 	push	acc
   1422 E4                 4106 	clr	a
   1423 C0 E0              4107 	push	acc
   1425 74r67              4108 	mov	a,#__str_9
   1427 C0 E0              4109 	push	acc
   1429 74s00              4110 	mov	a,#(__str_9 >> 8)
   142B C0 E0              4111 	push	acc
   142D 74 80              4112 	mov	a,#0x80
   142F C0 E0              4113 	push	acc
   1431 8A 82              4114 	mov	dpl,r2
   1433 8B 83              4115 	mov	dph,r3
   1435 8D F0              4116 	mov	b,r5
   1437 12s00r00           4117 	lcall	_strncmp
   143A AA 82              4118 	mov	r2,dpl
   143C AB 83              4119 	mov	r3,dph
   143E E5 81              4120 	mov	a,sp
   1440 24 FB              4121 	add	a,#0xfb
   1442 F5 81              4122 	mov	sp,a
   1444 D0 01              4123 	pop	ar1
   1446 D0 00              4124 	pop	ar0
   1448 D0 07              4125 	pop	ar7
   144A D0 06              4126 	pop	ar6
   144C D0 04              4127 	pop	ar4
   144E EA                 4128 	mov	a,r2
   144F 4B                 4129 	orl	a,r3
   1450 70 4C              4130 	jnz	00118$
                           4131 ;	../../../core/loader/elfloader.c:483: using_relas = 1;
   1452 C0 07              4132 	push	ar7
   1454 C0 04              4133 	push	ar4
   1456 C0 00              4134 	push	ar0
   1458 E5*00              4135 	mov	a,_bp
   145A 24 9D              4136 	add	a,#0x9d
   145C F8                 4137 	mov	r0,a
   145D 76 01              4138 	mov	@r0,#0x01
                           4139 ;	../../../core/loader/elfloader.c:484: datarelaoff = shdr.sh_offset;
   145F A8 06              4140 	mov	r0,ar6
   1461 86 02              4141 	mov	ar2,@r0
   1463 08                 4142 	inc	r0
   1464 86 03              4143 	mov	ar3,@r0
   1466 08                 4144 	inc	r0
   1467 86 05              4145 	mov	ar5,@r0
   1469 08                 4146 	inc	r0
   146A 86 04              4147 	mov	ar4,@r0
   146C E5*00              4148 	mov	a,_bp
   146E 24 AC              4149 	add	a,#0xac
   1470 F8                 4150 	mov	r0,a
   1471 A6 02              4151 	mov	@r0,ar2
   1473 08                 4152 	inc	r0
   1474 A6 03              4153 	mov	@r0,ar3
                           4154 ;	../../../core/loader/elfloader.c:485: datarelasize = shdr.sh_size;
   1476 E5*00              4155 	mov	a,_bp
   1478 24 CB              4156 	add	a,#0xcb
   147A F8                 4157 	mov	r0,a
   147B 86 00              4158 	mov	ar0,@r0
   147D 86 02              4159 	mov	ar2,@r0
   147F 08                 4160 	inc	r0
   1480 86 03              4161 	mov	ar3,@r0
   1482 08                 4162 	inc	r0
   1483 86 04              4163 	mov	ar4,@r0
   1485 08                 4164 	inc	r0
   1486 86 05              4165 	mov	ar5,@r0
   1488 18                 4166 	dec	r0
   1489 18                 4167 	dec	r0
   148A 18                 4168 	dec	r0
   148B E5*00              4169 	mov	a,_bp
   148D 24 BC              4170 	add	a,#0xbc
   148F F8                 4171 	mov	r0,a
   1490 A6 02              4172 	mov	@r0,ar2
   1492 08                 4173 	inc	r0
   1493 A6 03              4174 	mov	@r0,ar3
   1495 D0 00              4175 	pop	ar0
   1497 D0 04              4176 	pop	ar4
   1499 D0 07              4177 	pop	ar7
   149B 02s15r22           4178 	ljmp	00149$
   149E                    4179 00118$:
                           4180 ;	../../../core/loader/elfloader.c:486: } else if(strncmp(name, ".bss", 4) == 0) {
   149E C0 00              4181 	push	ar0
   14A0 E5*00              4182 	mov	a,_bp
   14A2 24 CA              4183 	add	a,#0xca
   14A4 F8                 4184 	mov	r0,a
   14A5 86 02              4185 	mov	ar2,@r0
   14A7 7B 00              4186 	mov	r3,#0x00
   14A9 7D 40              4187 	mov	r5,#0x40
   14AB D0 00              4188 	pop	ar0
   14AD C0 04              4189 	push	ar4
   14AF C0 06              4190 	push	ar6
   14B1 C0 07              4191 	push	ar7
   14B3 C0 00              4192 	push	ar0
   14B5 C0 01              4193 	push	ar1
   14B7 74 04              4194 	mov	a,#0x04
   14B9 C0 E0              4195 	push	acc
   14BB E4                 4196 	clr	a
   14BC C0 E0              4197 	push	acc
   14BE 74r72              4198 	mov	a,#__str_10
   14C0 C0 E0              4199 	push	acc
   14C2 74s00              4200 	mov	a,#(__str_10 >> 8)
   14C4 C0 E0              4201 	push	acc
   14C6 74 80              4202 	mov	a,#0x80
   14C8 C0 E0              4203 	push	acc
   14CA 8A 82              4204 	mov	dpl,r2
   14CC 8B 83              4205 	mov	dph,r3
   14CE 8D F0              4206 	mov	b,r5
   14D0 12s00r00           4207 	lcall	_strncmp
   14D3 AA 82              4208 	mov	r2,dpl
   14D5 AB 83              4209 	mov	r3,dph
   14D7 E5 81              4210 	mov	a,sp
   14D9 24 FB              4211 	add	a,#0xfb
   14DB F5 81              4212 	mov	sp,a
   14DD D0 01              4213 	pop	ar1
   14DF D0 00              4214 	pop	ar0
   14E1 D0 07              4215 	pop	ar7
   14E3 D0 06              4216 	pop	ar6
   14E5 D0 04              4217 	pop	ar4
   14E7 EA                 4218 	mov	a,r2
   14E8 4B                 4219 	orl	a,r3
   14E9 70 37              4220 	jnz	00149$
                           4221 ;	../../../core/loader/elfloader.c:487: bsssize = shdr.sh_size;
   14EB C0 07              4222 	push	ar7
   14ED C0 04              4223 	push	ar4
   14EF 87 02              4224 	mov	ar2,@r1
   14F1 09                 4225 	inc	r1
   14F2 87 03              4226 	mov	ar3,@r1
   14F4 09                 4227 	inc	r1
   14F5 87 05              4228 	mov	ar5,@r1
   14F7 09                 4229 	inc	r1
   14F8 87 04              4230 	mov	ar4,@r1
   14FA 19                 4231 	dec	r1
   14FB 19                 4232 	dec	r1
   14FC 19                 4233 	dec	r1
   14FD C0 00              4234 	push	ar0
   14FF E5*00              4235 	mov	a,_bp
   1501 24 B0              4236 	add	a,#0xb0
   1503 F8                 4237 	mov	r0,a
   1504 A6 02              4238 	mov	@r0,ar2
   1506 08                 4239 	inc	r0
   1507 A6 03              4240 	mov	@r0,ar3
                           4241 ;	../../../core/loader/elfloader.c:488: bss.number = i;
   1509 E5*00              4242 	mov	a,_bp
   150B 24 97              4243 	add	a,#0x97
   150D F8                 4244 	mov	r0,a
   150E 86 02              4245 	mov	ar2,@r0
   1510 D0 00              4246 	pop	ar0
   1512 90s00r21           4247 	mov	dptr,#_bss
   1515 EA                 4248 	mov	a,r2
   1516 F0                 4249 	movx	@dptr,a
                           4250 ;	../../../core/loader/elfloader.c:489: bss.offset = 0;
   1517 90s00r22           4251 	mov	dptr,#(_bss + 0x0001)
   151A E4                 4252 	clr	a
   151B F0                 4253 	movx	@dptr,a
   151C A3                 4254 	inc	dptr
   151D F0                 4255 	movx	@dptr,a
                           4256 ;	../../../core/loader/elfloader.c:586: return ELFLOADER_NO_STARTPOINT;
   151E D0 04              4257 	pop	ar4
   1520 D0 07              4258 	pop	ar7
                           4259 ;	../../../core/loader/elfloader.c:489: bss.offset = 0;
   1522                    4260 00149$:
                           4261 ;	../../../core/loader/elfloader.c:493: shdrptr += shdrsize;
   1522 C0 00              4262 	push	ar0
   1524 E5*00              4263 	mov	a,_bp
   1526 24 89              4264 	add	a,#0x89
   1528 F8                 4265 	mov	r0,a
   1529 C0 01              4266 	push	ar1
   152B E5*00              4267 	mov	a,_bp
   152D 24 9B              4268 	add	a,#0x9b
   152F F9                 4269 	mov	r1,a
   1530 E7                 4270 	mov	a,@r1
   1531 26                 4271 	add	a,@r0
   1532 F6                 4272 	mov	@r0,a
   1533 09                 4273 	inc	r1
   1534 E7                 4274 	mov	a,@r1
   1535 08                 4275 	inc	r0
   1536 36                 4276 	addc	a,@r0
   1537 F6                 4277 	mov	@r0,a
   1538 D0 01              4278 	pop	ar1
                           4279 ;	../../../core/loader/elfloader.c:420: for(i = 0; i < shdrnum; ++i) {
   153A E5*00              4280 	mov	a,_bp
   153C 24 97              4281 	add	a,#0x97
   153E F8                 4282 	mov	r0,a
   153F 06                 4283 	inc	@r0
   1540 B6 00 02           4284 	cjne	@r0,#0x00,00251$
   1543 08                 4285 	inc	r0
   1544 06                 4286 	inc	@r0
   1545                    4287 00251$:
   1545 D0 00              4288 	pop	ar0
   1547 02s0CrDA           4289 	ljmp	00203$
   154A                    4290 00206$:
                           4291 ;	../../../core/loader/elfloader.c:496: if(symtabsize == 0) {
   154A E5*00              4292 	mov	a,_bp
   154C 24 A8              4293 	add	a,#0xa8
   154E F8                 4294 	mov	r0,a
   154F E6                 4295 	mov	a,@r0
   1550 08                 4296 	inc	r0
   1551 46                 4297 	orl	a,@r0
   1552 70 06              4298 	jnz	00151$
                           4299 ;	../../../core/loader/elfloader.c:497: return ELFLOADER_NO_SYMTAB;
   1554 90 00 02           4300 	mov	dptr,#0x0002
   1557 02s19r4F           4301 	ljmp	00207$
   155A                    4302 00151$:
                           4303 ;	../../../core/loader/elfloader.c:499: if(strtabsize == 0) {
   155A E5*00              4304 	mov	a,_bp
   155C 24 B6              4305 	add	a,#0xb6
   155E F8                 4306 	mov	r0,a
   155F E6                 4307 	mov	a,@r0
   1560 08                 4308 	inc	r0
   1561 46                 4309 	orl	a,@r0
   1562 70 06              4310 	jnz	00153$
                           4311 ;	../../../core/loader/elfloader.c:500: return ELFLOADER_NO_STRTAB;
   1564 90 00 03           4312 	mov	dptr,#0x0003
   1567 02s19r4F           4313 	ljmp	00207$
   156A                    4314 00153$:
                           4315 ;	../../../core/loader/elfloader.c:502: if(textsize == 0) {
   156A E5*00              4316 	mov	a,_bp
   156C 24 A0              4317 	add	a,#0xa0
   156E F8                 4318 	mov	r0,a
   156F E6                 4319 	mov	a,@r0
   1570 08                 4320 	inc	r0
   1571 46                 4321 	orl	a,@r0
   1572 70 06              4322 	jnz	00156$
                           4323 ;	../../../core/loader/elfloader.c:503: return ELFLOADER_NO_TEXT;
   1574 90 00 04           4324 	mov	dptr,#0x0004
   1577 02s19r4F           4325 	ljmp	00207$
                           4326 ;	../../../core/loader/elfloader.c:506: PRINTF("before allocate ram\n");
   157A                    4327 00156$:
                           4328 ;	../../../core/loader/elfloader.c:507: bss.address = (char *)elfloader_arch_allocate_ram(bsssize + datasize);
   157A C0 07              4329 	push	ar7
   157C C0 04              4330 	push	ar4
   157E E5*00              4331 	mov	a,_bp
   1580 24 B0              4332 	add	a,#0xb0
   1582 F8                 4333 	mov	r0,a
   1583 E5*00              4334 	mov	a,_bp
   1585 24 BE              4335 	add	a,#0xbe
   1587 F9                 4336 	mov	r1,a
   1588 E7                 4337 	mov	a,@r1
   1589 26                 4338 	add	a,@r0
   158A FA                 4339 	mov	r2,a
   158B 09                 4340 	inc	r1
   158C E7                 4341 	mov	a,@r1
   158D 08                 4342 	inc	r0
   158E 36                 4343 	addc	a,@r0
   158F FB                 4344 	mov	r3,a
   1590 8A 82              4345 	mov	dpl,r2
   1592 8B 83              4346 	mov	dph,r3
   1594 C0 04              4347 	push	ar4
   1596 C0 07              4348 	push	ar7
   1598 12s00r00           4349 	lcall	_elfloader_arch_allocate_ram
   159B AA 82              4350 	mov	r2,dpl
   159D AB 83              4351 	mov	r3,dph
   159F AD F0              4352 	mov	r5,b
   15A1 90s00r24           4353 	mov	dptr,#(_bss + 0x0003)
   15A4 EA                 4354 	mov	a,r2
   15A5 F0                 4355 	movx	@dptr,a
   15A6 A3                 4356 	inc	dptr
   15A7 EB                 4357 	mov	a,r3
   15A8 F0                 4358 	movx	@dptr,a
   15A9 A3                 4359 	inc	dptr
   15AA ED                 4360 	mov	a,r5
   15AB F0                 4361 	movx	@dptr,a
                           4362 ;	../../../core/loader/elfloader.c:508: data.address = (char *)bss.address + bsssize;
   15AC 90s00r24           4363 	mov	dptr,#(_bss + 0x0003)
   15AF E0                 4364 	movx	a,@dptr
   15B0 FA                 4365 	mov	r2,a
   15B1 A3                 4366 	inc	dptr
   15B2 E0                 4367 	movx	a,@dptr
   15B3 FB                 4368 	mov	r3,a
   15B4 A3                 4369 	inc	dptr
   15B5 E0                 4370 	movx	a,@dptr
   15B6 FD                 4371 	mov	r5,a
   15B7 E5*00              4372 	mov	a,_bp
   15B9 24 B0              4373 	add	a,#0xb0
   15BB F8                 4374 	mov	r0,a
   15BC E6                 4375 	mov	a,@r0
   15BD 2A                 4376 	add	a,r2
   15BE FA                 4377 	mov	r2,a
   15BF 08                 4378 	inc	r0
   15C0 E6                 4379 	mov	a,@r0
   15C1 3B                 4380 	addc	a,r3
   15C2 FB                 4381 	mov	r3,a
   15C3 90s00r2A           4382 	mov	dptr,#(_data + 0x0003)
   15C6 EA                 4383 	mov	a,r2
   15C7 F0                 4384 	movx	@dptr,a
   15C8 A3                 4385 	inc	dptr
   15C9 EB                 4386 	mov	a,r3
   15CA F0                 4387 	movx	@dptr,a
   15CB A3                 4388 	inc	dptr
   15CC ED                 4389 	mov	a,r5
   15CD F0                 4390 	movx	@dptr,a
                           4391 ;	../../../core/loader/elfloader.c:510: text.address = (char *)elfloader_arch_allocate_rom(textsize + rodatasize);
   15CE E5*00              4392 	mov	a,_bp
   15D0 24 A0              4393 	add	a,#0xa0
   15D2 F8                 4394 	mov	r0,a
   15D3 E5*00              4395 	mov	a,_bp
   15D5 24 BA              4396 	add	a,#0xba
   15D7 F9                 4397 	mov	r1,a
   15D8 E7                 4398 	mov	a,@r1
   15D9 26                 4399 	add	a,@r0
   15DA FA                 4400 	mov	r2,a
   15DB 09                 4401 	inc	r1
   15DC E7                 4402 	mov	a,@r1
   15DD 08                 4403 	inc	r0
   15DE 36                 4404 	addc	a,@r0
   15DF FB                 4405 	mov	r3,a
   15E0 8A 82              4406 	mov	dpl,r2
   15E2 8B 83              4407 	mov	dph,r3
   15E4 12s00r00           4408 	lcall	_elfloader_arch_allocate_rom
   15E7 AA 82              4409 	mov	r2,dpl
   15E9 AB 83              4410 	mov	r3,dph
   15EB AD F0              4411 	mov	r5,b
   15ED D0 07              4412 	pop	ar7
   15EF D0 04              4413 	pop	ar4
   15F1 90s00r36           4414 	mov	dptr,#(_text + 0x0003)
   15F4 EA                 4415 	mov	a,r2
   15F5 F0                 4416 	movx	@dptr,a
   15F6 A3                 4417 	inc	dptr
   15F7 EB                 4418 	mov	a,r3
   15F8 F0                 4419 	movx	@dptr,a
   15F9 A3                 4420 	inc	dptr
   15FA ED                 4421 	mov	a,r5
   15FB F0                 4422 	movx	@dptr,a
                           4423 ;	../../../core/loader/elfloader.c:511: rodata.address = (char *)text.address + textsize;
   15FC 90s00r36           4424 	mov	dptr,#(_text + 0x0003)
   15FF E0                 4425 	movx	a,@dptr
   1600 FA                 4426 	mov	r2,a
   1601 A3                 4427 	inc	dptr
   1602 E0                 4428 	movx	a,@dptr
   1603 FB                 4429 	mov	r3,a
   1604 A3                 4430 	inc	dptr
   1605 E0                 4431 	movx	a,@dptr
   1606 FD                 4432 	mov	r5,a
   1607 E5*00              4433 	mov	a,_bp
   1609 24 A0              4434 	add	a,#0xa0
   160B F8                 4435 	mov	r0,a
   160C E6                 4436 	mov	a,@r0
   160D 2A                 4437 	add	a,r2
   160E FE                 4438 	mov	r6,a
   160F 08                 4439 	inc	r0
   1610 E6                 4440 	mov	a,@r0
   1611 3B                 4441 	addc	a,r3
   1612 FC                 4442 	mov	r4,a
   1613 8D 07              4443 	mov	ar7,r5
   1615 90s00r30           4444 	mov	dptr,#(_rodata + 0x0003)
   1618 EE                 4445 	mov	a,r6
   1619 F0                 4446 	movx	@dptr,a
   161A A3                 4447 	inc	dptr
   161B EC                 4448 	mov	a,r4
   161C F0                 4449 	movx	@dptr,a
   161D A3                 4450 	inc	dptr
   161E EF                 4451 	mov	a,r7
   161F F0                 4452 	movx	@dptr,a
                           4453 ;	../../../core/loader/elfloader.c:522: if(textrelasize > 0) {
   1620 D0 04              4454 	pop	ar4
   1622 D0 07              4455 	pop	ar7
   1624 E5*00              4456 	mov	a,_bp
   1626 24 C0              4457 	add	a,#0xc0
   1628 F8                 4458 	mov	r0,a
   1629 E6                 4459 	mov	a,@r0
   162A 08                 4460 	inc	r0
   162B 46                 4461 	orl	a,@r0
   162C 60 7A              4462 	jz	00174$
                           4463 ;	../../../core/loader/elfloader.c:523: ret = relocate_section(fd,
   162E E5*00              4464 	mov	a,_bp
   1630 24 9D              4465 	add	a,#0x9d
   1632 F8                 4466 	mov	r0,a
   1633 E6                 4467 	mov	a,@r0
   1634 C0 E0              4468 	push	acc
   1636 E5*00              4469 	mov	a,_bp
   1638 24 A8              4470 	add	a,#0xa8
   163A F8                 4471 	mov	r0,a
   163B E6                 4472 	mov	a,@r0
   163C C0 E0              4473 	push	acc
   163E 08                 4474 	inc	r0
   163F E6                 4475 	mov	a,@r0
   1640 C0 E0              4476 	push	acc
   1642 E5*00              4477 	mov	a,_bp
   1644 24 A6              4478 	add	a,#0xa6
   1646 F8                 4479 	mov	r0,a
   1647 E6                 4480 	mov	a,@r0
   1648 C0 E0              4481 	push	acc
   164A 08                 4482 	inc	r0
   164B E6                 4483 	mov	a,@r0
   164C C0 E0              4484 	push	acc
   164E E5*00              4485 	mov	a,_bp
   1650 24 AA              4486 	add	a,#0xaa
   1652 F8                 4487 	mov	r0,a
   1653 E6                 4488 	mov	a,@r0
   1654 C0 E0              4489 	push	acc
   1656 08                 4490 	inc	r0
   1657 E6                 4491 	mov	a,@r0
   1658 C0 E0              4492 	push	acc
   165A E5*00              4493 	mov	a,_bp
   165C 24 87              4494 	add	a,#0x87
   165E F8                 4495 	mov	r0,a
   165F E6                 4496 	mov	a,@r0
   1660 C0 E0              4497 	push	acc
   1662 08                 4498 	inc	r0
   1663 E6                 4499 	mov	a,@r0
   1664 C0 E0              4500 	push	acc
   1666 C0 02              4501 	push	ar2
   1668 C0 03              4502 	push	ar3
   166A C0 05              4503 	push	ar5
   166C E5*00              4504 	mov	a,_bp
   166E 24 9E              4505 	add	a,#0x9e
   1670 F8                 4506 	mov	r0,a
   1671 E6                 4507 	mov	a,@r0
   1672 C0 E0              4508 	push	acc
   1674 08                 4509 	inc	r0
   1675 E6                 4510 	mov	a,@r0
   1676 C0 E0              4511 	push	acc
   1678 E5*00              4512 	mov	a,_bp
   167A 24 C0              4513 	add	a,#0xc0
   167C F8                 4514 	mov	r0,a
   167D E6                 4515 	mov	a,@r0
   167E C0 E0              4516 	push	acc
   1680 08                 4517 	inc	r0
   1681 E6                 4518 	mov	a,@r0
   1682 C0 E0              4519 	push	acc
   1684 C0 07              4520 	push	ar7
   1686 C0 04              4521 	push	ar4
   1688 A8*00              4522 	mov	r0,_bp
   168A 08                 4523 	inc	r0
   168B 86 82              4524 	mov	dpl,@r0
   168D 08                 4525 	inc	r0
   168E 86 83              4526 	mov	dph,@r0
   1690 12s02r77           4527 	lcall	_relocate_section
   1693 AA 82              4528 	mov	r2,dpl
   1695 AB 83              4529 	mov	r3,dph
   1697 E5 81              4530 	mov	a,sp
   1699 24 EE              4531 	add	a,#0xee
   169B F5 81              4532 	mov	sp,a
                           4533 ;	../../../core/loader/elfloader.c:530: if(ret != ELFLOADER_OK) {
   169D EA                 4534 	mov	a,r2
   169E 4B                 4535 	orl	a,r3
   169F 60 07              4536 	jz	00174$
                           4537 ;	../../../core/loader/elfloader.c:531: return ret;
   16A1 8A 82              4538 	mov	dpl,r2
   16A3 8B 83              4539 	mov	dph,r3
   16A5 02s19r4F           4540 	ljmp	00207$
                           4541 ;	../../../core/loader/elfloader.c:536: PRINTF("elfloader: relocate rodata\n");
   16A8                    4542 00174$:
                           4543 ;	../../../core/loader/elfloader.c:537: if(rodatarelasize > 0) {
   16A8 E5*00              4544 	mov	a,_bp
   16AA 24 B2              4545 	add	a,#0xb2
   16AC F8                 4546 	mov	r0,a
   16AD E6                 4547 	mov	a,@r0
   16AE 08                 4548 	inc	r0
   16AF 46                 4549 	orl	a,@r0
   16B0 70 03              4550 	jnz	00257$
   16B2 02s17r46           4551 	ljmp	00182$
   16B5                    4552 00257$:
                           4553 ;	../../../core/loader/elfloader.c:541: rodata.address,
   16B5 90s00r30           4554 	mov	dptr,#(_rodata + 0x0003)
   16B8 E0                 4555 	movx	a,@dptr
   16B9 FC                 4556 	mov	r4,a
   16BA A3                 4557 	inc	dptr
   16BB E0                 4558 	movx	a,@dptr
   16BC FD                 4559 	mov	r5,a
   16BD A3                 4560 	inc	dptr
   16BE E0                 4561 	movx	a,@dptr
   16BF FE                 4562 	mov	r6,a
                           4563 ;	../../../core/loader/elfloader.c:538: ret = relocate_section(fd,
   16C0 E5*00              4564 	mov	a,_bp
   16C2 24 9D              4565 	add	a,#0x9d
   16C4 F8                 4566 	mov	r0,a
   16C5 E6                 4567 	mov	a,@r0
   16C6 C0 E0              4568 	push	acc
   16C8 E5*00              4569 	mov	a,_bp
   16CA 24 A8              4570 	add	a,#0xa8
   16CC F8                 4571 	mov	r0,a
   16CD E6                 4572 	mov	a,@r0
   16CE C0 E0              4573 	push	acc
   16D0 08                 4574 	inc	r0
   16D1 E6                 4575 	mov	a,@r0
   16D2 C0 E0              4576 	push	acc
   16D4 E5*00              4577 	mov	a,_bp
   16D6 24 A6              4578 	add	a,#0xa6
   16D8 F8                 4579 	mov	r0,a
   16D9 E6                 4580 	mov	a,@r0
   16DA C0 E0              4581 	push	acc
   16DC 08                 4582 	inc	r0
   16DD E6                 4583 	mov	a,@r0
   16DE C0 E0              4584 	push	acc
   16E0 E5*00              4585 	mov	a,_bp
   16E2 24 AA              4586 	add	a,#0xaa
   16E4 F8                 4587 	mov	r0,a
   16E5 E6                 4588 	mov	a,@r0
   16E6 C0 E0              4589 	push	acc
   16E8 08                 4590 	inc	r0
   16E9 E6                 4591 	mov	a,@r0
   16EA C0 E0              4592 	push	acc
   16EC E5*00              4593 	mov	a,_bp
   16EE 24 87              4594 	add	a,#0x87
   16F0 F8                 4595 	mov	r0,a
   16F1 E6                 4596 	mov	a,@r0
   16F2 C0 E0              4597 	push	acc
   16F4 08                 4598 	inc	r0
   16F5 E6                 4599 	mov	a,@r0
   16F6 C0 E0              4600 	push	acc
   16F8 C0 04              4601 	push	ar4
   16FA C0 05              4602 	push	ar5
   16FC C0 06              4603 	push	ar6
   16FE E5*00              4604 	mov	a,_bp
   1700 24 A4              4605 	add	a,#0xa4
   1702 F8                 4606 	mov	r0,a
   1703 E6                 4607 	mov	a,@r0
   1704 C0 E0              4608 	push	acc
   1706 08                 4609 	inc	r0
   1707 E6                 4610 	mov	a,@r0
   1708 C0 E0              4611 	push	acc
   170A E5*00              4612 	mov	a,_bp
   170C 24 B2              4613 	add	a,#0xb2
   170E F8                 4614 	mov	r0,a
   170F E6                 4615 	mov	a,@r0
   1710 C0 E0              4616 	push	acc
   1712 08                 4617 	inc	r0
   1713 E6                 4618 	mov	a,@r0
   1714 C0 E0              4619 	push	acc
   1716 E5*00              4620 	mov	a,_bp
   1718 24 AE              4621 	add	a,#0xae
   171A F8                 4622 	mov	r0,a
   171B E6                 4623 	mov	a,@r0
   171C C0 E0              4624 	push	acc
   171E 08                 4625 	inc	r0
   171F E6                 4626 	mov	a,@r0
   1720 C0 E0              4627 	push	acc
   1722 A8*00              4628 	mov	r0,_bp
   1724 08                 4629 	inc	r0
   1725 86 82              4630 	mov	dpl,@r0
   1727 08                 4631 	inc	r0
   1728 86 83              4632 	mov	dph,@r0
   172A 12s02r77           4633 	lcall	_relocate_section
   172D AC 82              4634 	mov	r4,dpl
   172F AD 83              4635 	mov	r5,dph
   1731 E5 81              4636 	mov	a,sp
   1733 24 EE              4637 	add	a,#0xee
   1735 F5 81              4638 	mov	sp,a
   1737 8C 02              4639 	mov	ar2,r4
   1739 8D 03              4640 	mov	ar3,r5
                           4641 ;	../../../core/loader/elfloader.c:545: if(ret != ELFLOADER_OK) {
   173B EA                 4642 	mov	a,r2
   173C 4B                 4643 	orl	a,r3
   173D 60 07              4644 	jz	00182$
                           4645 ;	../../../core/loader/elfloader.c:547: return ret;
   173F 8A 82              4646 	mov	dpl,r2
   1741 8B 83              4647 	mov	dph,r3
   1743 02s19r4F           4648 	ljmp	00207$
                           4649 ;	../../../core/loader/elfloader.c:552: PRINTF("elfloader: relocate data\n");
   1746                    4650 00182$:
                           4651 ;	../../../core/loader/elfloader.c:553: if(datarelasize > 0) {
   1746 E5*00              4652 	mov	a,_bp
   1748 24 BC              4653 	add	a,#0xbc
   174A F8                 4654 	mov	r0,a
   174B E6                 4655 	mov	a,@r0
   174C 08                 4656 	inc	r0
   174D 46                 4657 	orl	a,@r0
   174E 70 03              4658 	jnz	00259$
   1750 02s17rE4           4659 	ljmp	00189$
   1753                    4660 00259$:
                           4661 ;	../../../core/loader/elfloader.c:557: data.address,
   1753 90s00r2A           4662 	mov	dptr,#(_data + 0x0003)
   1756 E0                 4663 	movx	a,@dptr
   1757 FC                 4664 	mov	r4,a
   1758 A3                 4665 	inc	dptr
   1759 E0                 4666 	movx	a,@dptr
   175A FD                 4667 	mov	r5,a
   175B A3                 4668 	inc	dptr
   175C E0                 4669 	movx	a,@dptr
   175D FE                 4670 	mov	r6,a
                           4671 ;	../../../core/loader/elfloader.c:554: ret = relocate_section(fd,
   175E E5*00              4672 	mov	a,_bp
   1760 24 9D              4673 	add	a,#0x9d
   1762 F8                 4674 	mov	r0,a
   1763 E6                 4675 	mov	a,@r0
   1764 C0 E0              4676 	push	acc
   1766 E5*00              4677 	mov	a,_bp
   1768 24 A8              4678 	add	a,#0xa8
   176A F8                 4679 	mov	r0,a
   176B E6                 4680 	mov	a,@r0
   176C C0 E0              4681 	push	acc
   176E 08                 4682 	inc	r0
   176F E6                 4683 	mov	a,@r0
   1770 C0 E0              4684 	push	acc
   1772 E5*00              4685 	mov	a,_bp
   1774 24 A6              4686 	add	a,#0xa6
   1776 F8                 4687 	mov	r0,a
   1777 E6                 4688 	mov	a,@r0
   1778 C0 E0              4689 	push	acc
   177A 08                 4690 	inc	r0
   177B E6                 4691 	mov	a,@r0
   177C C0 E0              4692 	push	acc
   177E E5*00              4693 	mov	a,_bp
   1780 24 AA              4694 	add	a,#0xaa
   1782 F8                 4695 	mov	r0,a
   1783 E6                 4696 	mov	a,@r0
   1784 C0 E0              4697 	push	acc
   1786 08                 4698 	inc	r0
   1787 E6                 4699 	mov	a,@r0
   1788 C0 E0              4700 	push	acc
   178A E5*00              4701 	mov	a,_bp
   178C 24 87              4702 	add	a,#0x87
   178E F8                 4703 	mov	r0,a
   178F E6                 4704 	mov	a,@r0
   1790 C0 E0              4705 	push	acc
   1792 08                 4706 	inc	r0
   1793 E6                 4707 	mov	a,@r0
   1794 C0 E0              4708 	push	acc
   1796 C0 04              4709 	push	ar4
   1798 C0 05              4710 	push	ar5
   179A C0 06              4711 	push	ar6
   179C E5*00              4712 	mov	a,_bp
   179E 24 A2              4713 	add	a,#0xa2
   17A0 F8                 4714 	mov	r0,a
   17A1 E6                 4715 	mov	a,@r0
   17A2 C0 E0              4716 	push	acc
   17A4 08                 4717 	inc	r0
   17A5 E6                 4718 	mov	a,@r0
   17A6 C0 E0              4719 	push	acc
   17A8 E5*00              4720 	mov	a,_bp
   17AA 24 BC              4721 	add	a,#0xbc
   17AC F8                 4722 	mov	r0,a
   17AD E6                 4723 	mov	a,@r0
   17AE C0 E0              4724 	push	acc
   17B0 08                 4725 	inc	r0
   17B1 E6                 4726 	mov	a,@r0
   17B2 C0 E0              4727 	push	acc
   17B4 E5*00              4728 	mov	a,_bp
   17B6 24 AC              4729 	add	a,#0xac
   17B8 F8                 4730 	mov	r0,a
   17B9 E6                 4731 	mov	a,@r0
   17BA C0 E0              4732 	push	acc
   17BC 08                 4733 	inc	r0
   17BD E6                 4734 	mov	a,@r0
   17BE C0 E0              4735 	push	acc
   17C0 A8*00              4736 	mov	r0,_bp
   17C2 08                 4737 	inc	r0
   17C3 86 82              4738 	mov	dpl,@r0
   17C5 08                 4739 	inc	r0
   17C6 86 83              4740 	mov	dph,@r0
   17C8 12s02r77           4741 	lcall	_relocate_section
   17CB AC 82              4742 	mov	r4,dpl
   17CD AD 83              4743 	mov	r5,dph
   17CF E5 81              4744 	mov	a,sp
   17D1 24 EE              4745 	add	a,#0xee
   17D3 F5 81              4746 	mov	sp,a
   17D5 8C 02              4747 	mov	ar2,r4
   17D7 8D 03              4748 	mov	ar3,r5
                           4749 ;	../../../core/loader/elfloader.c:561: if(ret != ELFLOADER_OK) {
   17D9 EA                 4750 	mov	a,r2
   17DA 4B                 4751 	orl	a,r3
   17DB 60 07              4752 	jz	00189$
                           4753 ;	../../../core/loader/elfloader.c:563: return ret;
   17DD 8A 82              4754 	mov	dpl,r2
   17DF 8B 83              4755 	mov	dph,r3
   17E1 02s19r4F           4756 	ljmp	00207$
   17E4                    4757 00189$:
                           4758 ;	../../../core/loader/elfloader.c:568: elfloader_arch_write_rom(fd, textoff, textsize, text.address);
   17E4 90s00r36           4759 	mov	dptr,#(_text + 0x0003)
   17E7 E0                 4760 	movx	a,@dptr
   17E8 FA                 4761 	mov	r2,a
   17E9 A3                 4762 	inc	dptr
   17EA E0                 4763 	movx	a,@dptr
   17EB FB                 4764 	mov	r3,a
   17EC A3                 4765 	inc	dptr
   17ED E0                 4766 	movx	a,@dptr
   17EE FC                 4767 	mov	r4,a
   17EF C0 02              4768 	push	ar2
   17F1 C0 03              4769 	push	ar3
   17F3 C0 04              4770 	push	ar4
   17F5 E5*00              4771 	mov	a,_bp
   17F7 24 A0              4772 	add	a,#0xa0
   17F9 F8                 4773 	mov	r0,a
   17FA E6                 4774 	mov	a,@r0
   17FB C0 E0              4775 	push	acc
   17FD 08                 4776 	inc	r0
   17FE E6                 4777 	mov	a,@r0
   17FF C0 E0              4778 	push	acc
   1801 E5*00              4779 	mov	a,_bp
   1803 24 9E              4780 	add	a,#0x9e
   1805 F8                 4781 	mov	r0,a
   1806 E6                 4782 	mov	a,@r0
   1807 C0 E0              4783 	push	acc
   1809 08                 4784 	inc	r0
   180A E6                 4785 	mov	a,@r0
   180B C0 E0              4786 	push	acc
   180D A8*00              4787 	mov	r0,_bp
   180F 08                 4788 	inc	r0
   1810 86 82              4789 	mov	dpl,@r0
   1812 08                 4790 	inc	r0
   1813 86 83              4791 	mov	dph,@r0
   1815 12s00r00           4792 	lcall	_elfloader_arch_write_rom
   1818 E5 81              4793 	mov	a,sp
   181A 24 F9              4794 	add	a,#0xf9
   181C F5 81              4795 	mov	sp,a
                           4796 ;	../../../core/loader/elfloader.c:569: elfloader_arch_write_rom(fd, rodataoff, rodatasize, rodata.address);
   181E 90s00r30           4797 	mov	dptr,#(_rodata + 0x0003)
   1821 E0                 4798 	movx	a,@dptr
   1822 FA                 4799 	mov	r2,a
   1823 A3                 4800 	inc	dptr
   1824 E0                 4801 	movx	a,@dptr
   1825 FB                 4802 	mov	r3,a
   1826 A3                 4803 	inc	dptr
   1827 E0                 4804 	movx	a,@dptr
   1828 FC                 4805 	mov	r4,a
   1829 C0 02              4806 	push	ar2
   182B C0 03              4807 	push	ar3
   182D C0 04              4808 	push	ar4
   182F E5*00              4809 	mov	a,_bp
   1831 24 BA              4810 	add	a,#0xba
   1833 F8                 4811 	mov	r0,a
   1834 E6                 4812 	mov	a,@r0
   1835 C0 E0              4813 	push	acc
   1837 08                 4814 	inc	r0
   1838 E6                 4815 	mov	a,@r0
   1839 C0 E0              4816 	push	acc
   183B E5*00              4817 	mov	a,_bp
   183D 24 A4              4818 	add	a,#0xa4
   183F F8                 4819 	mov	r0,a
   1840 E6                 4820 	mov	a,@r0
   1841 C0 E0              4821 	push	acc
   1843 08                 4822 	inc	r0
   1844 E6                 4823 	mov	a,@r0
   1845 C0 E0              4824 	push	acc
   1847 A8*00              4825 	mov	r0,_bp
   1849 08                 4826 	inc	r0
   184A 86 82              4827 	mov	dpl,@r0
   184C 08                 4828 	inc	r0
   184D 86 83              4829 	mov	dph,@r0
   184F 12s00r00           4830 	lcall	_elfloader_arch_write_rom
   1852 E5 81              4831 	mov	a,sp
   1854 24 F9              4832 	add	a,#0xf9
   1856 F5 81              4833 	mov	sp,a
                           4834 ;	../../../core/loader/elfloader.c:571: memset(bss.address, 0, bsssize);
   1858 90s00r24           4835 	mov	dptr,#(_bss + 0x0003)
   185B E0                 4836 	movx	a,@dptr
   185C FA                 4837 	mov	r2,a
   185D A3                 4838 	inc	dptr
   185E E0                 4839 	movx	a,@dptr
   185F FB                 4840 	mov	r3,a
   1860 A3                 4841 	inc	dptr
   1861 E0                 4842 	movx	a,@dptr
   1862 FC                 4843 	mov	r4,a
   1863 E5*00              4844 	mov	a,_bp
   1865 24 B0              4845 	add	a,#0xb0
   1867 F8                 4846 	mov	r0,a
   1868 E6                 4847 	mov	a,@r0
   1869 C0 E0              4848 	push	acc
   186B 08                 4849 	inc	r0
   186C E6                 4850 	mov	a,@r0
   186D C0 E0              4851 	push	acc
   186F E4                 4852 	clr	a
   1870 C0 E0              4853 	push	acc
   1872 8A 82              4854 	mov	dpl,r2
   1874 8B 83              4855 	mov	dph,r3
   1876 8C F0              4856 	mov	b,r4
   1878 12s00r00           4857 	lcall	_memset
   187B 15 81              4858 	dec	sp
   187D 15 81              4859 	dec	sp
   187F 15 81              4860 	dec	sp
                           4861 ;	../../../core/loader/elfloader.c:572: seek_read(fd, dataoff, data.address, datasize);
   1881 90s00r2A           4862 	mov	dptr,#(_data + 0x0003)
   1884 E0                 4863 	movx	a,@dptr
   1885 FA                 4864 	mov	r2,a
   1886 A3                 4865 	inc	dptr
   1887 E0                 4866 	movx	a,@dptr
   1888 FB                 4867 	mov	r3,a
   1889 A3                 4868 	inc	dptr
   188A E0                 4869 	movx	a,@dptr
   188B FC                 4870 	mov	r4,a
   188C E5*00              4871 	mov	a,_bp
   188E 24 BE              4872 	add	a,#0xbe
   1890 F8                 4873 	mov	r0,a
   1891 E6                 4874 	mov	a,@r0
   1892 C0 E0              4875 	push	acc
   1894 08                 4876 	inc	r0
   1895 E6                 4877 	mov	a,@r0
   1896 C0 E0              4878 	push	acc
   1898 C0 02              4879 	push	ar2
   189A C0 03              4880 	push	ar3
   189C C0 04              4881 	push	ar4
   189E E5*00              4882 	mov	a,_bp
   18A0 24 A2              4883 	add	a,#0xa2
   18A2 F8                 4884 	mov	r0,a
   18A3 E6                 4885 	mov	a,@r0
   18A4 C0 E0              4886 	push	acc
   18A6 08                 4887 	inc	r0
   18A7 E6                 4888 	mov	a,@r0
   18A8 C0 E0              4889 	push	acc
   18AA A8*00              4890 	mov	r0,_bp
   18AC 08                 4891 	inc	r0
   18AD 86 82              4892 	mov	dpl,@r0
   18AF 08                 4893 	inc	r0
   18B0 86 83              4894 	mov	dph,@r0
   18B2 12s00r00           4895 	lcall	_seek_read
   18B5 E5 81              4896 	mov	a,sp
   18B7 24 F9              4897 	add	a,#0xf9
   18B9 F5 81              4898 	mov	sp,a
                           4899 ;	../../../core/loader/elfloader.c:575: process = (struct process **) find_local_symbol(fd, "autostart_processes", symtaboff, symtabsize, strtaboff);
   18BB E5*00              4900 	mov	a,_bp
   18BD 24 AA              4901 	add	a,#0xaa
   18BF F8                 4902 	mov	r0,a
   18C0 E6                 4903 	mov	a,@r0
   18C1 C0 E0              4904 	push	acc
   18C3 08                 4905 	inc	r0
   18C4 E6                 4906 	mov	a,@r0
   18C5 C0 E0              4907 	push	acc
   18C7 E5*00              4908 	mov	a,_bp
   18C9 24 A8              4909 	add	a,#0xa8
   18CB F8                 4910 	mov	r0,a
   18CC E6                 4911 	mov	a,@r0
   18CD C0 E0              4912 	push	acc
   18CF 08                 4913 	inc	r0
   18D0 E6                 4914 	mov	a,@r0
   18D1 C0 E0              4915 	push	acc
   18D3 E5*00              4916 	mov	a,_bp
   18D5 24 A6              4917 	add	a,#0xa6
   18D7 F8                 4918 	mov	r0,a
   18D8 E6                 4919 	mov	a,@r0
   18D9 C0 E0              4920 	push	acc
   18DB 08                 4921 	inc	r0
   18DC E6                 4922 	mov	a,@r0
   18DD C0 E0              4923 	push	acc
   18DF 74r07              4924 	mov	a,#__str_0
   18E1 C0 E0              4925 	push	acc
   18E3 74s00              4926 	mov	a,#(__str_0 >> 8)
   18E5 C0 E0              4927 	push	acc
   18E7 74 80              4928 	mov	a,#0x80
   18E9 C0 E0              4929 	push	acc
   18EB A8*00              4930 	mov	r0,_bp
   18ED 08                 4931 	inc	r0
   18EE 86 82              4932 	mov	dpl,@r0
   18F0 08                 4933 	inc	r0
   18F1 86 83              4934 	mov	dph,@r0
   18F3 12s00r5F           4935 	lcall	_find_local_symbol
   18F6 AA 82              4936 	mov	r2,dpl
   18F8 AB 83              4937 	mov	r3,dph
   18FA AC F0              4938 	mov	r4,b
   18FC E5 81              4939 	mov	a,sp
   18FE 24 F7              4940 	add	a,#0xf7
   1900 F5 81              4941 	mov	sp,a
                           4942 ;	../../../core/loader/elfloader.c:576: if(process != NULL) {
   1902 EA                 4943 	mov	a,r2
   1903 4B                 4944 	orl	a,r3
   1904 4C                 4945 	orl	a,r4
   1905 60 10              4946 	jz	00194$
                           4947 ;	../../../core/loader/elfloader.c:578: elfloader_autostart_processes = process;
   1907 90s00r1E           4948 	mov	dptr,#_elfloader_autostart_processes
   190A EA                 4949 	mov	a,r2
   190B F0                 4950 	movx	@dptr,a
   190C A3                 4951 	inc	dptr
   190D EB                 4952 	mov	a,r3
   190E F0                 4953 	movx	@dptr,a
   190F A3                 4954 	inc	dptr
   1910 EC                 4955 	mov	a,r4
   1911 F0                 4956 	movx	@dptr,a
                           4957 ;	../../../core/loader/elfloader.c:579: return ELFLOADER_OK;
   1912 90 00 00           4958 	mov	dptr,#0x0000
                           4959 ;	../../../core/loader/elfloader.c:581: PRINTF("elfloader: no autostart\n");
   1915 80 38              4960 	sjmp	00207$
   1917                    4961 00194$:
                           4962 ;	../../../core/loader/elfloader.c:582: process = (struct process **) find_program_processes(fd, symtaboff, symtabsize, strtaboff);
   1917 E5*00              4963 	mov	a,_bp
   1919 24 AA              4964 	add	a,#0xaa
   191B F8                 4965 	mov	r0,a
   191C E6                 4966 	mov	a,@r0
   191D C0 E0              4967 	push	acc
   191F 08                 4968 	inc	r0
   1920 E6                 4969 	mov	a,@r0
   1921 C0 E0              4970 	push	acc
   1923 E5*00              4971 	mov	a,_bp
   1925 24 A8              4972 	add	a,#0xa8
   1927 F8                 4973 	mov	r0,a
   1928 E6                 4974 	mov	a,@r0
   1929 C0 E0              4975 	push	acc
   192B 08                 4976 	inc	r0
   192C E6                 4977 	mov	a,@r0
   192D C0 E0              4978 	push	acc
   192F E5*00              4979 	mov	a,_bp
   1931 24 A6              4980 	add	a,#0xa6
   1933 F8                 4981 	mov	r0,a
   1934 E6                 4982 	mov	a,@r0
   1935 C0 E0              4983 	push	acc
   1937 08                 4984 	inc	r0
   1938 E6                 4985 	mov	a,@r0
   1939 C0 E0              4986 	push	acc
   193B A8*00              4987 	mov	r0,_bp
   193D 08                 4988 	inc	r0
   193E 86 82              4989 	mov	dpl,@r0
   1940 08                 4990 	inc	r0
   1941 86 83              4991 	mov	dph,@r0
   1943 12s07r65           4992 	lcall	_find_program_processes
   1946 E5 81              4993 	mov	a,sp
   1948 24 FA              4994 	add	a,#0xfa
   194A F5 81              4995 	mov	sp,a
                           4996 ;	../../../core/loader/elfloader.c:586: return ELFLOADER_NO_STARTPOINT;
   194C 90 00 07           4997 	mov	dptr,#0x0007
   194F                    4998 00207$:
   194F 85*00 81           4999 	mov	sp,_bp
   1952 D0*00              5000 	pop	_bp
   1954 22                 5001 	ret
                           5002 	.area CSEG    (CODE)
                           5003 	.area CONST   (CODE)
   0000                    5004 _elf_magic_header:
   0000 7F                 5005 	.db #0x7F	; 127
   0001 45                 5006 	.db #0x45	; 69	E
   0002 4C                 5007 	.db #0x4C	; 76	L
   0003 46                 5008 	.db #0x46	; 70	F
   0004 01                 5009 	.db #0x01	; 1
   0005 01                 5010 	.db #0x01	; 1
   0006 01                 5011 	.db #0x01	; 1
   0007                    5012 __str_0:
   0007 61 75 74 6F 73 74  5013 	.ascii "autostart_processes"
        61 72 74 5F 70 72
        6F 63 65 73 73 65
        73
   001A 00                 5014 	.db 0x00
   001B                    5015 __str_1:
   001B 2E 74 65 78 74     5016 	.ascii ".text"
   0020 00                 5017 	.db 0x00
   0021                    5018 __str_2:
   0021 2E 72 65 6C 2E 74  5019 	.ascii ".rel.text"
        65 78 74
   002A 00                 5020 	.db 0x00
   002B                    5021 __str_3:
   002B 2E 72 65 6C 61 2E  5022 	.ascii ".rela.text"
        74 65 78 74
   0035 00                 5023 	.db 0x00
   0036                    5024 __str_4:
   0036 2E 64 61 74 61     5025 	.ascii ".data"
   003B 00                 5026 	.db 0x00
   003C                    5027 __str_5:
   003C 2E 72 6F 64 61 74  5028 	.ascii ".rodata"
        61
   0043 00                 5029 	.db 0x00
   0044                    5030 __str_6:
   0044 2E 72 65 6C 2E 72  5031 	.ascii ".rel.rodata"
        6F 64 61 74 61
   004F 00                 5032 	.db 0x00
   0050                    5033 __str_7:
   0050 2E 72 65 6C 61 2E  5034 	.ascii ".rela.rodata"
        72 6F 64 61 74 61
   005C 00                 5035 	.db 0x00
   005D                    5036 __str_8:
   005D 2E 72 65 6C 2E 64  5037 	.ascii ".rel.data"
        61 74 61
   0066 00                 5038 	.db 0x00
   0067                    5039 __str_9:
   0067 2E 72 65 6C 61 2E  5040 	.ascii ".rela.data"
        64 61 74 61
   0071 00                 5041 	.db 0x00
   0072                    5042 __str_10:
   0072 2E 62 73 73        5043 	.ascii ".bss"
   0076 00                 5044 	.db 0x00
                           5045 	.area XINIT   (CODE)
                           5046 	.area CABS    (ABS,CODE)
