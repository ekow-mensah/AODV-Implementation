                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6121 (Nov 17 2015) (CYGWIN)
                              4 ; This file was generated Sat Jan 27 13:25:35 2018
                              5 ;--------------------------------------------------------
                              6 	.module rudolph2
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _IRCON2_P2IF
                             13 	.globl _IRCON2_UTX0IF
                             14 	.globl _IRCON2_UTX1IF
                             15 	.globl _IRCON2_P1IF
                             16 	.globl _IRCON2_WDTIF
                             17 	.globl _CY
                             18 	.globl _AC
                             19 	.globl _F0
                             20 	.globl _RS1
                             21 	.globl _RS0
                             22 	.globl _OV
                             23 	.globl _F1
                             24 	.globl _P
                             25 	.globl _IRCON_DMAIF
                             26 	.globl _IRCON_T1IF
                             27 	.globl _IRCON_T2IF
                             28 	.globl _IRCON_T3IF
                             29 	.globl _IRCON_T4IF
                             30 	.globl _IRCON_P0IF
                             31 	.globl _IRCON_STIF
                             32 	.globl _IEN1_DMAIE
                             33 	.globl _IEN1_T1IE
                             34 	.globl _IEN1_T2IE
                             35 	.globl _IEN1_T3IE
                             36 	.globl _IEN1_T4IE
                             37 	.globl _IEN1_P0IE
                             38 	.globl _IEN0_RFERRIE
                             39 	.globl _IEN0_ADCIE
                             40 	.globl _IEN0_URX0IE
                             41 	.globl _IEN0_URX1IE
                             42 	.globl _IEN0_ENCIE
                             43 	.globl _IEN0_STIE
                             44 	.globl _IEN0_EA
                             45 	.globl _EA
                             46 	.globl _P2_4
                             47 	.globl _P2_3
                             48 	.globl _P2_2
                             49 	.globl _P2_1
                             50 	.globl _P2_0
                             51 	.globl _S0CON_ENCIF_0
                             52 	.globl _S0CON_ENCIF_1
                             53 	.globl _P1_7
                             54 	.globl _P1_6
                             55 	.globl _P1_5
                             56 	.globl _P1_4
                             57 	.globl _P1_3
                             58 	.globl _P1_2
                             59 	.globl _P1_1
                             60 	.globl _P1_0
                             61 	.globl _TCON_IT0
                             62 	.globl _TCON_RFERRIF
                             63 	.globl _TCON_IT1
                             64 	.globl _TCON_URX0IF
                             65 	.globl _TCON_ADCIF
                             66 	.globl _TCON_URX1IF
                             67 	.globl _P0_0
                             68 	.globl _P0_1
                             69 	.globl _P0_2
                             70 	.globl _P0_3
                             71 	.globl _P0_4
                             72 	.globl _P0_5
                             73 	.globl _P0_6
                             74 	.globl _P0_7
                             75 	.globl _P2DIR
                             76 	.globl _P1DIR
                             77 	.globl _P0DIR
                             78 	.globl _U1GCR
                             79 	.globl _U1UCR
                             80 	.globl _U1BAUD
                             81 	.globl _U1BUF
                             82 	.globl _U1CSR
                             83 	.globl _P2INP
                             84 	.globl _P1INP
                             85 	.globl _P2SEL
                             86 	.globl _P1SEL
                             87 	.globl _P0SEL
                             88 	.globl _ADCCFG
                             89 	.globl _PERCFG
                             90 	.globl _B
                             91 	.globl _T4CC1
                             92 	.globl _T4CCTL1
                             93 	.globl _T4CC0
                             94 	.globl _T4CCTL0
                             95 	.globl _T4CTL
                             96 	.globl _T4CNT
                             97 	.globl _RFIF
                             98 	.globl _IRCON2
                             99 	.globl _T1CCTL2
                            100 	.globl _T1CCTL1
                            101 	.globl _T1CCTL0
                            102 	.globl _T1CTL
                            103 	.globl _T1CNTH
                            104 	.globl _T1CNTL
                            105 	.globl _RFST
                            106 	.globl _ACC
                            107 	.globl _T1CC2H
                            108 	.globl _T1CC2L
                            109 	.globl _T1CC1H
                            110 	.globl _T1CC1L
                            111 	.globl _T1CC0H
                            112 	.globl _T1CC0L
                            113 	.globl _RFD
                            114 	.globl _TIMIF
                            115 	.globl _DMAREQ
                            116 	.globl _DMAARM
                            117 	.globl _DMA0CFGH
                            118 	.globl _DMA0CFGL
                            119 	.globl _DMA1CFGH
                            120 	.globl _DMA1CFGL
                            121 	.globl _DMAIRQ
                            122 	.globl _PSW
                            123 	.globl _T3CC1
                            124 	.globl _T3CCTL1
                            125 	.globl _T3CC0
                            126 	.globl _T3CCTL0
                            127 	.globl _T3CTL
                            128 	.globl _T3CNT
                            129 	.globl _WDCTL
                            130 	.globl _T2CON
                            131 	.globl _MEMCTR
                            132 	.globl _CLKCON
                            133 	.globl _U0GCR
                            134 	.globl _U0UCR
                            135 	.globl _T2CNF
                            136 	.globl _U0BAUD
                            137 	.globl _U0BUF
                            138 	.globl _IRCON
                            139 	.globl _SLEEP
                            140 	.globl _RNDH
                            141 	.globl _RNDL
                            142 	.globl _ADCH
                            143 	.globl _ADCL
                            144 	.globl _IP1
                            145 	.globl _IEN1
                            146 	.globl _RCCTL
                            147 	.globl _ADCCON3
                            148 	.globl _ADCCON2
                            149 	.globl _ADCCON1
                            150 	.globl _ENCCS
                            151 	.globl _ENCDO
                            152 	.globl _ENCDI
                            153 	.globl _FWDATA
                            154 	.globl _FCTL
                            155 	.globl _FADDRH
                            156 	.globl _FADDRL
                            157 	.globl _FWT
                            158 	.globl _IP0
                            159 	.globl _IEN0
                            160 	.globl _IE
                            161 	.globl _T2THD
                            162 	.globl _T2TLD
                            163 	.globl _T2CAPHPH
                            164 	.globl _T2CAPLPL
                            165 	.globl _T2OF2
                            166 	.globl _T2OF1
                            167 	.globl _T2OF0
                            168 	.globl _P2
                            169 	.globl _PSBANK
                            170 	.globl _FMAP
                            171 	.globl _T2PEROF2
                            172 	.globl _T2PEROF1
                            173 	.globl _T2PEROF0
                            174 	.globl _S1CON
                            175 	.globl _IEN2
                            176 	.globl _HSRC
                            177 	.globl _S0CON
                            178 	.globl _ST2
                            179 	.globl _ST1
                            180 	.globl _ST0
                            181 	.globl _T2CMP
                            182 	.globl __XPAGE
                            183 	.globl _DPS
                            184 	.globl _RFIM
                            185 	.globl _P1
                            186 	.globl _P0INP
                            187 	.globl _P1IEN
                            188 	.globl _PICTL
                            189 	.globl _P2IFG
                            190 	.globl _P1IFG
                            191 	.globl _P0IFG
                            192 	.globl _TCON
                            193 	.globl _PCON
                            194 	.globl _U0CSR
                            195 	.globl _DPH1
                            196 	.globl _DPL1
                            197 	.globl _DPH0
                            198 	.globl _DPL0
                            199 	.globl _SP
                            200 	.globl _P0
                            201 	.globl _ADC_SHADOW
                            202 	.globl _U1BUF_SHADOW
                            203 	.globl _RFD_SHADOW
                            204 	.globl _U0BUF_SHADOW
                            205 	.globl _RFSTATUS
                            206 	.globl _CHIPID
                            207 	.globl _CHVER
                            208 	.globl _FSMTC1
                            209 	.globl _RXFIFOCNT
                            210 	.globl _IOCFG3
                            211 	.globl _IOCFG2
                            212 	.globl _IOCFG1
                            213 	.globl _IOCFG0
                            214 	.globl _SHORTADDRL
                            215 	.globl _SHORTADDRH
                            216 	.globl _PANIDL
                            217 	.globl _PANIDH
                            218 	.globl _IEEE_ADDR7
                            219 	.globl _IEEE_ADDR6
                            220 	.globl _IEEE_ADDR5
                            221 	.globl _IEEE_ADDR4
                            222 	.globl _IEEE_ADDR3
                            223 	.globl _IEEE_ADDR2
                            224 	.globl _IEEE_ADDR1
                            225 	.globl _IEEE_ADDR0
                            226 	.globl _DACTSTL
                            227 	.globl _DACTSTH
                            228 	.globl _ADCTSTL
                            229 	.globl _ADCTSTH
                            230 	.globl _FSMSTATE
                            231 	.globl _AGCCTRLL
                            232 	.globl _AGCCTRLH
                            233 	.globl _MANORL
                            234 	.globl _MANORH
                            235 	.globl _MANANDL
                            236 	.globl _MANANDH
                            237 	.globl _FSMTCL
                            238 	.globl _FSMTCH
                            239 	.globl _RFPWR
                            240 	.globl _CSPT
                            241 	.globl _CSPCTRL
                            242 	.globl _CSPZ
                            243 	.globl _CSPY
                            244 	.globl _CSPX
                            245 	.globl _FSCTRLL
                            246 	.globl _FSCTRLH
                            247 	.globl _RXCTRL1L
                            248 	.globl _RXCTRL1H
                            249 	.globl _RXCTRL0L
                            250 	.globl _RXCTRL0H
                            251 	.globl _TXCTRLL
                            252 	.globl _TXCTRLH
                            253 	.globl _SYNCWORDL
                            254 	.globl _SYNCWORDH
                            255 	.globl _RSSIL
                            256 	.globl _RSSIH
                            257 	.globl _MDMCTRL1L
                            258 	.globl _MDMCTRL1H
                            259 	.globl _MDMCTRL0L
                            260 	.globl _MDMCTRL0H
                            261 	.globl _rudolph2_open
                            262 	.globl _rudolph2_close
                            263 	.globl _rudolph2_send
                            264 	.globl _rudolph2_stop
                            265 ;--------------------------------------------------------
                            266 ; special function registers
                            267 ;--------------------------------------------------------
                            268 	.area RSEG    (ABS,DATA)
   0000                     269 	.org 0x0000
                    0080    270 _P0	=	0x0080
                    0081    271 _SP	=	0x0081
                    0082    272 _DPL0	=	0x0082
                    0083    273 _DPH0	=	0x0083
                    0084    274 _DPL1	=	0x0084
                    0085    275 _DPH1	=	0x0085
                    0086    276 _U0CSR	=	0x0086
                    0087    277 _PCON	=	0x0087
                    0088    278 _TCON	=	0x0088
                    0089    279 _P0IFG	=	0x0089
                    008A    280 _P1IFG	=	0x008a
                    008B    281 _P2IFG	=	0x008b
                    008C    282 _PICTL	=	0x008c
                    008D    283 _P1IEN	=	0x008d
                    008F    284 _P0INP	=	0x008f
                    0090    285 _P1	=	0x0090
                    0091    286 _RFIM	=	0x0091
                    0092    287 _DPS	=	0x0092
                    0093    288 __XPAGE	=	0x0093
                    0094    289 _T2CMP	=	0x0094
                    0095    290 _ST0	=	0x0095
                    0096    291 _ST1	=	0x0096
                    0097    292 _ST2	=	0x0097
                    0098    293 _S0CON	=	0x0098
                    0099    294 _HSRC	=	0x0099
                    009A    295 _IEN2	=	0x009a
                    009B    296 _S1CON	=	0x009b
                    009C    297 _T2PEROF0	=	0x009c
                    009D    298 _T2PEROF1	=	0x009d
                    009E    299 _T2PEROF2	=	0x009e
                    009F    300 _FMAP	=	0x009f
                    009F    301 _PSBANK	=	0x009f
                    00A0    302 _P2	=	0x00a0
                    00A1    303 _T2OF0	=	0x00a1
                    00A2    304 _T2OF1	=	0x00a2
                    00A3    305 _T2OF2	=	0x00a3
                    00A4    306 _T2CAPLPL	=	0x00a4
                    00A5    307 _T2CAPHPH	=	0x00a5
                    00A6    308 _T2TLD	=	0x00a6
                    00A7    309 _T2THD	=	0x00a7
                    00A8    310 _IE	=	0x00a8
                    00A8    311 _IEN0	=	0x00a8
                    00A9    312 _IP0	=	0x00a9
                    00AB    313 _FWT	=	0x00ab
                    00AC    314 _FADDRL	=	0x00ac
                    00AD    315 _FADDRH	=	0x00ad
                    00AE    316 _FCTL	=	0x00ae
                    00AF    317 _FWDATA	=	0x00af
                    00B1    318 _ENCDI	=	0x00b1
                    00B2    319 _ENCDO	=	0x00b2
                    00B3    320 _ENCCS	=	0x00b3
                    00B4    321 _ADCCON1	=	0x00b4
                    00B5    322 _ADCCON2	=	0x00b5
                    00B6    323 _ADCCON3	=	0x00b6
                    00B7    324 _RCCTL	=	0x00b7
                    00B8    325 _IEN1	=	0x00b8
                    00B9    326 _IP1	=	0x00b9
                    00BA    327 _ADCL	=	0x00ba
                    00BB    328 _ADCH	=	0x00bb
                    00BC    329 _RNDL	=	0x00bc
                    00BD    330 _RNDH	=	0x00bd
                    00BE    331 _SLEEP	=	0x00be
                    00C0    332 _IRCON	=	0x00c0
                    00C1    333 _U0BUF	=	0x00c1
                    00C2    334 _U0BAUD	=	0x00c2
                    00C3    335 _T2CNF	=	0x00c3
                    00C4    336 _U0UCR	=	0x00c4
                    00C5    337 _U0GCR	=	0x00c5
                    00C6    338 _CLKCON	=	0x00c6
                    00C7    339 _MEMCTR	=	0x00c7
                    00C8    340 _T2CON	=	0x00c8
                    00C9    341 _WDCTL	=	0x00c9
                    00CA    342 _T3CNT	=	0x00ca
                    00CB    343 _T3CTL	=	0x00cb
                    00CC    344 _T3CCTL0	=	0x00cc
                    00CD    345 _T3CC0	=	0x00cd
                    00CE    346 _T3CCTL1	=	0x00ce
                    00CF    347 _T3CC1	=	0x00cf
                    00D0    348 _PSW	=	0x00d0
                    00D1    349 _DMAIRQ	=	0x00d1
                    00D2    350 _DMA1CFGL	=	0x00d2
                    00D3    351 _DMA1CFGH	=	0x00d3
                    00D4    352 _DMA0CFGL	=	0x00d4
                    00D5    353 _DMA0CFGH	=	0x00d5
                    00D6    354 _DMAARM	=	0x00d6
                    00D7    355 _DMAREQ	=	0x00d7
                    00D8    356 _TIMIF	=	0x00d8
                    00D9    357 _RFD	=	0x00d9
                    00DA    358 _T1CC0L	=	0x00da
                    00DB    359 _T1CC0H	=	0x00db
                    00DC    360 _T1CC1L	=	0x00dc
                    00DD    361 _T1CC1H	=	0x00dd
                    00DE    362 _T1CC2L	=	0x00de
                    00DF    363 _T1CC2H	=	0x00df
                    00E0    364 _ACC	=	0x00e0
                    00E1    365 _RFST	=	0x00e1
                    00E2    366 _T1CNTL	=	0x00e2
                    00E3    367 _T1CNTH	=	0x00e3
                    00E4    368 _T1CTL	=	0x00e4
                    00E5    369 _T1CCTL0	=	0x00e5
                    00E6    370 _T1CCTL1	=	0x00e6
                    00E7    371 _T1CCTL2	=	0x00e7
                    00E8    372 _IRCON2	=	0x00e8
                    00E9    373 _RFIF	=	0x00e9
                    00EA    374 _T4CNT	=	0x00ea
                    00EB    375 _T4CTL	=	0x00eb
                    00EC    376 _T4CCTL0	=	0x00ec
                    00ED    377 _T4CC0	=	0x00ed
                    00EE    378 _T4CCTL1	=	0x00ee
                    00EF    379 _T4CC1	=	0x00ef
                    00F0    380 _B	=	0x00f0
                    00F1    381 _PERCFG	=	0x00f1
                    00F2    382 _ADCCFG	=	0x00f2
                    00F3    383 _P0SEL	=	0x00f3
                    00F4    384 _P1SEL	=	0x00f4
                    00F5    385 _P2SEL	=	0x00f5
                    00F6    386 _P1INP	=	0x00f6
                    00F7    387 _P2INP	=	0x00f7
                    00F8    388 _U1CSR	=	0x00f8
                    00F9    389 _U1BUF	=	0x00f9
                    00FA    390 _U1BAUD	=	0x00fa
                    00FB    391 _U1UCR	=	0x00fb
                    00FC    392 _U1GCR	=	0x00fc
                    00FD    393 _P0DIR	=	0x00fd
                    00FE    394 _P1DIR	=	0x00fe
                    00FF    395 _P2DIR	=	0x00ff
                            396 ;--------------------------------------------------------
                            397 ; special function bits
                            398 ;--------------------------------------------------------
                            399 	.area RSEG    (ABS,DATA)
   0000                     400 	.org 0x0000
                    0087    401 _P0_7	=	0x0087
                    0086    402 _P0_6	=	0x0086
                    0085    403 _P0_5	=	0x0085
                    0084    404 _P0_4	=	0x0084
                    0083    405 _P0_3	=	0x0083
                    0082    406 _P0_2	=	0x0082
                    0081    407 _P0_1	=	0x0081
                    0080    408 _P0_0	=	0x0080
                    008F    409 _TCON_URX1IF	=	0x008f
                    008D    410 _TCON_ADCIF	=	0x008d
                    008B    411 _TCON_URX0IF	=	0x008b
                    008A    412 _TCON_IT1	=	0x008a
                    0089    413 _TCON_RFERRIF	=	0x0089
                    0088    414 _TCON_IT0	=	0x0088
                    0090    415 _P1_0	=	0x0090
                    0091    416 _P1_1	=	0x0091
                    0092    417 _P1_2	=	0x0092
                    0093    418 _P1_3	=	0x0093
                    0094    419 _P1_4	=	0x0094
                    0095    420 _P1_5	=	0x0095
                    0096    421 _P1_6	=	0x0096
                    0097    422 _P1_7	=	0x0097
                    0099    423 _S0CON_ENCIF_1	=	0x0099
                    0098    424 _S0CON_ENCIF_0	=	0x0098
                    00A0    425 _P2_0	=	0x00a0
                    00A1    426 _P2_1	=	0x00a1
                    00A2    427 _P2_2	=	0x00a2
                    00A3    428 _P2_3	=	0x00a3
                    00A4    429 _P2_4	=	0x00a4
                    00AF    430 _EA	=	0x00af
                    00AF    431 _IEN0_EA	=	0x00af
                    00AD    432 _IEN0_STIE	=	0x00ad
                    00AC    433 _IEN0_ENCIE	=	0x00ac
                    00AB    434 _IEN0_URX1IE	=	0x00ab
                    00AA    435 _IEN0_URX0IE	=	0x00aa
                    00A9    436 _IEN0_ADCIE	=	0x00a9
                    00A8    437 _IEN0_RFERRIE	=	0x00a8
                    00BD    438 _IEN1_P0IE	=	0x00bd
                    00BC    439 _IEN1_T4IE	=	0x00bc
                    00BB    440 _IEN1_T3IE	=	0x00bb
                    00BA    441 _IEN1_T2IE	=	0x00ba
                    00B9    442 _IEN1_T1IE	=	0x00b9
                    00B8    443 _IEN1_DMAIE	=	0x00b8
                    00C7    444 _IRCON_STIF	=	0x00c7
                    00C5    445 _IRCON_P0IF	=	0x00c5
                    00C4    446 _IRCON_T4IF	=	0x00c4
                    00C3    447 _IRCON_T3IF	=	0x00c3
                    00C2    448 _IRCON_T2IF	=	0x00c2
                    00C1    449 _IRCON_T1IF	=	0x00c1
                    00C0    450 _IRCON_DMAIF	=	0x00c0
                    00D0    451 _P	=	0x00d0
                    00D1    452 _F1	=	0x00d1
                    00D2    453 _OV	=	0x00d2
                    00D3    454 _RS0	=	0x00d3
                    00D4    455 _RS1	=	0x00d4
                    00D5    456 _F0	=	0x00d5
                    00D6    457 _AC	=	0x00d6
                    00D7    458 _CY	=	0x00d7
                    00EC    459 _IRCON2_WDTIF	=	0x00ec
                    00EB    460 _IRCON2_P1IF	=	0x00eb
                    00EA    461 _IRCON2_UTX1IF	=	0x00ea
                    00E9    462 _IRCON2_UTX0IF	=	0x00e9
                    00E8    463 _IRCON2_P2IF	=	0x00e8
                            464 ;--------------------------------------------------------
                            465 ; overlayable register banks
                            466 ;--------------------------------------------------------
                            467 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     468 	.ds 8
                            469 ;--------------------------------------------------------
                            470 ; internal ram data
                            471 ;--------------------------------------------------------
                            472 	.area DSEG    (DATA)
                            473 ;--------------------------------------------------------
                            474 ; overlayable items in internal ram 
                            475 ;--------------------------------------------------------
                            476 	.area OSEG    (OVR,DATA)
                            477 ;--------------------------------------------------------
                            478 ; indirectly addressable internal ram data
                            479 ;--------------------------------------------------------
                            480 	.area ISEG    (DATA)
                            481 ;--------------------------------------------------------
                            482 ; absolute internal ram data
                            483 ;--------------------------------------------------------
                            484 	.area IABS    (ABS,DATA)
                            485 	.area IABS    (ABS,DATA)
                            486 ;--------------------------------------------------------
                            487 ; bit data
                            488 ;--------------------------------------------------------
                            489 	.area BSEG    (BIT)
                            490 ;--------------------------------------------------------
                            491 ; paged external ram data
                            492 ;--------------------------------------------------------
                            493 	.area PSEG    (PAG,XDATA)
                            494 ;--------------------------------------------------------
                            495 ; external ram data
                            496 ;--------------------------------------------------------
                            497 	.area XSEG    (XDATA)
                    DF02    498 _MDMCTRL0H	=	0xdf02
                    DF03    499 _MDMCTRL0L	=	0xdf03
                    DF04    500 _MDMCTRL1H	=	0xdf04
                    DF05    501 _MDMCTRL1L	=	0xdf05
                    DF06    502 _RSSIH	=	0xdf06
                    DF07    503 _RSSIL	=	0xdf07
                    DF08    504 _SYNCWORDH	=	0xdf08
                    DF09    505 _SYNCWORDL	=	0xdf09
                    DF0A    506 _TXCTRLH	=	0xdf0a
                    DF0B    507 _TXCTRLL	=	0xdf0b
                    DF0C    508 _RXCTRL0H	=	0xdf0c
                    DF0D    509 _RXCTRL0L	=	0xdf0d
                    DF0E    510 _RXCTRL1H	=	0xdf0e
                    DF0F    511 _RXCTRL1L	=	0xdf0f
                    DF10    512 _FSCTRLH	=	0xdf10
                    DF11    513 _FSCTRLL	=	0xdf11
                    DF12    514 _CSPX	=	0xdf12
                    DF13    515 _CSPY	=	0xdf13
                    DF14    516 _CSPZ	=	0xdf14
                    DF15    517 _CSPCTRL	=	0xdf15
                    DF16    518 _CSPT	=	0xdf16
                    DF17    519 _RFPWR	=	0xdf17
                    DF20    520 _FSMTCH	=	0xdf20
                    DF21    521 _FSMTCL	=	0xdf21
                    DF22    522 _MANANDH	=	0xdf22
                    DF23    523 _MANANDL	=	0xdf23
                    DF24    524 _MANORH	=	0xdf24
                    DF25    525 _MANORL	=	0xdf25
                    DF26    526 _AGCCTRLH	=	0xdf26
                    DF27    527 _AGCCTRLL	=	0xdf27
                    DF39    528 _FSMSTATE	=	0xdf39
                    DF3A    529 _ADCTSTH	=	0xdf3a
                    DF3B    530 _ADCTSTL	=	0xdf3b
                    DF3C    531 _DACTSTH	=	0xdf3c
                    DF3D    532 _DACTSTL	=	0xdf3d
                    DF43    533 _IEEE_ADDR0	=	0xdf43
                    DF44    534 _IEEE_ADDR1	=	0xdf44
                    DF45    535 _IEEE_ADDR2	=	0xdf45
                    DF46    536 _IEEE_ADDR3	=	0xdf46
                    DF47    537 _IEEE_ADDR4	=	0xdf47
                    DF48    538 _IEEE_ADDR5	=	0xdf48
                    DF49    539 _IEEE_ADDR6	=	0xdf49
                    DF4A    540 _IEEE_ADDR7	=	0xdf4a
                    DF4B    541 _PANIDH	=	0xdf4b
                    DF4C    542 _PANIDL	=	0xdf4c
                    DF4D    543 _SHORTADDRH	=	0xdf4d
                    DF4E    544 _SHORTADDRL	=	0xdf4e
                    DF4F    545 _IOCFG0	=	0xdf4f
                    DF50    546 _IOCFG1	=	0xdf50
                    DF51    547 _IOCFG2	=	0xdf51
                    DF52    548 _IOCFG3	=	0xdf52
                    DF53    549 _RXFIFOCNT	=	0xdf53
                    DF54    550 _FSMTC1	=	0xdf54
                    DF60    551 _CHVER	=	0xdf60
                    DF61    552 _CHIPID	=	0xdf61
                    DF62    553 _RFSTATUS	=	0xdf62
                    DFC1    554 _U0BUF_SHADOW	=	0xdfc1
                    DFD9    555 _RFD_SHADOW	=	0xdfd9
                    DFF9    556 _U1BUF_SHADOW	=	0xdff9
                    DFBA    557 _ADC_SHADOW	=	0xdfba
                            558 ;--------------------------------------------------------
                            559 ; absolute external ram data
                            560 ;--------------------------------------------------------
                            561 	.area XABS    (ABS,XDATA)
                            562 ;--------------------------------------------------------
                            563 ; external initialized ram data
                            564 ;--------------------------------------------------------
                            565 	.area XISEG   (XDATA)
                            566 	.area HOME    (CODE)
                            567 	.area GSINIT0 (CODE)
                            568 	.area GSINIT1 (CODE)
                            569 	.area GSINIT2 (CODE)
                            570 	.area GSINIT3 (CODE)
                            571 	.area GSINIT4 (CODE)
                            572 	.area GSINIT5 (CODE)
                            573 	.area GSINIT  (CODE)
                            574 	.area GSFINAL (CODE)
                            575 	.area CSEG    (CODE)
                            576 ;--------------------------------------------------------
                            577 ; global & static initialisations
                            578 ;--------------------------------------------------------
                            579 	.area HOME    (CODE)
                            580 	.area GSINIT  (CODE)
                            581 	.area GSFINAL (CODE)
                            582 	.area GSINIT  (CODE)
                            583 ;--------------------------------------------------------
                            584 ; Home
                            585 ;--------------------------------------------------------
                            586 	.area HOME    (CODE)
                            587 	.area HOME    (CODE)
                            588 ;--------------------------------------------------------
                            589 ; code
                            590 ;--------------------------------------------------------
                            591 	.area CSEG    (CODE)
                            592 ;------------------------------------------------------------
                            593 ;Allocation info for local variables in function 'read_data'
                            594 ;------------------------------------------------------------
                            595 ;dataptr                   Allocated to stack - offset -5
                            596 ;chunk                     Allocated to stack - offset -7
                            597 ;c                         Allocated to stack - offset 1
                            598 ;len                       Allocated to registers r5 r6 
                            599 ;------------------------------------------------------------
                            600 ;	../../../core/net/rime/rudolph2.c:97: read_data(struct rudolph2_conn *c, uint8_t *dataptr, int chunk)
                            601 ;	-----------------------------------------
                            602 ;	 function read_data
                            603 ;	-----------------------------------------
   0000                     604 _read_data:
                    0002    605 	ar2 = 0x02
                    0003    606 	ar3 = 0x03
                    0004    607 	ar4 = 0x04
                    0005    608 	ar5 = 0x05
                    0006    609 	ar6 = 0x06
                    0007    610 	ar7 = 0x07
                    0000    611 	ar0 = 0x00
                    0001    612 	ar1 = 0x01
   0000 C0*00               613 	push	_bp
   0002 85 81*00            614 	mov	_bp,sp
   0005 C0 82               615 	push	dpl
   0007 C0 83               616 	push	dph
   0009 C0 F0               617 	push	b
                            618 ;	../../../core/net/rime/rudolph2.c:99: int len = 0;
   000B 7D 00               619 	mov	r5,#0x00
   000D 7E 00               620 	mov	r6,#0x00
                            621 ;	../../../core/net/rime/rudolph2.c:101: if(c->cb->read_chunk) {
   000F A8*00               622 	mov	r0,_bp
   0011 08                  623 	inc	r0
   0012 74 28               624 	mov	a,#0x28
   0014 26                  625 	add	a,@r0
   0015 FF                  626 	mov	r7,a
   0016 E4                  627 	clr	a
   0017 08                  628 	inc	r0
   0018 36                  629 	addc	a,@r0
   0019 FA                  630 	mov	r2,a
   001A 08                  631 	inc	r0
   001B 86 03               632 	mov	ar3,@r0
   001D 8F 82               633 	mov	dpl,r7
   001F 8A 83               634 	mov	dph,r2
   0021 8B F0               635 	mov	b,r3
   0023 12s00r00            636 	lcall	__gptrget
   0026 FF                  637 	mov	r7,a
   0027 A3                  638 	inc	dptr
   0028 12s00r00            639 	lcall	__gptrget
   002B FA                  640 	mov	r2,a
   002C A3                  641 	inc	dptr
   002D 12s00r00            642 	lcall	__gptrget
   0030 FB                  643 	mov	r3,a
   0031 74 02               644 	mov	a,#0x02
   0033 2F                  645 	add	a,r7
   0034 FF                  646 	mov	r7,a
   0035 E4                  647 	clr	a
   0036 3A                  648 	addc	a,r2
   0037 FA                  649 	mov	r2,a
   0038 8F 82               650 	mov	dpl,r7
   003A 8A 83               651 	mov	dph,r2
   003C 8B F0               652 	mov	b,r3
   003E 12s00r00            653 	lcall	__gptrget
   0041 FA                  654 	mov	r2,a
   0042 A3                  655 	inc	dptr
   0043 12s00r00            656 	lcall	__gptrget
   0046 FB                  657 	mov	r3,a
   0047 4A                  658 	orl	a,r2
   0048 60 5A               659 	jz	00102$
                            660 ;	../../../core/net/rime/rudolph2.c:102: len = c->cb->read_chunk(c, chunk * RUDOLPH2_DATASIZE,
   004A E5*00               661 	mov	a,_bp
   004C 24 F9               662 	add	a,#0xf9
   004E F8                  663 	mov	r0,a
   004F 86 04               664 	mov	ar4,@r0
   0051 08                  665 	inc	r0
   0052 E6                  666 	mov	a,@r0
   0053 54 03               667 	anl	a,#0x03
   0055 A2 E0               668 	mov	c,acc.0
   0057 CC                  669 	xch	a,r4
   0058 13                  670 	rrc	a
   0059 CC                  671 	xch	a,r4
   005A 13                  672 	rrc	a
   005B A2 E0               673 	mov	c,acc.0
   005D CC                  674 	xch	a,r4
   005E 13                  675 	rrc	a
   005F CC                  676 	xch	a,r4
   0060 13                  677 	rrc	a
   0061 CC                  678 	xch	a,r4
   0062 FF                  679 	mov	r7,a
   0063 74 40               680 	mov	a,#0x40
   0065 C0 E0               681 	push	acc
   0067 E4                  682 	clr	a
   0068 C0 E0               683 	push	acc
   006A E5*00               684 	mov	a,_bp
   006C 24 FB               685 	add	a,#0xfb
   006E F8                  686 	mov	r0,a
   006F E6                  687 	mov	a,@r0
   0070 C0 E0               688 	push	acc
   0072 08                  689 	inc	r0
   0073 E6                  690 	mov	a,@r0
   0074 C0 E0               691 	push	acc
   0076 08                  692 	inc	r0
   0077 E6                  693 	mov	a,@r0
   0078 C0 E0               694 	push	acc
   007A C0 04               695 	push	ar4
   007C C0 07               696 	push	ar7
   007E 74r96               697 	mov	a,#00107$
   0080 C0 E0               698 	push	acc
   0082 74s00               699 	mov	a,#(00107$ >> 8)
   0084 C0 E0               700 	push	acc
   0086 C0 02               701 	push	ar2
   0088 C0 03               702 	push	ar3
   008A A8*00               703 	mov	r0,_bp
   008C 08                  704 	inc	r0
   008D 86 82               705 	mov	dpl,@r0
   008F 08                  706 	inc	r0
   0090 86 83               707 	mov	dph,@r0
   0092 08                  708 	inc	r0
   0093 86 F0               709 	mov	b,@r0
   0095 22                  710 	ret
   0096                     711 00107$:
   0096 AA 82               712 	mov	r2,dpl
   0098 AB 83               713 	mov	r3,dph
   009A E5 81               714 	mov	a,sp
   009C 24 F9               715 	add	a,#0xf9
   009E F5 81               716 	mov	sp,a
   00A0 8A 05               717 	mov	ar5,r2
   00A2 8B 06               718 	mov	ar6,r3
   00A4                     719 00102$:
                            720 ;	../../../core/net/rime/rudolph2.c:105: return len;
   00A4 8D 82               721 	mov	dpl,r5
   00A6 8E 83               722 	mov	dph,r6
   00A8 85*00 81            723 	mov	sp,_bp
   00AB D0*00               724 	pop	_bp
   00AD 22                  725 	ret
                            726 ;------------------------------------------------------------
                            727 ;Allocation info for local variables in function 'format_data'
                            728 ;------------------------------------------------------------
                            729 ;chunk                     Allocated to stack - offset -4
                            730 ;c                         Allocated to stack - offset 1
                            731 ;hdr                       Allocated to stack - offset 4
                            732 ;len                       Allocated to registers r2 r3 
                            733 ;------------------------------------------------------------
                            734 ;	../../../core/net/rime/rudolph2.c:109: format_data(struct rudolph2_conn *c, int chunk)
                            735 ;	-----------------------------------------
                            736 ;	 function format_data
                            737 ;	-----------------------------------------
   00AE                     738 _format_data:
   00AE C0*00               739 	push	_bp
   00B0 85 81*00            740 	mov	_bp,sp
   00B3 C0 82               741 	push	dpl
   00B5 C0 83               742 	push	dph
   00B7 C0 F0               743 	push	b
   00B9 05 81               744 	inc	sp
   00BB 05 81               745 	inc	sp
   00BD 05 81               746 	inc	sp
                            747 ;	../../../core/net/rime/rudolph2.c:114: packetbuf_clear();
   00BF 12s00r00            748 	lcall	_packetbuf_clear
                            749 ;	../../../core/net/rime/rudolph2.c:115: hdr = packetbuf_dataptr();
   00C2 12s00r00            750 	lcall	_packetbuf_dataptr
   00C5 AD 82               751 	mov	r5,dpl
   00C7 AE 83               752 	mov	r6,dph
   00C9 AF F0               753 	mov	r7,b
   00CB E5*00               754 	mov	a,_bp
   00CD 24 04               755 	add	a,#0x04
   00CF F8                  756 	mov	r0,a
   00D0 A6 05               757 	mov	@r0,ar5
   00D2 08                  758 	inc	r0
   00D3 A6 06               759 	mov	@r0,ar6
   00D5 08                  760 	inc	r0
   00D6 A6 07               761 	mov	@r0,ar7
                            762 ;	../../../core/net/rime/rudolph2.c:116: hdr->type = TYPE_DATA;
   00D8 E5*00               763 	mov	a,_bp
   00DA 24 04               764 	add	a,#0x04
   00DC F8                  765 	mov	r0,a
   00DD 86 82               766 	mov	dpl,@r0
   00DF 08                  767 	inc	r0
   00E0 86 83               768 	mov	dph,@r0
   00E2 08                  769 	inc	r0
   00E3 86 F0               770 	mov	b,@r0
   00E5 E4                  771 	clr	a
   00E6 12s00r00            772 	lcall	__gptrput
                            773 ;	../../../core/net/rime/rudolph2.c:117: hdr->hops_from_base = c->hops_from_base;
   00E9 E5*00               774 	mov	a,_bp
   00EB 24 04               775 	add	a,#0x04
   00ED F8                  776 	mov	r0,a
   00EE 74 01               777 	mov	a,#0x01
   00F0 26                  778 	add	a,@r0
   00F1 FA                  779 	mov	r2,a
   00F2 E4                  780 	clr	a
   00F3 08                  781 	inc	r0
   00F4 36                  782 	addc	a,@r0
   00F5 FB                  783 	mov	r3,a
   00F6 08                  784 	inc	r0
   00F7 86 04               785 	mov	ar4,@r0
   00F9 A8*00               786 	mov	r0,_bp
   00FB 08                  787 	inc	r0
   00FC 74 46               788 	mov	a,#0x46
   00FE 26                  789 	add	a,@r0
   00FF FD                  790 	mov	r5,a
   0100 E4                  791 	clr	a
   0101 08                  792 	inc	r0
   0102 36                  793 	addc	a,@r0
   0103 FE                  794 	mov	r6,a
   0104 08                  795 	inc	r0
   0105 86 07               796 	mov	ar7,@r0
   0107 8D 82               797 	mov	dpl,r5
   0109 8E 83               798 	mov	dph,r6
   010B 8F F0               799 	mov	b,r7
   010D 12s00r00            800 	lcall	__gptrget
   0110 8A 82               801 	mov	dpl,r2
   0112 8B 83               802 	mov	dph,r3
   0114 8C F0               803 	mov	b,r4
   0116 12s00r00            804 	lcall	__gptrput
                            805 ;	../../../core/net/rime/rudolph2.c:118: hdr->version = c->version;
   0119 E5*00               806 	mov	a,_bp
   011B 24 04               807 	add	a,#0x04
   011D F8                  808 	mov	r0,a
   011E 74 02               809 	mov	a,#0x02
   0120 26                  810 	add	a,@r0
   0121 FA                  811 	mov	r2,a
   0122 E4                  812 	clr	a
   0123 08                  813 	inc	r0
   0124 36                  814 	addc	a,@r0
   0125 FB                  815 	mov	r3,a
   0126 08                  816 	inc	r0
   0127 86 04               817 	mov	ar4,@r0
   0129 A8*00               818 	mov	r0,_bp
   012B 08                  819 	inc	r0
   012C 74 44               820 	mov	a,#0x44
   012E 26                  821 	add	a,@r0
   012F FD                  822 	mov	r5,a
   0130 E4                  823 	clr	a
   0131 08                  824 	inc	r0
   0132 36                  825 	addc	a,@r0
   0133 FE                  826 	mov	r6,a
   0134 08                  827 	inc	r0
   0135 86 07               828 	mov	ar7,@r0
   0137 8D 82               829 	mov	dpl,r5
   0139 8E 83               830 	mov	dph,r6
   013B 8F F0               831 	mov	b,r7
   013D 12s00r00            832 	lcall	__gptrget
   0140 FD                  833 	mov	r5,a
   0141 A3                  834 	inc	dptr
   0142 12s00r00            835 	lcall	__gptrget
   0145 FE                  836 	mov	r6,a
   0146 8A 82               837 	mov	dpl,r2
   0148 8B 83               838 	mov	dph,r3
   014A 8C F0               839 	mov	b,r4
   014C ED                  840 	mov	a,r5
   014D 12s00r00            841 	lcall	__gptrput
   0150 A3                  842 	inc	dptr
   0151 EE                  843 	mov	a,r6
   0152 12s00r00            844 	lcall	__gptrput
                            845 ;	../../../core/net/rime/rudolph2.c:119: hdr->chunk = chunk;
   0155 E5*00               846 	mov	a,_bp
   0157 24 04               847 	add	a,#0x04
   0159 F8                  848 	mov	r0,a
   015A 74 04               849 	mov	a,#0x04
   015C 26                  850 	add	a,@r0
   015D FA                  851 	mov	r2,a
   015E E4                  852 	clr	a
   015F 08                  853 	inc	r0
   0160 36                  854 	addc	a,@r0
   0161 FB                  855 	mov	r3,a
   0162 08                  856 	inc	r0
   0163 86 04               857 	mov	ar4,@r0
   0165 E5*00               858 	mov	a,_bp
   0167 24 FC               859 	add	a,#0xfc
   0169 F8                  860 	mov	r0,a
   016A 86 05               861 	mov	ar5,@r0
   016C 08                  862 	inc	r0
   016D 86 06               863 	mov	ar6,@r0
   016F 8A 82               864 	mov	dpl,r2
   0171 8B 83               865 	mov	dph,r3
   0173 8C F0               866 	mov	b,r4
   0175 ED                  867 	mov	a,r5
   0176 12s00r00            868 	lcall	__gptrput
   0179 A3                  869 	inc	dptr
   017A EE                  870 	mov	a,r6
   017B 12s00r00            871 	lcall	__gptrput
                            872 ;	../../../core/net/rime/rudolph2.c:120: len = read_data(c, (uint8_t *)hdr + sizeof(struct rudolph2_hdr), chunk);
   017E E5*00               873 	mov	a,_bp
   0180 24 04               874 	add	a,#0x04
   0182 F8                  875 	mov	r0,a
   0183 74 06               876 	mov	a,#0x06
   0185 26                  877 	add	a,@r0
   0186 FA                  878 	mov	r2,a
   0187 E4                  879 	clr	a
   0188 08                  880 	inc	r0
   0189 36                  881 	addc	a,@r0
   018A FB                  882 	mov	r3,a
   018B 08                  883 	inc	r0
   018C 86 04               884 	mov	ar4,@r0
   018E C0 05               885 	push	ar5
   0190 C0 06               886 	push	ar6
   0192 C0 02               887 	push	ar2
   0194 C0 03               888 	push	ar3
   0196 C0 04               889 	push	ar4
   0198 A8*00               890 	mov	r0,_bp
   019A 08                  891 	inc	r0
   019B 86 82               892 	mov	dpl,@r0
   019D 08                  893 	inc	r0
   019E 86 83               894 	mov	dph,@r0
   01A0 08                  895 	inc	r0
   01A1 86 F0               896 	mov	b,@r0
   01A3 12s00r00            897 	lcall	_read_data
   01A6 AA 82               898 	mov	r2,dpl
   01A8 AB 83               899 	mov	r3,dph
   01AA E5 81               900 	mov	a,sp
   01AC 24 FB               901 	add	a,#0xfb
   01AE F5 81               902 	mov	sp,a
                            903 ;	../../../core/net/rime/rudolph2.c:121: packetbuf_set_datalen(sizeof(struct rudolph2_hdr) + len);
   01B0 74 06               904 	mov	a,#0x06
   01B2 2A                  905 	add	a,r2
   01B3 FC                  906 	mov	r4,a
   01B4 E4                  907 	clr	a
   01B5 3B                  908 	addc	a,r3
   01B6 FD                  909 	mov	r5,a
   01B7 8C 82               910 	mov	dpl,r4
   01B9 8D 83               911 	mov	dph,r5
   01BB C0 02               912 	push	ar2
   01BD C0 03               913 	push	ar3
   01BF 12s00r00            914 	lcall	_packetbuf_set_datalen
   01C2 D0 03               915 	pop	ar3
   01C4 D0 02               916 	pop	ar2
                            917 ;	../../../core/net/rime/rudolph2.c:123: return len;
   01C6 8A 82               918 	mov	dpl,r2
   01C8 8B 83               919 	mov	dph,r3
   01CA 85*00 81            920 	mov	sp,_bp
   01CD D0*00               921 	pop	_bp
   01CF 22                  922 	ret
                            923 ;------------------------------------------------------------
                            924 ;Allocation info for local variables in function 'write_data'
                            925 ;------------------------------------------------------------
                            926 ;chunk                     Allocated to stack - offset -4
                            927 ;data                      Allocated to stack - offset -7
                            928 ;datalen                   Allocated to stack - offset -9
                            929 ;c                         Allocated to stack - offset 1
                            930 ;------------------------------------------------------------
                            931 ;	../../../core/net/rime/rudolph2.c:127: write_data(struct rudolph2_conn *c, int chunk, uint8_t *data, int datalen)
                            932 ;	-----------------------------------------
                            933 ;	 function write_data
                            934 ;	-----------------------------------------
   01D0                     935 _write_data:
   01D0 C0*00               936 	push	_bp
   01D2 85 81*00            937 	mov	_bp,sp
   01D5 C0 82               938 	push	dpl
   01D7 C0 83               939 	push	dph
   01D9 C0 F0               940 	push	b
                            941 ;	../../../core/net/rime/rudolph2.c:130: if(c->flags & FLAG_IS_STOPPED) {
   01DB A8*00               942 	mov	r0,_bp
   01DD 08                  943 	inc	r0
   01DE 74 48               944 	mov	a,#0x48
   01E0 26                  945 	add	a,@r0
   01E1 FD                  946 	mov	r5,a
   01E2 E4                  947 	clr	a
   01E3 08                  948 	inc	r0
   01E4 36                  949 	addc	a,@r0
   01E5 FE                  950 	mov	r6,a
   01E6 08                  951 	inc	r0
   01E7 86 07               952 	mov	ar7,@r0
   01E9 8D 82               953 	mov	dpl,r5
   01EB 8E 83               954 	mov	dph,r6
   01ED 8F F0               955 	mov	b,r7
   01EF 12s00r00            956 	lcall	__gptrget
   01F2 FD                  957 	mov	r5,a
   01F3 30 E2 03            958 	jnb	acc.2,00102$
                            959 ;	../../../core/net/rime/rudolph2.c:131: return;
   01F6 02s03rBE            960 	ljmp	00108$
   01F9                     961 00102$:
                            962 ;	../../../core/net/rime/rudolph2.c:134: if(chunk == 0) {
   01F9 E5*00               963 	mov	a,_bp
   01FB 24 FC               964 	add	a,#0xfc
   01FD F8                  965 	mov	r0,a
   01FE E6                  966 	mov	a,@r0
   01FF 08                  967 	inc	r0
   0200 46                  968 	orl	a,@r0
   0201 70 78               969 	jnz	00104$
                            970 ;	../../../core/net/rime/rudolph2.c:135: c->cb->write_chunk(c, 0, RUDOLPH2_FLAG_NEWFILE, data, 0);
   0203 A8*00               971 	mov	r0,_bp
   0205 08                  972 	inc	r0
   0206 74 28               973 	mov	a,#0x28
   0208 26                  974 	add	a,@r0
   0209 FD                  975 	mov	r5,a
   020A E4                  976 	clr	a
   020B 08                  977 	inc	r0
   020C 36                  978 	addc	a,@r0
   020D FE                  979 	mov	r6,a
   020E 08                  980 	inc	r0
   020F 86 07               981 	mov	ar7,@r0
   0211 8D 82               982 	mov	dpl,r5
   0213 8E 83               983 	mov	dph,r6
   0215 8F F0               984 	mov	b,r7
   0217 12s00r00            985 	lcall	__gptrget
   021A FD                  986 	mov	r5,a
   021B A3                  987 	inc	dptr
   021C 12s00r00            988 	lcall	__gptrget
   021F FE                  989 	mov	r6,a
   0220 A3                  990 	inc	dptr
   0221 12s00r00            991 	lcall	__gptrget
   0224 FF                  992 	mov	r7,a
   0225 8D 82               993 	mov	dpl,r5
   0227 8E 83               994 	mov	dph,r6
   0229 8F F0               995 	mov	b,r7
   022B 12s00r00            996 	lcall	__gptrget
   022E FD                  997 	mov	r5,a
   022F A3                  998 	inc	dptr
   0230 12s00r00            999 	lcall	__gptrget
   0233 FE                 1000 	mov	r6,a
   0234 C0 05              1001 	push	ar5
   0236 C0 06              1002 	push	ar6
   0238 E4                 1003 	clr	a
   0239 C0 E0              1004 	push	acc
   023B C0 E0              1005 	push	acc
   023D E5*00              1006 	mov	a,_bp
   023F 24 F9              1007 	add	a,#0xf9
   0241 F8                 1008 	mov	r0,a
   0242 E6                 1009 	mov	a,@r0
   0243 C0 E0              1010 	push	acc
   0245 08                 1011 	inc	r0
   0246 E6                 1012 	mov	a,@r0
   0247 C0 E0              1013 	push	acc
   0249 08                 1014 	inc	r0
   024A E6                 1015 	mov	a,@r0
   024B C0 E0              1016 	push	acc
   024D 74 01              1017 	mov	a,#0x01
   024F C0 E0              1018 	push	acc
   0251 E4                 1019 	clr	a
   0252 C0 E0              1020 	push	acc
   0254 E4                 1021 	clr	a
   0255 C0 E0              1022 	push	acc
   0257 C0 E0              1023 	push	acc
   0259 74r71              1024 	mov	a,#00115$
   025B C0 E0              1025 	push	acc
   025D 74s02              1026 	mov	a,#(00115$ >> 8)
   025F C0 E0              1027 	push	acc
   0261 C0 05              1028 	push	ar5
   0263 C0 06              1029 	push	ar6
   0265 A8*00              1030 	mov	r0,_bp
   0267 08                 1031 	inc	r0
   0268 86 82              1032 	mov	dpl,@r0
   026A 08                 1033 	inc	r0
   026B 86 83              1034 	mov	dph,@r0
   026D 08                 1035 	inc	r0
   026E 86 F0              1036 	mov	b,@r0
   0270 22                 1037 	ret
   0271                    1038 00115$:
   0271 E5 81              1039 	mov	a,sp
   0273 24 F7              1040 	add	a,#0xf7
   0275 F5 81              1041 	mov	sp,a
   0277 D0 06              1042 	pop	ar6
   0279 D0 05              1043 	pop	ar5
   027B                    1044 00104$:
                           1045 ;	../../../core/net/rime/rudolph2.c:143: if(datalen < RUDOLPH2_DATASIZE) {
   027B E5*00              1046 	mov	a,_bp
   027D 24 F7              1047 	add	a,#0xf7
   027F F8                 1048 	mov	r0,a
   0280 C3                 1049 	clr	c
   0281 E6                 1050 	mov	a,@r0
   0282 94 40              1051 	subb	a,#0x40
   0284 08                 1052 	inc	r0
   0285 E6                 1053 	mov	a,@r0
   0286 64 80              1054 	xrl	a,#0x80
   0288 94 80              1055 	subb	a,#0x80
   028A 40 03              1056 	jc	00116$
   028C 02s03r29           1057 	ljmp	00106$
   028F                    1058 00116$:
                           1059 ;	../../../core/net/rime/rudolph2.c:147: c->cb->write_chunk(c, chunk * RUDOLPH2_DATASIZE,
   028F A8*00              1060 	mov	r0,_bp
   0291 08                 1061 	inc	r0
   0292 74 28              1062 	mov	a,#0x28
   0294 26                 1063 	add	a,@r0
   0295 FD                 1064 	mov	r5,a
   0296 E4                 1065 	clr	a
   0297 08                 1066 	inc	r0
   0298 36                 1067 	addc	a,@r0
   0299 FE                 1068 	mov	r6,a
   029A 08                 1069 	inc	r0
   029B 86 07              1070 	mov	ar7,@r0
   029D 8D 82              1071 	mov	dpl,r5
   029F 8E 83              1072 	mov	dph,r6
   02A1 8F F0              1073 	mov	b,r7
   02A3 12s00r00           1074 	lcall	__gptrget
   02A6 FD                 1075 	mov	r5,a
   02A7 A3                 1076 	inc	dptr
   02A8 12s00r00           1077 	lcall	__gptrget
   02AB FE                 1078 	mov	r6,a
   02AC A3                 1079 	inc	dptr
   02AD 12s00r00           1080 	lcall	__gptrget
   02B0 FF                 1081 	mov	r7,a
   02B1 8D 82              1082 	mov	dpl,r5
   02B3 8E 83              1083 	mov	dph,r6
   02B5 8F F0              1084 	mov	b,r7
   02B7 12s00r00           1085 	lcall	__gptrget
   02BA FD                 1086 	mov	r5,a
   02BB A3                 1087 	inc	dptr
   02BC 12s00r00           1088 	lcall	__gptrget
   02BF FE                 1089 	mov	r6,a
   02C0 E5*00              1090 	mov	a,_bp
   02C2 24 FC              1091 	add	a,#0xfc
   02C4 F8                 1092 	mov	r0,a
   02C5 86 07              1093 	mov	ar7,@r0
   02C7 08                 1094 	inc	r0
   02C8 E6                 1095 	mov	a,@r0
   02C9 54 03              1096 	anl	a,#0x03
   02CB A2 E0              1097 	mov	c,acc.0
   02CD CF                 1098 	xch	a,r7
   02CE 13                 1099 	rrc	a
   02CF CF                 1100 	xch	a,r7
   02D0 13                 1101 	rrc	a
   02D1 A2 E0              1102 	mov	c,acc.0
   02D3 CF                 1103 	xch	a,r7
   02D4 13                 1104 	rrc	a
   02D5 CF                 1105 	xch	a,r7
   02D6 13                 1106 	rrc	a
   02D7 CF                 1107 	xch	a,r7
   02D8 FA                 1108 	mov	r2,a
   02D9 C0 05              1109 	push	ar5
   02DB C0 06              1110 	push	ar6
   02DD E5*00              1111 	mov	a,_bp
   02DF 24 F7              1112 	add	a,#0xf7
   02E1 F8                 1113 	mov	r0,a
   02E2 E6                 1114 	mov	a,@r0
   02E3 C0 E0              1115 	push	acc
   02E5 08                 1116 	inc	r0
   02E6 E6                 1117 	mov	a,@r0
   02E7 C0 E0              1118 	push	acc
   02E9 E5*00              1119 	mov	a,_bp
   02EB 24 F9              1120 	add	a,#0xf9
   02ED F8                 1121 	mov	r0,a
   02EE E6                 1122 	mov	a,@r0
   02EF C0 E0              1123 	push	acc
   02F1 08                 1124 	inc	r0
   02F2 E6                 1125 	mov	a,@r0
   02F3 C0 E0              1126 	push	acc
   02F5 08                 1127 	inc	r0
   02F6 E6                 1128 	mov	a,@r0
   02F7 C0 E0              1129 	push	acc
   02F9 74 02              1130 	mov	a,#0x02
   02FB C0 E0              1131 	push	acc
   02FD E4                 1132 	clr	a
   02FE C0 E0              1133 	push	acc
   0300 C0 07              1134 	push	ar7
   0302 C0 02              1135 	push	ar2
   0304 74r1C              1136 	mov	a,#00117$
   0306 C0 E0              1137 	push	acc
   0308 74s03              1138 	mov	a,#(00117$ >> 8)
   030A C0 E0              1139 	push	acc
   030C C0 05              1140 	push	ar5
   030E C0 06              1141 	push	ar6
   0310 A8*00              1142 	mov	r0,_bp
   0312 08                 1143 	inc	r0
   0313 86 82              1144 	mov	dpl,@r0
   0315 08                 1145 	inc	r0
   0316 86 83              1146 	mov	dph,@r0
   0318 08                 1147 	inc	r0
   0319 86 F0              1148 	mov	b,@r0
   031B 22                 1149 	ret
   031C                    1150 00117$:
   031C E5 81              1151 	mov	a,sp
   031E 24 F7              1152 	add	a,#0xf7
   0320 F5 81              1153 	mov	sp,a
   0322 D0 06              1154 	pop	ar6
   0324 D0 05              1155 	pop	ar5
   0326 02s03rBE           1156 	ljmp	00108$
   0329                    1157 00106$:
                           1158 ;	../../../core/net/rime/rudolph2.c:150: c->cb->write_chunk(c, chunk * RUDOLPH2_DATASIZE,
   0329 A8*00              1159 	mov	r0,_bp
   032B 08                 1160 	inc	r0
   032C 74 28              1161 	mov	a,#0x28
   032E 26                 1162 	add	a,@r0
   032F FA                 1163 	mov	r2,a
   0330 E4                 1164 	clr	a
   0331 08                 1165 	inc	r0
   0332 36                 1166 	addc	a,@r0
   0333 FB                 1167 	mov	r3,a
   0334 08                 1168 	inc	r0
   0335 86 04              1169 	mov	ar4,@r0
   0337 8A 82              1170 	mov	dpl,r2
   0339 8B 83              1171 	mov	dph,r3
   033B 8C F0              1172 	mov	b,r4
   033D 12s00r00           1173 	lcall	__gptrget
   0340 FA                 1174 	mov	r2,a
   0341 A3                 1175 	inc	dptr
   0342 12s00r00           1176 	lcall	__gptrget
   0345 FB                 1177 	mov	r3,a
   0346 A3                 1178 	inc	dptr
   0347 12s00r00           1179 	lcall	__gptrget
   034A FC                 1180 	mov	r4,a
   034B 8A 82              1181 	mov	dpl,r2
   034D 8B 83              1182 	mov	dph,r3
   034F 8C F0              1183 	mov	b,r4
   0351 12s00r00           1184 	lcall	__gptrget
   0354 FA                 1185 	mov	r2,a
   0355 A3                 1186 	inc	dptr
   0356 12s00r00           1187 	lcall	__gptrget
   0359 FB                 1188 	mov	r3,a
   035A E5*00              1189 	mov	a,_bp
   035C 24 FC              1190 	add	a,#0xfc
   035E F8                 1191 	mov	r0,a
   035F 86 04              1192 	mov	ar4,@r0
   0361 08                 1193 	inc	r0
   0362 E6                 1194 	mov	a,@r0
   0363 54 03              1195 	anl	a,#0x03
   0365 A2 E0              1196 	mov	c,acc.0
   0367 CC                 1197 	xch	a,r4
   0368 13                 1198 	rrc	a
   0369 CC                 1199 	xch	a,r4
   036A 13                 1200 	rrc	a
   036B A2 E0              1201 	mov	c,acc.0
   036D CC                 1202 	xch	a,r4
   036E 13                 1203 	rrc	a
   036F CC                 1204 	xch	a,r4
   0370 13                 1205 	rrc	a
   0371 CC                 1206 	xch	a,r4
   0372 FD                 1207 	mov	r5,a
   0373 C0 02              1208 	push	ar2
   0375 C0 03              1209 	push	ar3
   0377 E5*00              1210 	mov	a,_bp
   0379 24 F7              1211 	add	a,#0xf7
   037B F8                 1212 	mov	r0,a
   037C E6                 1213 	mov	a,@r0
   037D C0 E0              1214 	push	acc
   037F 08                 1215 	inc	r0
   0380 E6                 1216 	mov	a,@r0
   0381 C0 E0              1217 	push	acc
   0383 E5*00              1218 	mov	a,_bp
   0385 24 F9              1219 	add	a,#0xf9
   0387 F8                 1220 	mov	r0,a
   0388 E6                 1221 	mov	a,@r0
   0389 C0 E0              1222 	push	acc
   038B 08                 1223 	inc	r0
   038C E6                 1224 	mov	a,@r0
   038D C0 E0              1225 	push	acc
   038F 08                 1226 	inc	r0
   0390 E6                 1227 	mov	a,@r0
   0391 C0 E0              1228 	push	acc
   0393 E4                 1229 	clr	a
   0394 C0 E0              1230 	push	acc
   0396 C0 E0              1231 	push	acc
   0398 C0 04              1232 	push	ar4
   039A C0 05              1233 	push	ar5
   039C 74rB4              1234 	mov	a,#00118$
   039E C0 E0              1235 	push	acc
   03A0 74s03              1236 	mov	a,#(00118$ >> 8)
   03A2 C0 E0              1237 	push	acc
   03A4 C0 02              1238 	push	ar2
   03A6 C0 03              1239 	push	ar3
   03A8 A8*00              1240 	mov	r0,_bp
   03AA 08                 1241 	inc	r0
   03AB 86 82              1242 	mov	dpl,@r0
   03AD 08                 1243 	inc	r0
   03AE 86 83              1244 	mov	dph,@r0
   03B0 08                 1245 	inc	r0
   03B1 86 F0              1246 	mov	b,@r0
   03B3 22                 1247 	ret
   03B4                    1248 00118$:
   03B4 E5 81              1249 	mov	a,sp
   03B6 24 F7              1250 	add	a,#0xf7
   03B8 F5 81              1251 	mov	sp,a
   03BA D0 03              1252 	pop	ar3
   03BC D0 02              1253 	pop	ar2
   03BE                    1254 00108$:
   03BE 85*00 81           1255 	mov	sp,_bp
   03C1 D0*00              1256 	pop	_bp
   03C3 22                 1257 	ret
                           1258 ;------------------------------------------------------------
                           1259 ;Allocation info for local variables in function 'send_data'
                           1260 ;------------------------------------------------------------
                           1261 ;interval                  Allocated to stack - offset -4
                           1262 ;c                         Allocated to registers r2 r3 r4 
                           1263 ;len                       Allocated to registers r5 r6 
                           1264 ;------------------------------------------------------------
                           1265 ;	../../../core/net/rime/rudolph2.c:156: send_data(struct rudolph2_conn *c, clock_time_t interval)
                           1266 ;	-----------------------------------------
                           1267 ;	 function send_data
                           1268 ;	-----------------------------------------
   03C4                    1269 _send_data:
   03C4 C0*00              1270 	push	_bp
   03C6 85 81*00           1271 	mov	_bp,sp
   03C9 AA 82              1272 	mov	r2,dpl
   03CB AB 83              1273 	mov	r3,dph
   03CD AC F0              1274 	mov	r4,b
                           1275 ;	../../../core/net/rime/rudolph2.c:160: len = format_data(c, c->snd_nxt);
   03CF 74 40              1276 	mov	a,#0x40
   03D1 2A                 1277 	add	a,r2
   03D2 FD                 1278 	mov	r5,a
   03D3 E4                 1279 	clr	a
   03D4 3B                 1280 	addc	a,r3
   03D5 FE                 1281 	mov	r6,a
   03D6 8C 07              1282 	mov	ar7,r4
   03D8 8D 82              1283 	mov	dpl,r5
   03DA 8E 83              1284 	mov	dph,r6
   03DC 8F F0              1285 	mov	b,r7
   03DE 12s00r00           1286 	lcall	__gptrget
   03E1 FD                 1287 	mov	r5,a
   03E2 A3                 1288 	inc	dptr
   03E3 12s00r00           1289 	lcall	__gptrget
   03E6 FE                 1290 	mov	r6,a
   03E7 C0 02              1291 	push	ar2
   03E9 C0 03              1292 	push	ar3
   03EB C0 04              1293 	push	ar4
   03ED C0 05              1294 	push	ar5
   03EF C0 06              1295 	push	ar6
   03F1 8A 82              1296 	mov	dpl,r2
   03F3 8B 83              1297 	mov	dph,r3
   03F5 8C F0              1298 	mov	b,r4
   03F7 12s00rAE           1299 	lcall	_format_data
   03FA AD 82              1300 	mov	r5,dpl
   03FC AE 83              1301 	mov	r6,dph
   03FE 15 81              1302 	dec	sp
   0400 15 81              1303 	dec	sp
   0402 D0 04              1304 	pop	ar4
   0404 D0 03              1305 	pop	ar3
   0406 D0 02              1306 	pop	ar2
                           1307 ;	../../../core/net/rime/rudolph2.c:161: polite_send(&c->c, interval, POLITE_HEADER);
   0408 C0 05              1308 	push	ar5
   040A C0 06              1309 	push	ar6
   040C 74 01              1310 	mov	a,#0x01
   040E C0 E0              1311 	push	acc
   0410 E5*00              1312 	mov	a,_bp
   0412 24 FC              1313 	add	a,#0xfc
   0414 F8                 1314 	mov	r0,a
   0415 E6                 1315 	mov	a,@r0
   0416 C0 E0              1316 	push	acc
   0418 08                 1317 	inc	r0
   0419 E6                 1318 	mov	a,@r0
   041A C0 E0              1319 	push	acc
   041C 8A 82              1320 	mov	dpl,r2
   041E 8B 83              1321 	mov	dph,r3
   0420 8C F0              1322 	mov	b,r4
   0422 12s00r00           1323 	lcall	_polite_send
   0425 15 81              1324 	dec	sp
   0427 15 81              1325 	dec	sp
   0429 15 81              1326 	dec	sp
   042B D0 06              1327 	pop	ar6
   042D D0 05              1328 	pop	ar5
                           1329 ;	../../../core/net/rime/rudolph2.c:166: return len;
   042F 8D 82              1330 	mov	dpl,r5
   0431 8E 83              1331 	mov	dph,r6
   0433 D0*00              1332 	pop	_bp
   0435 22                 1333 	ret
                           1334 ;------------------------------------------------------------
                           1335 ;Allocation info for local variables in function 'send_nack'
                           1336 ;------------------------------------------------------------
                           1337 ;c                         Allocated to stack - offset 1
                           1338 ;hdr                       Allocated to stack - offset 4
                           1339 ;------------------------------------------------------------
                           1340 ;	../../../core/net/rime/rudolph2.c:170: send_nack(struct rudolph2_conn *c)
                           1341 ;	-----------------------------------------
                           1342 ;	 function send_nack
                           1343 ;	-----------------------------------------
   0436                    1344 _send_nack:
   0436 C0*00              1345 	push	_bp
   0438 85 81*00           1346 	mov	_bp,sp
   043B C0 82              1347 	push	dpl
   043D C0 83              1348 	push	dph
   043F C0 F0              1349 	push	b
   0441 05 81              1350 	inc	sp
   0443 05 81              1351 	inc	sp
   0445 05 81              1352 	inc	sp
                           1353 ;	../../../core/net/rime/rudolph2.c:173: packetbuf_clear();
   0447 12s00r00           1354 	lcall	_packetbuf_clear
                           1355 ;	../../../core/net/rime/rudolph2.c:174: packetbuf_hdralloc(sizeof(struct rudolph2_hdr));
   044A 90 00 06           1356 	mov	dptr,#0x0006
   044D 12s00r00           1357 	lcall	_packetbuf_hdralloc
                           1358 ;	../../../core/net/rime/rudolph2.c:175: hdr = packetbuf_hdrptr();
   0450 12s00r00           1359 	lcall	_packetbuf_hdrptr
   0453 AD 82              1360 	mov	r5,dpl
   0455 AE 83              1361 	mov	r6,dph
   0457 AF F0              1362 	mov	r7,b
   0459 E5*00              1363 	mov	a,_bp
   045B 24 04              1364 	add	a,#0x04
   045D F8                 1365 	mov	r0,a
   045E A6 05              1366 	mov	@r0,ar5
   0460 08                 1367 	inc	r0
   0461 A6 06              1368 	mov	@r0,ar6
   0463 08                 1369 	inc	r0
   0464 A6 07              1370 	mov	@r0,ar7
                           1371 ;	../../../core/net/rime/rudolph2.c:177: hdr->hops_from_base = c->hops_from_base;
   0466 E5*00              1372 	mov	a,_bp
   0468 24 04              1373 	add	a,#0x04
   046A F8                 1374 	mov	r0,a
   046B 74 01              1375 	mov	a,#0x01
   046D 26                 1376 	add	a,@r0
   046E FA                 1377 	mov	r2,a
   046F E4                 1378 	clr	a
   0470 08                 1379 	inc	r0
   0471 36                 1380 	addc	a,@r0
   0472 FB                 1381 	mov	r3,a
   0473 08                 1382 	inc	r0
   0474 86 04              1383 	mov	ar4,@r0
   0476 A8*00              1384 	mov	r0,_bp
   0478 08                 1385 	inc	r0
   0479 74 46              1386 	mov	a,#0x46
   047B 26                 1387 	add	a,@r0
   047C FD                 1388 	mov	r5,a
   047D E4                 1389 	clr	a
   047E 08                 1390 	inc	r0
   047F 36                 1391 	addc	a,@r0
   0480 FE                 1392 	mov	r6,a
   0481 08                 1393 	inc	r0
   0482 86 07              1394 	mov	ar7,@r0
   0484 8D 82              1395 	mov	dpl,r5
   0486 8E 83              1396 	mov	dph,r6
   0488 8F F0              1397 	mov	b,r7
   048A 12s00r00           1398 	lcall	__gptrget
   048D 8A 82              1399 	mov	dpl,r2
   048F 8B 83              1400 	mov	dph,r3
   0491 8C F0              1401 	mov	b,r4
   0493 12s00r00           1402 	lcall	__gptrput
                           1403 ;	../../../core/net/rime/rudolph2.c:178: hdr->type = TYPE_NACK;
   0496 E5*00              1404 	mov	a,_bp
   0498 24 04              1405 	add	a,#0x04
   049A F8                 1406 	mov	r0,a
   049B 86 82              1407 	mov	dpl,@r0
   049D 08                 1408 	inc	r0
   049E 86 83              1409 	mov	dph,@r0
   04A0 08                 1410 	inc	r0
   04A1 86 F0              1411 	mov	b,@r0
   04A3 74 01              1412 	mov	a,#0x01
   04A5 12s00r00           1413 	lcall	__gptrput
                           1414 ;	../../../core/net/rime/rudolph2.c:179: hdr->version = c->version;
   04A8 E5*00              1415 	mov	a,_bp
   04AA 24 04              1416 	add	a,#0x04
   04AC F8                 1417 	mov	r0,a
   04AD 74 02              1418 	mov	a,#0x02
   04AF 26                 1419 	add	a,@r0
   04B0 FA                 1420 	mov	r2,a
   04B1 E4                 1421 	clr	a
   04B2 08                 1422 	inc	r0
   04B3 36                 1423 	addc	a,@r0
   04B4 FB                 1424 	mov	r3,a
   04B5 08                 1425 	inc	r0
   04B6 86 04              1426 	mov	ar4,@r0
   04B8 A8*00              1427 	mov	r0,_bp
   04BA 08                 1428 	inc	r0
   04BB 74 44              1429 	mov	a,#0x44
   04BD 26                 1430 	add	a,@r0
   04BE FD                 1431 	mov	r5,a
   04BF E4                 1432 	clr	a
   04C0 08                 1433 	inc	r0
   04C1 36                 1434 	addc	a,@r0
   04C2 FE                 1435 	mov	r6,a
   04C3 08                 1436 	inc	r0
   04C4 86 07              1437 	mov	ar7,@r0
   04C6 8D 82              1438 	mov	dpl,r5
   04C8 8E 83              1439 	mov	dph,r6
   04CA 8F F0              1440 	mov	b,r7
   04CC 12s00r00           1441 	lcall	__gptrget
   04CF FD                 1442 	mov	r5,a
   04D0 A3                 1443 	inc	dptr
   04D1 12s00r00           1444 	lcall	__gptrget
   04D4 FE                 1445 	mov	r6,a
   04D5 8A 82              1446 	mov	dpl,r2
   04D7 8B 83              1447 	mov	dph,r3
   04D9 8C F0              1448 	mov	b,r4
   04DB ED                 1449 	mov	a,r5
   04DC 12s00r00           1450 	lcall	__gptrput
   04DF A3                 1451 	inc	dptr
   04E0 EE                 1452 	mov	a,r6
   04E1 12s00r00           1453 	lcall	__gptrput
                           1454 ;	../../../core/net/rime/rudolph2.c:180: hdr->chunk = c->rcv_nxt;
   04E4 E5*00              1455 	mov	a,_bp
   04E6 24 04              1456 	add	a,#0x04
   04E8 F8                 1457 	mov	r0,a
   04E9 74 04              1458 	mov	a,#0x04
   04EB 26                 1459 	add	a,@r0
   04EC FA                 1460 	mov	r2,a
   04ED E4                 1461 	clr	a
   04EE 08                 1462 	inc	r0
   04EF 36                 1463 	addc	a,@r0
   04F0 FB                 1464 	mov	r3,a
   04F1 08                 1465 	inc	r0
   04F2 86 04              1466 	mov	ar4,@r0
   04F4 A8*00              1467 	mov	r0,_bp
   04F6 08                 1468 	inc	r0
   04F7 74 42              1469 	mov	a,#0x42
   04F9 26                 1470 	add	a,@r0
   04FA FD                 1471 	mov	r5,a
   04FB E4                 1472 	clr	a
   04FC 08                 1473 	inc	r0
   04FD 36                 1474 	addc	a,@r0
   04FE FE                 1475 	mov	r6,a
   04FF 08                 1476 	inc	r0
   0500 86 07              1477 	mov	ar7,@r0
   0502 8D 82              1478 	mov	dpl,r5
   0504 8E 83              1479 	mov	dph,r6
   0506 8F F0              1480 	mov	b,r7
   0508 12s00r00           1481 	lcall	__gptrget
   050B FD                 1482 	mov	r5,a
   050C A3                 1483 	inc	dptr
   050D 12s00r00           1484 	lcall	__gptrget
   0510 FE                 1485 	mov	r6,a
   0511 8A 82              1486 	mov	dpl,r2
   0513 8B 83              1487 	mov	dph,r3
   0515 8C F0              1488 	mov	b,r4
   0517 ED                 1489 	mov	a,r5
   0518 12s00r00           1490 	lcall	__gptrput
   051B A3                 1491 	inc	dptr
   051C EE                 1492 	mov	a,r6
   051D 12s00r00           1493 	lcall	__gptrput
                           1494 ;	../../../core/net/rime/rudolph2.c:185: polite_send(&c->c, NACK_TIMEOUT, POLITE_HEADER);
   0520 74 01              1495 	mov	a,#0x01
   0522 C0 E0              1496 	push	acc
   0524 74 20              1497 	mov	a,#0x20
   0526 C0 E0              1498 	push	acc
   0528 E4                 1499 	clr	a
   0529 C0 E0              1500 	push	acc
   052B A8*00              1501 	mov	r0,_bp
   052D 08                 1502 	inc	r0
   052E 86 82              1503 	mov	dpl,@r0
   0530 08                 1504 	inc	r0
   0531 86 83              1505 	mov	dph,@r0
   0533 08                 1506 	inc	r0
   0534 86 F0              1507 	mov	b,@r0
   0536 12s00r00           1508 	lcall	_polite_send
   0539 15 81              1509 	dec	sp
   053B 15 81              1510 	dec	sp
   053D 15 81              1511 	dec	sp
   053F 85*00 81           1512 	mov	sp,_bp
   0542 D0*00              1513 	pop	_bp
   0544 22                 1514 	ret
                           1515 ;------------------------------------------------------------
                           1516 ;Allocation info for local variables in function 'sent'
                           1517 ;------------------------------------------------------------
                           1518 ;polite                    Allocated to registers 
                           1519 ;------------------------------------------------------------
                           1520 ;	../../../core/net/rime/rudolph2.c:219: sent(struct polite_conn *polite)
                           1521 ;	-----------------------------------------
                           1522 ;	 function sent
                           1523 ;	-----------------------------------------
   0545                    1524 _sent:
                           1525 ;	../../../core/net/rime/rudolph2.c:232: }
   0545 22                 1526 	ret
                           1527 ;------------------------------------------------------------
                           1528 ;Allocation info for local variables in function 'dropped'
                           1529 ;------------------------------------------------------------
                           1530 ;polite                    Allocated to registers 
                           1531 ;------------------------------------------------------------
                           1532 ;	../../../core/net/rime/rudolph2.c:235: dropped(struct polite_conn *polite)
                           1533 ;	-----------------------------------------
                           1534 ;	 function dropped
                           1535 ;	-----------------------------------------
   0546                    1536 _dropped:
                           1537 ;	../../../core/net/rime/rudolph2.c:246: }
   0546 22                 1538 	ret
                           1539 ;------------------------------------------------------------
                           1540 ;Allocation info for local variables in function 'timed_send'
                           1541 ;------------------------------------------------------------
                           1542 ;ptr                       Allocated to registers r2 r3 r4 
                           1543 ;c                         Allocated to stack - offset 1
                           1544 ;interval                  Allocated to stack - offset 4
                           1545 ;len                       Allocated to registers r4 r2 
                           1546 ;sloc0                     Allocated to stack - offset 11
                           1547 ;sloc1                     Allocated to stack - offset 6
                           1548 ;sloc2                     Allocated to stack - offset 8
                           1549 ;------------------------------------------------------------
                           1550 ;	../../../core/net/rime/rudolph2.c:249: timed_send(void *ptr)
                           1551 ;	-----------------------------------------
                           1552 ;	 function timed_send
                           1553 ;	-----------------------------------------
   0547                    1554 _timed_send:
   0547 C0*00              1555 	push	_bp
   0549 E5 81              1556 	mov	a,sp
   054B F5*00              1557 	mov	_bp,a
   054D 24 0A              1558 	add	a,#0x0a
   054F F5 81              1559 	mov	sp,a
   0551 AA 82              1560 	mov	r2,dpl
   0553 AB 83              1561 	mov	r3,dph
   0555 AC F0              1562 	mov	r4,b
                           1563 ;	../../../core/net/rime/rudolph2.c:251: struct rudolph2_conn *c = (struct rudolph2_conn *)ptr;
   0557 A8*00              1564 	mov	r0,_bp
   0559 08                 1565 	inc	r0
   055A A6 02              1566 	mov	@r0,ar2
   055C 08                 1567 	inc	r0
   055D A6 03              1568 	mov	@r0,ar3
   055F 08                 1569 	inc	r0
   0560 A6 04              1570 	mov	@r0,ar4
                           1571 ;	../../../core/net/rime/rudolph2.c:255: if((c->flags & FLAG_IS_STOPPED) == 0 &&
   0562 74 48              1572 	mov	a,#0x48
   0564 2A                 1573 	add	a,r2
   0565 FA                 1574 	mov	r2,a
   0566 E4                 1575 	clr	a
   0567 3B                 1576 	addc	a,r3
   0568 FB                 1577 	mov	r3,a
   0569 8A 82              1578 	mov	dpl,r2
   056B 8B 83              1579 	mov	dph,r3
   056D 8C F0              1580 	mov	b,r4
   056F 12s00r00           1581 	lcall	__gptrget
   0572 FA                 1582 	mov	r2,a
   0573 30 E2 03           1583 	jnb	acc.2,00123$
   0576 02s07r16           1584 	ljmp	00114$
   0579                    1585 00123$:
                           1586 ;	../../../core/net/rime/rudolph2.c:256: (c->flags & FLAG_LAST_RECEIVED)) {
   0579 EA                 1587 	mov	a,r2
   057A 20 E1 03           1588 	jb	acc.1,00124$
   057D 02s07r16           1589 	ljmp	00114$
   0580                    1590 00124$:
                           1591 ;	../../../core/net/rime/rudolph2.c:264: if(c->flags & FLAG_LAST_SENT) {
   0580 EA                 1592 	mov	a,r2
   0581 30 E0 0C           1593 	jnb	acc.0,00102$
                           1594 ;	../../../core/net/rime/rudolph2.c:265: interval = STEADY_INTERVAL;
   0584 E5*00              1595 	mov	a,_bp
   0586 24 04              1596 	add	a,#0x04
   0588 F8                 1597 	mov	r0,a
   0589 76 00              1598 	mov	@r0,#0x00
   058B 08                 1599 	inc	r0
   058C 76 08              1600 	mov	@r0,#0x08
   058E 80 0A              1601 	sjmp	00103$
   0590                    1602 00102$:
                           1603 ;	../../../core/net/rime/rudolph2.c:267: interval = SEND_INTERVAL;
   0590 E5*00              1604 	mov	a,_bp
   0592 24 04              1605 	add	a,#0x04
   0594 F8                 1606 	mov	r0,a
   0595 76 40              1607 	mov	@r0,#0x40
   0597 08                 1608 	inc	r0
   0598 76 00              1609 	mov	@r0,#0x00
   059A                    1610 00103$:
                           1611 ;	../../../core/net/rime/rudolph2.c:271: len = send_data(c, interval);
   059A E5*00              1612 	mov	a,_bp
   059C 24 04              1613 	add	a,#0x04
   059E F8                 1614 	mov	r0,a
   059F E6                 1615 	mov	a,@r0
   05A0 C0 E0              1616 	push	acc
   05A2 08                 1617 	inc	r0
   05A3 E6                 1618 	mov	a,@r0
   05A4 C0 E0              1619 	push	acc
   05A6 A8*00              1620 	mov	r0,_bp
   05A8 08                 1621 	inc	r0
   05A9 86 82              1622 	mov	dpl,@r0
   05AB 08                 1623 	inc	r0
   05AC 86 83              1624 	mov	dph,@r0
   05AE 08                 1625 	inc	r0
   05AF 86 F0              1626 	mov	b,@r0
   05B1 12s03rC4           1627 	lcall	_send_data
   05B4 AB 82              1628 	mov	r3,dpl
   05B6 AA 83              1629 	mov	r2,dph
   05B8 15 81              1630 	dec	sp
   05BA 15 81              1631 	dec	sp
   05BC 8B 04              1632 	mov	ar4,r3
                           1633 ;	../../../core/net/rime/rudolph2.c:273: if(len < RUDOLPH2_DATASIZE) {
   05BE C3                 1634 	clr	c
   05BF EC                 1635 	mov	a,r4
   05C0 94 40              1636 	subb	a,#0x40
   05C2 EA                 1637 	mov	a,r2
   05C3 64 80              1638 	xrl	a,#0x80
   05C5 94 80              1639 	subb	a,#0x80
   05C7 50 2F              1640 	jnc	00105$
                           1641 ;	../../../core/net/rime/rudolph2.c:274: c->flags |= FLAG_LAST_SENT;
   05C9 C0 04              1642 	push	ar4
   05CB C0 02              1643 	push	ar2
   05CD A8*00              1644 	mov	r0,_bp
   05CF 08                 1645 	inc	r0
   05D0 74 48              1646 	mov	a,#0x48
   05D2 26                 1647 	add	a,@r0
   05D3 FB                 1648 	mov	r3,a
   05D4 E4                 1649 	clr	a
   05D5 08                 1650 	inc	r0
   05D6 36                 1651 	addc	a,@r0
   05D7 FA                 1652 	mov	r2,a
   05D8 08                 1653 	inc	r0
   05D9 86 04              1654 	mov	ar4,@r0
   05DB 8B 82              1655 	mov	dpl,r3
   05DD 8A 83              1656 	mov	dph,r2
   05DF 8C F0              1657 	mov	b,r4
   05E1 12s00r00           1658 	lcall	__gptrget
   05E4 FD                 1659 	mov	r5,a
   05E5 43 05 01           1660 	orl	ar5,#0x01
   05E8 8B 82              1661 	mov	dpl,r3
   05EA 8A 83              1662 	mov	dph,r2
   05EC 8C F0              1663 	mov	b,r4
   05EE ED                 1664 	mov	a,r5
   05EF 12s00r00           1665 	lcall	__gptrput
   05F2 D0 02              1666 	pop	ar2
   05F4 D0 04              1667 	pop	ar4
   05F6 80 25              1668 	sjmp	00106$
   05F8                    1669 00105$:
                           1670 ;	../../../core/net/rime/rudolph2.c:276: c->flags &= ~FLAG_LAST_SENT;
   05F8 A8*00              1671 	mov	r0,_bp
   05FA 08                 1672 	inc	r0
   05FB 74 48              1673 	mov	a,#0x48
   05FD 26                 1674 	add	a,@r0
   05FE FB                 1675 	mov	r3,a
   05FF E4                 1676 	clr	a
   0600 08                 1677 	inc	r0
   0601 36                 1678 	addc	a,@r0
   0602 FD                 1679 	mov	r5,a
   0603 08                 1680 	inc	r0
   0604 86 06              1681 	mov	ar6,@r0
   0606 8B 82              1682 	mov	dpl,r3
   0608 8D 83              1683 	mov	dph,r5
   060A 8E F0              1684 	mov	b,r6
   060C 12s00r00           1685 	lcall	__gptrget
   060F FF                 1686 	mov	r7,a
   0610 53 07 FE           1687 	anl	ar7,#0xFE
   0613 8B 82              1688 	mov	dpl,r3
   0615 8D 83              1689 	mov	dph,r5
   0617 8E F0              1690 	mov	b,r6
   0619 EF                 1691 	mov	a,r7
   061A 12s00r00           1692 	lcall	__gptrput
   061D                    1693 00106$:
                           1694 ;	../../../core/net/rime/rudolph2.c:279: if(c->nacks == 0 &&
   061D A8*00              1695 	mov	r0,_bp
   061F 08                 1696 	inc	r0
   0620 74 47              1697 	mov	a,#0x47
   0622 26                 1698 	add	a,@r0
   0623 FB                 1699 	mov	r3,a
   0624 E4                 1700 	clr	a
   0625 08                 1701 	inc	r0
   0626 36                 1702 	addc	a,@r0
   0627 FD                 1703 	mov	r5,a
   0628 08                 1704 	inc	r0
   0629 86 06              1705 	mov	ar6,@r0
   062B 8B 82              1706 	mov	dpl,r3
   062D 8D 83              1707 	mov	dph,r5
   062F 8E F0              1708 	mov	b,r6
   0631 12s00r00           1709 	lcall	__gptrget
   0634 60 03              1710 	jz	00127$
   0636 02s06rCD           1711 	ljmp	00108$
   0639                    1712 00127$:
                           1713 ;	../../../core/net/rime/rudolph2.c:280: len == RUDOLPH2_DATASIZE &&
   0639 BC 40 05           1714 	cjne	r4,#0x40,00128$
   063C BA 00 02           1715 	cjne	r2,#0x00,00128$
   063F 80 03              1716 	sjmp	00129$
   0641                    1717 00128$:
   0641 02s06rCD           1718 	ljmp	00108$
   0644                    1719 00129$:
                           1720 ;	../../../core/net/rime/rudolph2.c:281: c->snd_nxt + 1 < c->rcv_nxt) {
   0644 C0 03              1721 	push	ar3
   0646 C0 05              1722 	push	ar5
   0648 C0 06              1723 	push	ar6
   064A A8*00              1724 	mov	r0,_bp
   064C 08                 1725 	inc	r0
   064D E5*00              1726 	mov	a,_bp
   064F 24 08              1727 	add	a,#0x08
   0651 F9                 1728 	mov	r1,a
   0652 74 40              1729 	mov	a,#0x40
   0654 26                 1730 	add	a,@r0
   0655 F7                 1731 	mov	@r1,a
   0656 E4                 1732 	clr	a
   0657 08                 1733 	inc	r0
   0658 36                 1734 	addc	a,@r0
   0659 09                 1735 	inc	r1
   065A F7                 1736 	mov	@r1,a
   065B 08                 1737 	inc	r0
   065C 09                 1738 	inc	r1
   065D E6                 1739 	mov	a,@r0
   065E F7                 1740 	mov	@r1,a
   065F E5*00              1741 	mov	a,_bp
   0661 24 08              1742 	add	a,#0x08
   0663 F8                 1743 	mov	r0,a
   0664 86 82              1744 	mov	dpl,@r0
   0666 08                 1745 	inc	r0
   0667 86 83              1746 	mov	dph,@r0
   0669 08                 1747 	inc	r0
   066A 86 F0              1748 	mov	b,@r0
   066C 12s00r00           1749 	lcall	__gptrget
   066F FA                 1750 	mov	r2,a
   0670 A3                 1751 	inc	dptr
   0671 12s00r00           1752 	lcall	__gptrget
   0674 FC                 1753 	mov	r4,a
   0675 E5*00              1754 	mov	a,_bp
   0677 24 06              1755 	add	a,#0x06
   0679 F8                 1756 	mov	r0,a
   067A 74 01              1757 	mov	a,#0x01
   067C 2A                 1758 	add	a,r2
   067D F6                 1759 	mov	@r0,a
   067E E4                 1760 	clr	a
   067F 3C                 1761 	addc	a,r4
   0680 08                 1762 	inc	r0
   0681 F6                 1763 	mov	@r0,a
   0682 A8*00              1764 	mov	r0,_bp
   0684 08                 1765 	inc	r0
   0685 74 42              1766 	mov	a,#0x42
   0687 26                 1767 	add	a,@r0
   0688 FE                 1768 	mov	r6,a
   0689 E4                 1769 	clr	a
   068A 08                 1770 	inc	r0
   068B 36                 1771 	addc	a,@r0
   068C FB                 1772 	mov	r3,a
   068D 08                 1773 	inc	r0
   068E 86 05              1774 	mov	ar5,@r0
   0690 8E 82              1775 	mov	dpl,r6
   0692 8B 83              1776 	mov	dph,r3
   0694 8D F0              1777 	mov	b,r5
   0696 12s00r00           1778 	lcall	__gptrget
   0699 FE                 1779 	mov	r6,a
   069A A3                 1780 	inc	dptr
   069B 12s00r00           1781 	lcall	__gptrget
   069E FB                 1782 	mov	r3,a
   069F E5*00              1783 	mov	a,_bp
   06A1 24 06              1784 	add	a,#0x06
   06A3 F8                 1785 	mov	r0,a
   06A4 C3                 1786 	clr	c
   06A5 E6                 1787 	mov	a,@r0
   06A6 9E                 1788 	subb	a,r6
   06A7 08                 1789 	inc	r0
   06A8 E6                 1790 	mov	a,@r0
   06A9 9B                 1791 	subb	a,r3
   06AA D0 06              1792 	pop	ar6
   06AC D0 05              1793 	pop	ar5
   06AE D0 03              1794 	pop	ar3
   06B0 50 1B              1795 	jnc	00108$
                           1796 ;	../../../core/net/rime/rudolph2.c:282: c->snd_nxt++;
   06B2 0A                 1797 	inc	r2
   06B3 BA 00 01           1798 	cjne	r2,#0x00,00131$
   06B6 0C                 1799 	inc	r4
   06B7                    1800 00131$:
   06B7 E5*00              1801 	mov	a,_bp
   06B9 24 08              1802 	add	a,#0x08
   06BB F8                 1803 	mov	r0,a
   06BC 86 82              1804 	mov	dpl,@r0
   06BE 08                 1805 	inc	r0
   06BF 86 83              1806 	mov	dph,@r0
   06C1 08                 1807 	inc	r0
   06C2 86 F0              1808 	mov	b,@r0
   06C4 EA                 1809 	mov	a,r2
   06C5 12s00r00           1810 	lcall	__gptrput
   06C8 A3                 1811 	inc	dptr
   06C9 EC                 1812 	mov	a,r4
   06CA 12s00r00           1813 	lcall	__gptrput
   06CD                    1814 00108$:
                           1815 ;	../../../core/net/rime/rudolph2.c:284: c->nacks = 0;
   06CD 8B 82              1816 	mov	dpl,r3
   06CF 8D 83              1817 	mov	dph,r5
   06D1 8E F0              1818 	mov	b,r6
   06D3 E4                 1819 	clr	a
   06D4 12s00r00           1820 	lcall	__gptrput
                           1821 ;	../../../core/net/rime/rudolph2.c:285: ctimer_set(&c->t, interval, timed_send, c);
   06D7 A8*00              1822 	mov	r0,_bp
   06D9 08                 1823 	inc	r0
   06DA 74 2B              1824 	mov	a,#0x2B
   06DC 26                 1825 	add	a,@r0
   06DD FA                 1826 	mov	r2,a
   06DE E4                 1827 	clr	a
   06DF 08                 1828 	inc	r0
   06E0 36                 1829 	addc	a,@r0
   06E1 FB                 1830 	mov	r3,a
   06E2 08                 1831 	inc	r0
   06E3 86 04              1832 	mov	ar4,@r0
   06E5 A8*00              1833 	mov	r0,_bp
   06E7 08                 1834 	inc	r0
   06E8 E6                 1835 	mov	a,@r0
   06E9 C0 E0              1836 	push	acc
   06EB 08                 1837 	inc	r0
   06EC E6                 1838 	mov	a,@r0
   06ED C0 E0              1839 	push	acc
   06EF 08                 1840 	inc	r0
   06F0 E6                 1841 	mov	a,@r0
   06F1 C0 E0              1842 	push	acc
   06F3 74r47              1843 	mov	a,#_timed_send
   06F5 C0 E0              1844 	push	acc
   06F7 74s05              1845 	mov	a,#(_timed_send >> 8)
   06F9 C0 E0              1846 	push	acc
   06FB E5*00              1847 	mov	a,_bp
   06FD 24 04              1848 	add	a,#0x04
   06FF F8                 1849 	mov	r0,a
   0700 E6                 1850 	mov	a,@r0
   0701 C0 E0              1851 	push	acc
   0703 08                 1852 	inc	r0
   0704 E6                 1853 	mov	a,@r0
   0705 C0 E0              1854 	push	acc
   0707 8A 82              1855 	mov	dpl,r2
   0709 8B 83              1856 	mov	dph,r3
   070B 8C F0              1857 	mov	b,r4
   070D 12s00r00           1858 	lcall	_ctimer_set
   0710 E5 81              1859 	mov	a,sp
   0712 24 F9              1860 	add	a,#0xf9
   0714 F5 81              1861 	mov	sp,a
   0716                    1862 00114$:
   0716 85*00 81           1863 	mov	sp,_bp
   0719 D0*00              1864 	pop	_bp
   071B 22                 1865 	ret
                           1866 ;------------------------------------------------------------
                           1867 ;Allocation info for local variables in function 'recv'
                           1868 ;------------------------------------------------------------
                           1869 ;polite                    Allocated to stack - offset 1
                           1870 ;c                         Allocated to stack - offset 4
                           1871 ;hdr                       Allocated to stack - offset 7
                           1872 ;len                       Allocated to registers r5 r6 
                           1873 ;sloc0                     Allocated to stack - offset 10
                           1874 ;sloc1                     Allocated to stack - offset 13
                           1875 ;sloc2                     Allocated to stack - offset 16
                           1876 ;sloc3                     Allocated to stack - offset 18
                           1877 ;------------------------------------------------------------
                           1878 ;	../../../core/net/rime/rudolph2.c:290: recv(struct polite_conn *polite)
                           1879 ;	-----------------------------------------
                           1880 ;	 function recv
                           1881 ;	-----------------------------------------
   071C                    1882 _recv:
   071C C0*00              1883 	push	_bp
   071E 85 81*00           1884 	mov	_bp,sp
   0721 C0 82              1885 	push	dpl
   0723 C0 83              1886 	push	dph
   0725 C0 F0              1887 	push	b
   0727 E5 81              1888 	mov	a,sp
   0729 24 14              1889 	add	a,#0x14
   072B F5 81              1890 	mov	sp,a
                           1891 ;	../../../core/net/rime/rudolph2.c:292: struct rudolph2_conn *c = (struct rudolph2_conn *)polite;
   072D A8*00              1892 	mov	r0,_bp
   072F 08                 1893 	inc	r0
   0730 E5*00              1894 	mov	a,_bp
   0732 24 04              1895 	add	a,#0x04
   0734 F9                 1896 	mov	r1,a
   0735 E6                 1897 	mov	a,@r0
   0736 F7                 1898 	mov	@r1,a
   0737 08                 1899 	inc	r0
   0738 09                 1900 	inc	r1
   0739 E6                 1901 	mov	a,@r0
   073A F7                 1902 	mov	@r1,a
   073B 08                 1903 	inc	r0
   073C 09                 1904 	inc	r1
   073D E6                 1905 	mov	a,@r0
   073E F7                 1906 	mov	@r1,a
                           1907 ;	../../../core/net/rime/rudolph2.c:293: struct rudolph2_hdr *hdr = packetbuf_dataptr();
   073F 12s00r00           1908 	lcall	_packetbuf_dataptr
   0742 AA 82              1909 	mov	r2,dpl
   0744 AB 83              1910 	mov	r3,dph
   0746 AC F0              1911 	mov	r4,b
   0748 E5*00              1912 	mov	a,_bp
   074A 24 07              1913 	add	a,#0x07
   074C F8                 1914 	mov	r0,a
   074D A6 02              1915 	mov	@r0,ar2
   074F 08                 1916 	inc	r0
   0750 A6 03              1917 	mov	@r0,ar3
   0752 08                 1918 	inc	r0
   0753 A6 04              1919 	mov	@r0,ar4
                           1920 ;	../../../core/net/rime/rudolph2.c:298: if(hdr->type == TYPE_NACK && hdr->hops_from_base > c->hops_from_base) {
   0755 E5*00              1921 	mov	a,_bp
   0757 24 07              1922 	add	a,#0x07
   0759 F8                 1923 	mov	r0,a
   075A 86 82              1924 	mov	dpl,@r0
   075C 08                 1925 	inc	r0
   075D 86 83              1926 	mov	dph,@r0
   075F 08                 1927 	inc	r0
   0760 86 F0              1928 	mov	b,@r0
   0762 12s00r00           1929 	lcall	__gptrget
   0765 FA                 1930 	mov	r2,a
   0766 BA 01 02           1931 	cjne	r2,#0x01,00147$
   0769 80 03              1932 	sjmp	00148$
   076B                    1933 00147$:
   076B 02s08rDD           1934 	ljmp	00129$
   076E                    1935 00148$:
   076E C0 02              1936 	push	ar2
   0770 E5*00              1937 	mov	a,_bp
   0772 24 07              1938 	add	a,#0x07
   0774 F8                 1939 	mov	r0,a
   0775 74 01              1940 	mov	a,#0x01
   0777 26                 1941 	add	a,@r0
   0778 FB                 1942 	mov	r3,a
   0779 E4                 1943 	clr	a
   077A 08                 1944 	inc	r0
   077B 36                 1945 	addc	a,@r0
   077C FC                 1946 	mov	r4,a
   077D 08                 1947 	inc	r0
   077E 86 02              1948 	mov	ar2,@r0
   0780 8B 82              1949 	mov	dpl,r3
   0782 8C 83              1950 	mov	dph,r4
   0784 8A F0              1951 	mov	b,r2
   0786 12s00r00           1952 	lcall	__gptrget
   0789 FB                 1953 	mov	r3,a
   078A A8*00              1954 	mov	r0,_bp
   078C 08                 1955 	inc	r0
   078D 74 46              1956 	mov	a,#0x46
   078F 26                 1957 	add	a,@r0
   0790 FA                 1958 	mov	r2,a
   0791 E4                 1959 	clr	a
   0792 08                 1960 	inc	r0
   0793 36                 1961 	addc	a,@r0
   0794 FC                 1962 	mov	r4,a
   0795 08                 1963 	inc	r0
   0796 86 05              1964 	mov	ar5,@r0
   0798 8A 82              1965 	mov	dpl,r2
   079A 8C 83              1966 	mov	dph,r4
   079C 8D F0              1967 	mov	b,r5
   079E 12s00r00           1968 	lcall	__gptrget
   07A1 FA                 1969 	mov	r2,a
   07A2 B5 03 00           1970 	cjne	a,ar3,00149$
   07A5                    1971 00149$:
   07A5 D0 02              1972 	pop	ar2
   07A7 40 03              1973 	jc	00150$
   07A9 02s08rDD           1974 	ljmp	00129$
   07AC                    1975 00150$:
                           1976 ;	../../../core/net/rime/rudolph2.c:299: c->nacks++;
   07AC A8*00              1977 	mov	r0,_bp
   07AE 08                 1978 	inc	r0
   07AF 74 47              1979 	mov	a,#0x47
   07B1 26                 1980 	add	a,@r0
   07B2 FB                 1981 	mov	r3,a
   07B3 E4                 1982 	clr	a
   07B4 08                 1983 	inc	r0
   07B5 36                 1984 	addc	a,@r0
   07B6 FC                 1985 	mov	r4,a
   07B7 08                 1986 	inc	r0
   07B8 86 05              1987 	mov	ar5,@r0
   07BA 8B 82              1988 	mov	dpl,r3
   07BC 8C 83              1989 	mov	dph,r4
   07BE 8D F0              1990 	mov	b,r5
   07C0 12s00r00           1991 	lcall	__gptrget
   07C3 FE                 1992 	mov	r6,a
   07C4 0E                 1993 	inc	r6
   07C5 8B 82              1994 	mov	dpl,r3
   07C7 8C 83              1995 	mov	dph,r4
   07C9 8D F0              1996 	mov	b,r5
   07CB EE                 1997 	mov	a,r6
   07CC 12s00r00           1998 	lcall	__gptrput
                           1999 ;	../../../core/net/rime/rudolph2.c:304: if(hdr->version == c->version) {
   07CF E5*00              2000 	mov	a,_bp
   07D1 24 07              2001 	add	a,#0x07
   07D3 F8                 2002 	mov	r0,a
   07D4 74 02              2003 	mov	a,#0x02
   07D6 26                 2004 	add	a,@r0
   07D7 FB                 2005 	mov	r3,a
   07D8 E4                 2006 	clr	a
   07D9 08                 2007 	inc	r0
   07DA 36                 2008 	addc	a,@r0
   07DB FC                 2009 	mov	r4,a
   07DC 08                 2010 	inc	r0
   07DD 86 05              2011 	mov	ar5,@r0
   07DF 8B 82              2012 	mov	dpl,r3
   07E1 8C 83              2013 	mov	dph,r4
   07E3 8D F0              2014 	mov	b,r5
   07E5 12s00r00           2015 	lcall	__gptrget
   07E8 FB                 2016 	mov	r3,a
   07E9 A3                 2017 	inc	dptr
   07EA 12s00r00           2018 	lcall	__gptrget
   07ED FC                 2019 	mov	r4,a
   07EE A8*00              2020 	mov	r0,_bp
   07F0 08                 2021 	inc	r0
   07F1 74 44              2022 	mov	a,#0x44
   07F3 26                 2023 	add	a,@r0
   07F4 FD                 2024 	mov	r5,a
   07F5 E4                 2025 	clr	a
   07F6 08                 2026 	inc	r0
   07F7 36                 2027 	addc	a,@r0
   07F8 FE                 2028 	mov	r6,a
   07F9 08                 2029 	inc	r0
   07FA 86 07              2030 	mov	ar7,@r0
   07FC 8D 82              2031 	mov	dpl,r5
   07FE 8E 83              2032 	mov	dph,r6
   0800 8F F0              2033 	mov	b,r7
   0802 12s00r00           2034 	lcall	__gptrget
   0805 FD                 2035 	mov	r5,a
   0806 A3                 2036 	inc	dptr
   0807 12s00r00           2037 	lcall	__gptrget
   080A FE                 2038 	mov	r6,a
   080B EB                 2039 	mov	a,r3
   080C B5 05 06           2040 	cjne	a,ar5,00151$
   080F EC                 2041 	mov	a,r4
   0810 B5 06 02           2042 	cjne	a,ar6,00151$
   0813 80 03              2043 	sjmp	00152$
   0815                    2044 00151$:
   0815 02s08r97           2045 	ljmp	00106$
   0818                    2046 00152$:
                           2047 ;	../../../core/net/rime/rudolph2.c:305: if(hdr->chunk < c->rcv_nxt) {
   0818 E5*00              2048 	mov	a,_bp
   081A 24 07              2049 	add	a,#0x07
   081C F8                 2050 	mov	r0,a
   081D 74 04              2051 	mov	a,#0x04
   081F 26                 2052 	add	a,@r0
   0820 FA                 2053 	mov	r2,a
   0821 E4                 2054 	clr	a
   0822 08                 2055 	inc	r0
   0823 36                 2056 	addc	a,@r0
   0824 FB                 2057 	mov	r3,a
   0825 08                 2058 	inc	r0
   0826 86 04              2059 	mov	ar4,@r0
   0828 8A 82              2060 	mov	dpl,r2
   082A 8B 83              2061 	mov	dph,r3
   082C 8C F0              2062 	mov	b,r4
   082E 12s00r00           2063 	lcall	__gptrget
   0831 FA                 2064 	mov	r2,a
   0832 A3                 2065 	inc	dptr
   0833 12s00r00           2066 	lcall	__gptrget
   0836 FB                 2067 	mov	r3,a
   0837 A8*00              2068 	mov	r0,_bp
   0839 08                 2069 	inc	r0
   083A 74 42              2070 	mov	a,#0x42
   083C 26                 2071 	add	a,@r0
   083D FC                 2072 	mov	r4,a
   083E E4                 2073 	clr	a
   083F 08                 2074 	inc	r0
   0840 36                 2075 	addc	a,@r0
   0841 FD                 2076 	mov	r5,a
   0842 08                 2077 	inc	r0
   0843 86 06              2078 	mov	ar6,@r0
   0845 8C 82              2079 	mov	dpl,r4
   0847 8D 83              2080 	mov	dph,r5
   0849 8E F0              2081 	mov	b,r6
   084B 12s00r00           2082 	lcall	__gptrget
   084E FC                 2083 	mov	r4,a
   084F A3                 2084 	inc	dptr
   0850 12s00r00           2085 	lcall	__gptrget
   0853 FD                 2086 	mov	r5,a
   0854 C3                 2087 	clr	c
   0855 EA                 2088 	mov	a,r2
   0856 9C                 2089 	subb	a,r4
   0857 EB                 2090 	mov	a,r3
   0858 9D                 2091 	subb	a,r5
   0859 40 03              2092 	jc	00153$
   085B 02s0Cr6F           2093 	ljmp	00132$
   085E                    2094 00153$:
                           2095 ;	../../../core/net/rime/rudolph2.c:306: c->snd_nxt = hdr->chunk;
   085E A8*00              2096 	mov	r0,_bp
   0860 08                 2097 	inc	r0
   0861 74 40              2098 	mov	a,#0x40
   0863 26                 2099 	add	a,@r0
   0864 FC                 2100 	mov	r4,a
   0865 E4                 2101 	clr	a
   0866 08                 2102 	inc	r0
   0867 36                 2103 	addc	a,@r0
   0868 FD                 2104 	mov	r5,a
   0869 08                 2105 	inc	r0
   086A 86 06              2106 	mov	ar6,@r0
   086C 8C 82              2107 	mov	dpl,r4
   086E 8D 83              2108 	mov	dph,r5
   0870 8E F0              2109 	mov	b,r6
   0872 EA                 2110 	mov	a,r2
   0873 12s00r00           2111 	lcall	__gptrput
   0876 A3                 2112 	inc	dptr
   0877 EB                 2113 	mov	a,r3
   0878 12s00r00           2114 	lcall	__gptrput
                           2115 ;	../../../core/net/rime/rudolph2.c:307: send_data(c, SEND_INTERVAL);
   087B 74 40              2116 	mov	a,#0x40
   087D C0 E0              2117 	push	acc
   087F E4                 2118 	clr	a
   0880 C0 E0              2119 	push	acc
   0882 A8*00              2120 	mov	r0,_bp
   0884 08                 2121 	inc	r0
   0885 86 82              2122 	mov	dpl,@r0
   0887 08                 2123 	inc	r0
   0888 86 83              2124 	mov	dph,@r0
   088A 08                 2125 	inc	r0
   088B 86 F0              2126 	mov	b,@r0
   088D 12s03rC4           2127 	lcall	_send_data
   0890 15 81              2128 	dec	sp
   0892 15 81              2129 	dec	sp
   0894 02s0Cr6F           2130 	ljmp	00132$
   0897                    2131 00106$:
                           2132 ;	../../../core/net/rime/rudolph2.c:309: } else if(LT(hdr->version, c->version)) {
   0897 EB                 2133 	mov	a,r3
   0898 C3                 2134 	clr	c
   0899 9D                 2135 	subb	a,r5
   089A FB                 2136 	mov	r3,a
   089B EC                 2137 	mov	a,r4
   089C 9E                 2138 	subb	a,r6
   089D FC                 2139 	mov	r4,a
   089E 20 E7 03           2140 	jb	acc.7,00154$
   08A1 02s0Cr6F           2141 	ljmp	00132$
   08A4                    2142 00154$:
                           2143 ;	../../../core/net/rime/rudolph2.c:310: c->snd_nxt = 0;
   08A4 A8*00              2144 	mov	r0,_bp
   08A6 08                 2145 	inc	r0
   08A7 74 40              2146 	mov	a,#0x40
   08A9 26                 2147 	add	a,@r0
   08AA FB                 2148 	mov	r3,a
   08AB E4                 2149 	clr	a
   08AC 08                 2150 	inc	r0
   08AD 36                 2151 	addc	a,@r0
   08AE FC                 2152 	mov	r4,a
   08AF 08                 2153 	inc	r0
   08B0 86 05              2154 	mov	ar5,@r0
   08B2 8B 82              2155 	mov	dpl,r3
   08B4 8C 83              2156 	mov	dph,r4
   08B6 8D F0              2157 	mov	b,r5
   08B8 E4                 2158 	clr	a
   08B9 12s00r00           2159 	lcall	__gptrput
   08BC A3                 2160 	inc	dptr
   08BD E4                 2161 	clr	a
   08BE 12s00r00           2162 	lcall	__gptrput
                           2163 ;	../../../core/net/rime/rudolph2.c:311: send_data(c, SEND_INTERVAL);
   08C1 74 40              2164 	mov	a,#0x40
   08C3 C0 E0              2165 	push	acc
   08C5 E4                 2166 	clr	a
   08C6 C0 E0              2167 	push	acc
   08C8 A8*00              2168 	mov	r0,_bp
   08CA 08                 2169 	inc	r0
   08CB 86 82              2170 	mov	dpl,@r0
   08CD 08                 2171 	inc	r0
   08CE 86 83              2172 	mov	dph,@r0
   08D0 08                 2173 	inc	r0
   08D1 86 F0              2174 	mov	b,@r0
   08D3 12s03rC4           2175 	lcall	_send_data
   08D6 15 81              2176 	dec	sp
   08D8 15 81              2177 	dec	sp
   08DA 02s0Cr6F           2178 	ljmp	00132$
   08DD                    2179 00129$:
                           2180 ;	../../../core/net/rime/rudolph2.c:313: } else if(hdr->type == TYPE_DATA) {
   08DD EA                 2181 	mov	a,r2
   08DE 60 03              2182 	jz	00155$
   08E0 02s0Cr6F           2183 	ljmp	00132$
   08E3                    2184 00155$:
                           2185 ;	../../../core/net/rime/rudolph2.c:314: if(hdr->hops_from_base < c->hops_from_base) {
   08E3 E5*00              2186 	mov	a,_bp
   08E5 24 07              2187 	add	a,#0x07
   08E7 F8                 2188 	mov	r0,a
   08E8 74 01              2189 	mov	a,#0x01
   08EA 26                 2190 	add	a,@r0
   08EB FA                 2191 	mov	r2,a
   08EC E4                 2192 	clr	a
   08ED 08                 2193 	inc	r0
   08EE 36                 2194 	addc	a,@r0
   08EF FB                 2195 	mov	r3,a
   08F0 08                 2196 	inc	r0
   08F1 86 04              2197 	mov	ar4,@r0
   08F3 8A 82              2198 	mov	dpl,r2
   08F5 8B 83              2199 	mov	dph,r3
   08F7 8C F0              2200 	mov	b,r4
   08F9 12s00r00           2201 	lcall	__gptrget
   08FC FA                 2202 	mov	r2,a
   08FD E5*00              2203 	mov	a,_bp
   08FF 24 04              2204 	add	a,#0x04
   0901 F8                 2205 	mov	r0,a
   0902 74 46              2206 	mov	a,#0x46
   0904 26                 2207 	add	a,@r0
   0905 FB                 2208 	mov	r3,a
   0906 E4                 2209 	clr	a
   0907 08                 2210 	inc	r0
   0908 36                 2211 	addc	a,@r0
   0909 FC                 2212 	mov	r4,a
   090A 08                 2213 	inc	r0
   090B 86 05              2214 	mov	ar5,@r0
   090D 8B 82              2215 	mov	dpl,r3
   090F 8C 83              2216 	mov	dph,r4
   0911 8D F0              2217 	mov	b,r5
   0913 12s00r00           2218 	lcall	__gptrget
   0916 FE                 2219 	mov	r6,a
   0917 EA                 2220 	mov	a,r2
   0918 B5 06 00           2221 	cjne	a,ar6,00156$
   091B                    2222 00156$:
   091B 40 03              2223 	jc	00157$
   091D 02s0Cr6F           2224 	ljmp	00132$
   0920                    2225 00157$:
                           2226 ;	../../../core/net/rime/rudolph2.c:317: c->hops_from_base = hdr->hops_from_base + 1;
   0920 0A                 2227 	inc	r2
   0921 8B 82              2228 	mov	dpl,r3
   0923 8C 83              2229 	mov	dph,r4
   0925 8D F0              2230 	mov	b,r5
   0927 EA                 2231 	mov	a,r2
   0928 12s00r00           2232 	lcall	__gptrput
                           2233 ;	../../../core/net/rime/rudolph2.c:318: if(LT(c->version, hdr->version)) {
   092B E5*00              2234 	mov	a,_bp
   092D 24 04              2235 	add	a,#0x04
   092F F8                 2236 	mov	r0,a
   0930 E5*00              2237 	mov	a,_bp
   0932 24 0A              2238 	add	a,#0x0a
   0934 F9                 2239 	mov	r1,a
   0935 74 44              2240 	mov	a,#0x44
   0937 26                 2241 	add	a,@r0
   0938 F7                 2242 	mov	@r1,a
   0939 E4                 2243 	clr	a
   093A 08                 2244 	inc	r0
   093B 36                 2245 	addc	a,@r0
   093C 09                 2246 	inc	r1
   093D F7                 2247 	mov	@r1,a
   093E 08                 2248 	inc	r0
   093F 09                 2249 	inc	r1
   0940 E6                 2250 	mov	a,@r0
   0941 F7                 2251 	mov	@r1,a
   0942 E5*00              2252 	mov	a,_bp
   0944 24 0A              2253 	add	a,#0x0a
   0946 F8                 2254 	mov	r0,a
   0947 86 82              2255 	mov	dpl,@r0
   0949 08                 2256 	inc	r0
   094A 86 83              2257 	mov	dph,@r0
   094C 08                 2258 	inc	r0
   094D 86 F0              2259 	mov	b,@r0
   094F 12s00r00           2260 	lcall	__gptrget
   0952 FB                 2261 	mov	r3,a
   0953 A3                 2262 	inc	dptr
   0954 12s00r00           2263 	lcall	__gptrget
   0957 FC                 2264 	mov	r4,a
   0958 E5*00              2265 	mov	a,_bp
   095A 24 07              2266 	add	a,#0x07
   095C F8                 2267 	mov	r0,a
   095D 74 02              2268 	mov	a,#0x02
   095F 26                 2269 	add	a,@r0
   0960 FF                 2270 	mov	r7,a
   0961 E4                 2271 	clr	a
   0962 08                 2272 	inc	r0
   0963 36                 2273 	addc	a,@r0
   0964 FD                 2274 	mov	r5,a
   0965 08                 2275 	inc	r0
   0966 86 06              2276 	mov	ar6,@r0
   0968 8F 82              2277 	mov	dpl,r7
   096A 8D 83              2278 	mov	dph,r5
   096C 8E F0              2279 	mov	b,r6
   096E 12s00r00           2280 	lcall	__gptrget
   0971 FD                 2281 	mov	r5,a
   0972 A3                 2282 	inc	dptr
   0973 12s00r00           2283 	lcall	__gptrget
   0976 FE                 2284 	mov	r6,a
   0977 EB                 2285 	mov	a,r3
   0978 C3                 2286 	clr	c
   0979 9D                 2287 	subb	a,r5
   097A FF                 2288 	mov	r7,a
   097B EC                 2289 	mov	a,r4
   097C 9E                 2290 	subb	a,r6
   097D FA                 2291 	mov	r2,a
   097E 20 E7 03           2292 	jb	acc.7,00158$
   0981 02s0Ar89           2293 	ljmp	00122$
   0984                    2294 00158$:
                           2295 ;	../../../core/net/rime/rudolph2.c:322: c->version = hdr->version;
   0984 E5*00              2296 	mov	a,_bp
   0986 24 0A              2297 	add	a,#0x0a
   0988 F8                 2298 	mov	r0,a
   0989 86 82              2299 	mov	dpl,@r0
   098B 08                 2300 	inc	r0
   098C 86 83              2301 	mov	dph,@r0
   098E 08                 2302 	inc	r0
   098F 86 F0              2303 	mov	b,@r0
   0991 ED                 2304 	mov	a,r5
   0992 12s00r00           2305 	lcall	__gptrput
   0995 A3                 2306 	inc	dptr
   0996 EE                 2307 	mov	a,r6
   0997 12s00r00           2308 	lcall	__gptrput
                           2309 ;	../../../core/net/rime/rudolph2.c:323: c->snd_nxt = c->rcv_nxt = 0;
   099A E5*00              2310 	mov	a,_bp
   099C 24 04              2311 	add	a,#0x04
   099E F8                 2312 	mov	r0,a
   099F 74 40              2313 	mov	a,#0x40
   09A1 26                 2314 	add	a,@r0
   09A2 FC                 2315 	mov	r4,a
   09A3 E4                 2316 	clr	a
   09A4 08                 2317 	inc	r0
   09A5 36                 2318 	addc	a,@r0
   09A6 FD                 2319 	mov	r5,a
   09A7 08                 2320 	inc	r0
   09A8 86 06              2321 	mov	ar6,@r0
   09AA E5*00              2322 	mov	a,_bp
   09AC 24 04              2323 	add	a,#0x04
   09AE F8                 2324 	mov	r0,a
   09AF 74 42              2325 	mov	a,#0x42
   09B1 26                 2326 	add	a,@r0
   09B2 FF                 2327 	mov	r7,a
   09B3 E4                 2328 	clr	a
   09B4 08                 2329 	inc	r0
   09B5 36                 2330 	addc	a,@r0
   09B6 FA                 2331 	mov	r2,a
   09B7 08                 2332 	inc	r0
   09B8 86 03              2333 	mov	ar3,@r0
   09BA 8F 82              2334 	mov	dpl,r7
   09BC 8A 83              2335 	mov	dph,r2
   09BE 8B F0              2336 	mov	b,r3
   09C0 E4                 2337 	clr	a
   09C1 12s00r00           2338 	lcall	__gptrput
   09C4 A3                 2339 	inc	dptr
   09C5 E4                 2340 	clr	a
   09C6 12s00r00           2341 	lcall	__gptrput
   09C9 8C 82              2342 	mov	dpl,r4
   09CB 8D 83              2343 	mov	dph,r5
   09CD 8E F0              2344 	mov	b,r6
   09CF E4                 2345 	clr	a
   09D0 12s00r00           2346 	lcall	__gptrput
   09D3 A3                 2347 	inc	dptr
   09D4 E4                 2348 	clr	a
   09D5 12s00r00           2349 	lcall	__gptrput
                           2350 ;	../../../core/net/rime/rudolph2.c:324: c->flags &= ~FLAG_LAST_RECEIVED;
   09D8 E5*00              2351 	mov	a,_bp
   09DA 24 04              2352 	add	a,#0x04
   09DC F8                 2353 	mov	r0,a
   09DD 74 48              2354 	mov	a,#0x48
   09DF 26                 2355 	add	a,@r0
   09E0 FA                 2356 	mov	r2,a
   09E1 E4                 2357 	clr	a
   09E2 08                 2358 	inc	r0
   09E3 36                 2359 	addc	a,@r0
   09E4 FB                 2360 	mov	r3,a
   09E5 08                 2361 	inc	r0
   09E6 86 04              2362 	mov	ar4,@r0
   09E8 8A 82              2363 	mov	dpl,r2
   09EA 8B 83              2364 	mov	dph,r3
   09EC 8C F0              2365 	mov	b,r4
   09EE 12s00r00           2366 	lcall	__gptrget
   09F1 FF                 2367 	mov	r7,a
   09F2 53 07 FD           2368 	anl	ar7,#0xFD
   09F5 8A 82              2369 	mov	dpl,r2
   09F7 8B 83              2370 	mov	dph,r3
   09F9 8C F0              2371 	mov	b,r4
   09FB EF                 2372 	mov	a,r7
   09FC 12s00r00           2373 	lcall	__gptrput
                           2374 ;	../../../core/net/rime/rudolph2.c:325: c->flags &= ~FLAG_LAST_SENT;
   09FF 8A 82              2375 	mov	dpl,r2
   0A01 8B 83              2376 	mov	dph,r3
   0A03 8C F0              2377 	mov	b,r4
   0A05 12s00r00           2378 	lcall	__gptrget
   0A08 FF                 2379 	mov	r7,a
   0A09 53 07 FE           2380 	anl	ar7,#0xFE
   0A0C 8A 82              2381 	mov	dpl,r2
   0A0E 8B 83              2382 	mov	dph,r3
   0A10 8C F0              2383 	mov	b,r4
   0A12 EF                 2384 	mov	a,r7
   0A13 12s00r00           2385 	lcall	__gptrput
                           2386 ;	../../../core/net/rime/rudolph2.c:326: if(hdr->chunk != 0) {
   0A16 E5*00              2387 	mov	a,_bp
   0A18 24 07              2388 	add	a,#0x07
   0A1A F8                 2389 	mov	r0,a
   0A1B 74 04              2390 	mov	a,#0x04
   0A1D 26                 2391 	add	a,@r0
   0A1E FA                 2392 	mov	r2,a
   0A1F E4                 2393 	clr	a
   0A20 08                 2394 	inc	r0
   0A21 36                 2395 	addc	a,@r0
   0A22 FB                 2396 	mov	r3,a
   0A23 08                 2397 	inc	r0
   0A24 86 04              2398 	mov	ar4,@r0
   0A26 8A 82              2399 	mov	dpl,r2
   0A28 8B 83              2400 	mov	dph,r3
   0A2A 8C F0              2401 	mov	b,r4
   0A2C 12s00r00           2402 	lcall	__gptrget
   0A2F FA                 2403 	mov	r2,a
   0A30 A3                 2404 	inc	dptr
   0A31 12s00r00           2405 	lcall	__gptrget
   0A34 FB                 2406 	mov	r3,a
   0A35 4A                 2407 	orl	a,r2
   0A36 60 13              2408 	jz	00109$
                           2409 ;	../../../core/net/rime/rudolph2.c:327: send_nack(c);
   0A38 E5*00              2410 	mov	a,_bp
   0A3A 24 04              2411 	add	a,#0x04
   0A3C F8                 2412 	mov	r0,a
   0A3D 86 82              2413 	mov	dpl,@r0
   0A3F 08                 2414 	inc	r0
   0A40 86 83              2415 	mov	dph,@r0
   0A42 08                 2416 	inc	r0
   0A43 86 F0              2417 	mov	b,@r0
   0A45 12s04r36           2418 	lcall	_send_nack
   0A48 02s0Cr6F           2419 	ljmp	00132$
   0A4B                    2420 00109$:
                           2421 ;	../../../core/net/rime/rudolph2.c:329: packetbuf_hdrreduce(sizeof(struct rudolph2_hdr));
   0A4B 90 00 06           2422 	mov	dptr,#0x0006
   0A4E 12s00r00           2423 	lcall	_packetbuf_hdrreduce
                           2424 ;	../../../core/net/rime/rudolph2.c:330: write_data(c, 0, packetbuf_dataptr(), packetbuf_totlen());
   0A51 12s00r00           2425 	lcall	_packetbuf_totlen
   0A54 AB 82              2426 	mov	r3,dpl
   0A56 AD 83              2427 	mov	r5,dph
   0A58 C0 03              2428 	push	ar3
   0A5A C0 05              2429 	push	ar5
   0A5C 12s00r00           2430 	lcall	_packetbuf_dataptr
   0A5F AC 82              2431 	mov	r4,dpl
   0A61 AF 83              2432 	mov	r7,dph
   0A63 AA F0              2433 	mov	r2,b
   0A65 C0 04              2434 	push	ar4
   0A67 C0 07              2435 	push	ar7
   0A69 C0 02              2436 	push	ar2
   0A6B E4                 2437 	clr	a
   0A6C C0 E0              2438 	push	acc
   0A6E C0 E0              2439 	push	acc
   0A70 E5*00              2440 	mov	a,_bp
   0A72 24 04              2441 	add	a,#0x04
   0A74 F8                 2442 	mov	r0,a
   0A75 86 82              2443 	mov	dpl,@r0
   0A77 08                 2444 	inc	r0
   0A78 86 83              2445 	mov	dph,@r0
   0A7A 08                 2446 	inc	r0
   0A7B 86 F0              2447 	mov	b,@r0
   0A7D 12s01rD0           2448 	lcall	_write_data
   0A80 E5 81              2449 	mov	a,sp
   0A82 24 F9              2450 	add	a,#0xf9
   0A84 F5 81              2451 	mov	sp,a
   0A86 02s0Cr6F           2452 	ljmp	00132$
   0A89                    2453 00122$:
                           2454 ;	../../../core/net/rime/rudolph2.c:332: } else if(hdr->version == c->version) {
   0A89 ED                 2455 	mov	a,r5
   0A8A B5 03 06           2456 	cjne	a,ar3,00160$
   0A8D EE                 2457 	mov	a,r6
   0A8E B5 04 02           2458 	cjne	a,ar4,00160$
   0A91 80 03              2459 	sjmp	00161$
   0A93                    2460 00160$:
   0A93 02s0Cr6F           2461 	ljmp	00132$
   0A96                    2462 00161$:
                           2463 ;	../../../core/net/rime/rudolph2.c:337: if(hdr->chunk == c->rcv_nxt) {
   0A96 E5*00              2464 	mov	a,_bp
   0A98 24 07              2465 	add	a,#0x07
   0A9A F8                 2466 	mov	r0,a
   0A9B 74 04              2467 	mov	a,#0x04
   0A9D 26                 2468 	add	a,@r0
   0A9E FA                 2469 	mov	r2,a
   0A9F E4                 2470 	clr	a
   0AA0 08                 2471 	inc	r0
   0AA1 36                 2472 	addc	a,@r0
   0AA2 FB                 2473 	mov	r3,a
   0AA3 08                 2474 	inc	r0
   0AA4 86 04              2475 	mov	ar4,@r0
   0AA6 8A 82              2476 	mov	dpl,r2
   0AA8 8B 83              2477 	mov	dph,r3
   0AAA 8C F0              2478 	mov	b,r4
   0AAC E5*00              2479 	mov	a,_bp
   0AAE 24 0D              2480 	add	a,#0x0d
   0AB0 F8                 2481 	mov	r0,a
   0AB1 12s00r00           2482 	lcall	__gptrget
   0AB4 F6                 2483 	mov	@r0,a
   0AB5 A3                 2484 	inc	dptr
   0AB6 12s00r00           2485 	lcall	__gptrget
   0AB9 08                 2486 	inc	r0
   0ABA F6                 2487 	mov	@r0,a
   0ABB E5*00              2488 	mov	a,_bp
   0ABD 24 04              2489 	add	a,#0x04
   0ABF F8                 2490 	mov	r0,a
   0AC0 74 42              2491 	mov	a,#0x42
   0AC2 26                 2492 	add	a,@r0
   0AC3 FF                 2493 	mov	r7,a
   0AC4 E4                 2494 	clr	a
   0AC5 08                 2495 	inc	r0
   0AC6 36                 2496 	addc	a,@r0
   0AC7 FD                 2497 	mov	r5,a
   0AC8 08                 2498 	inc	r0
   0AC9 86 06              2499 	mov	ar6,@r0
   0ACB 8F 82              2500 	mov	dpl,r7
   0ACD 8D 83              2501 	mov	dph,r5
   0ACF 8E F0              2502 	mov	b,r6
   0AD1 12s00r00           2503 	lcall	__gptrget
   0AD4 FD                 2504 	mov	r5,a
   0AD5 A3                 2505 	inc	dptr
   0AD6 12s00r00           2506 	lcall	__gptrget
   0AD9 FE                 2507 	mov	r6,a
   0ADA E5*00              2508 	mov	a,_bp
   0ADC 24 0D              2509 	add	a,#0x0d
   0ADE F8                 2510 	mov	r0,a
   0ADF E6                 2511 	mov	a,@r0
   0AE0 B5 05 07           2512 	cjne	a,ar5,00162$
   0AE3 08                 2513 	inc	r0
   0AE4 E6                 2514 	mov	a,@r0
   0AE5 B5 06 02           2515 	cjne	a,ar6,00162$
   0AE8 80 03              2516 	sjmp	00163$
   0AEA                    2517 00162$:
   0AEA 02s0Cr52           2518 	ljmp	00117$
   0AED                    2519 00163$:
                           2520 ;	../../../core/net/rime/rudolph2.c:339: packetbuf_hdrreduce(sizeof(struct rudolph2_hdr));
   0AED 90 00 06           2521 	mov	dptr,#0x0006
   0AF0 C0 02              2522 	push	ar2
   0AF2 C0 03              2523 	push	ar3
   0AF4 C0 04              2524 	push	ar4
   0AF6 12s00r00           2525 	lcall	_packetbuf_hdrreduce
                           2526 ;	../../../core/net/rime/rudolph2.c:343: len = packetbuf_totlen();
   0AF9 12s00r00           2527 	lcall	_packetbuf_totlen
   0AFC AD 82              2528 	mov	r5,dpl
   0AFE AE 83              2529 	mov	r6,dph
                           2530 ;	../../../core/net/rime/rudolph2.c:344: write_data(c, hdr->chunk, packetbuf_dataptr(), packetbuf_totlen());
   0B00 C0 05              2531 	push	ar5
   0B02 C0 06              2532 	push	ar6
   0B04 12s00r00           2533 	lcall	_packetbuf_totlen
   0B07 C8                 2534 	xch	a,r0
   0B08 E5*00              2535 	mov	a,_bp
   0B0A 24 10              2536 	add	a,#0x10
   0B0C C8                 2537 	xch	a,r0
   0B0D A6 82              2538 	mov	@r0,dpl
   0B0F 08                 2539 	inc	r0
   0B10 A6 83              2540 	mov	@r0,dph
   0B12 12s00r00           2541 	lcall	_packetbuf_dataptr
   0B15 C8                 2542 	xch	a,r0
   0B16 E5*00              2543 	mov	a,_bp
   0B18 24 12              2544 	add	a,#0x12
   0B1A C8                 2545 	xch	a,r0
   0B1B A6 82              2546 	mov	@r0,dpl
   0B1D 08                 2547 	inc	r0
   0B1E A6 83              2548 	mov	@r0,dph
   0B20 08                 2549 	inc	r0
   0B21 A6 F0              2550 	mov	@r0,b
   0B23 D0 06              2551 	pop	ar6
   0B25 D0 05              2552 	pop	ar5
   0B27 D0 04              2553 	pop	ar4
   0B29 D0 03              2554 	pop	ar3
   0B2B D0 02              2555 	pop	ar2
   0B2D 8A 82              2556 	mov	dpl,r2
   0B2F 8B 83              2557 	mov	dph,r3
   0B31 8C F0              2558 	mov	b,r4
   0B33 12s00r00           2559 	lcall	__gptrget
   0B36 FF                 2560 	mov	r7,a
   0B37 A3                 2561 	inc	dptr
   0B38 12s00r00           2562 	lcall	__gptrget
   0B3B FA                 2563 	mov	r2,a
   0B3C C0 05              2564 	push	ar5
   0B3E C0 06              2565 	push	ar6
   0B40 E5*00              2566 	mov	a,_bp
   0B42 24 10              2567 	add	a,#0x10
   0B44 F8                 2568 	mov	r0,a
   0B45 E6                 2569 	mov	a,@r0
   0B46 C0 E0              2570 	push	acc
   0B48 08                 2571 	inc	r0
   0B49 E6                 2572 	mov	a,@r0
   0B4A C0 E0              2573 	push	acc
   0B4C E5*00              2574 	mov	a,_bp
   0B4E 24 12              2575 	add	a,#0x12
   0B50 F8                 2576 	mov	r0,a
   0B51 E6                 2577 	mov	a,@r0
   0B52 C0 E0              2578 	push	acc
   0B54 08                 2579 	inc	r0
   0B55 E6                 2580 	mov	a,@r0
   0B56 C0 E0              2581 	push	acc
   0B58 08                 2582 	inc	r0
   0B59 E6                 2583 	mov	a,@r0
   0B5A C0 E0              2584 	push	acc
   0B5C C0 07              2585 	push	ar7
   0B5E C0 02              2586 	push	ar2
   0B60 E5*00              2587 	mov	a,_bp
   0B62 24 04              2588 	add	a,#0x04
   0B64 F8                 2589 	mov	r0,a
   0B65 86 82              2590 	mov	dpl,@r0
   0B67 08                 2591 	inc	r0
   0B68 86 83              2592 	mov	dph,@r0
   0B6A 08                 2593 	inc	r0
   0B6B 86 F0              2594 	mov	b,@r0
   0B6D 12s01rD0           2595 	lcall	_write_data
   0B70 E5 81              2596 	mov	a,sp
   0B72 24 F9              2597 	add	a,#0xf9
   0B74 F5 81              2598 	mov	sp,a
   0B76 D0 06              2599 	pop	ar6
   0B78 D0 05              2600 	pop	ar5
                           2601 ;	../../../core/net/rime/rudolph2.c:345: c->rcv_nxt++;
   0B7A E5*00              2602 	mov	a,_bp
   0B7C 24 04              2603 	add	a,#0x04
   0B7E F8                 2604 	mov	r0,a
   0B7F E5*00              2605 	mov	a,_bp
   0B81 24 12              2606 	add	a,#0x12
   0B83 F9                 2607 	mov	r1,a
   0B84 74 42              2608 	mov	a,#0x42
   0B86 26                 2609 	add	a,@r0
   0B87 F7                 2610 	mov	@r1,a
   0B88 E4                 2611 	clr	a
   0B89 08                 2612 	inc	r0
   0B8A 36                 2613 	addc	a,@r0
   0B8B 09                 2614 	inc	r1
   0B8C F7                 2615 	mov	@r1,a
   0B8D 08                 2616 	inc	r0
   0B8E 09                 2617 	inc	r1
   0B8F E6                 2618 	mov	a,@r0
   0B90 F7                 2619 	mov	@r1,a
   0B91 E5*00              2620 	mov	a,_bp
   0B93 24 12              2621 	add	a,#0x12
   0B95 F8                 2622 	mov	r0,a
   0B96 86 82              2623 	mov	dpl,@r0
   0B98 08                 2624 	inc	r0
   0B99 86 83              2625 	mov	dph,@r0
   0B9B 08                 2626 	inc	r0
   0B9C 86 F0              2627 	mov	b,@r0
   0B9E 12s00r00           2628 	lcall	__gptrget
   0BA1 FF                 2629 	mov	r7,a
   0BA2 A3                 2630 	inc	dptr
   0BA3 12s00r00           2631 	lcall	__gptrget
   0BA6 FA                 2632 	mov	r2,a
   0BA7 0F                 2633 	inc	r7
   0BA8 BF 00 01           2634 	cjne	r7,#0x00,00164$
   0BAB 0A                 2635 	inc	r2
   0BAC                    2636 00164$:
   0BAC E5*00              2637 	mov	a,_bp
   0BAE 24 12              2638 	add	a,#0x12
   0BB0 F8                 2639 	mov	r0,a
   0BB1 86 82              2640 	mov	dpl,@r0
   0BB3 08                 2641 	inc	r0
   0BB4 86 83              2642 	mov	dph,@r0
   0BB6 08                 2643 	inc	r0
   0BB7 86 F0              2644 	mov	b,@r0
   0BB9 EF                 2645 	mov	a,r7
   0BBA 12s00r00           2646 	lcall	__gptrput
   0BBD A3                 2647 	inc	dptr
   0BBE EA                 2648 	mov	a,r2
   0BBF 12s00r00           2649 	lcall	__gptrput
                           2650 ;	../../../core/net/rime/rudolph2.c:346: if(len < RUDOLPH2_DATASIZE) {
   0BC2 C3                 2651 	clr	c
   0BC3 ED                 2652 	mov	a,r5
   0BC4 94 40              2653 	subb	a,#0x40
   0BC6 EE                 2654 	mov	a,r6
   0BC7 64 80              2655 	xrl	a,#0x80
   0BC9 94 80              2656 	subb	a,#0x80
   0BCB 40 03              2657 	jc	00165$
   0BCD 02s0Cr6F           2658 	ljmp	00132$
   0BD0                    2659 00165$:
                           2660 ;	../../../core/net/rime/rudolph2.c:347: c->flags |= FLAG_LAST_RECEIVED;
   0BD0 E5*00              2661 	mov	a,_bp
   0BD2 24 04              2662 	add	a,#0x04
   0BD4 F8                 2663 	mov	r0,a
   0BD5 74 48              2664 	mov	a,#0x48
   0BD7 26                 2665 	add	a,@r0
   0BD8 FA                 2666 	mov	r2,a
   0BD9 E4                 2667 	clr	a
   0BDA 08                 2668 	inc	r0
   0BDB 36                 2669 	addc	a,@r0
   0BDC FB                 2670 	mov	r3,a
   0BDD 08                 2671 	inc	r0
   0BDE 86 04              2672 	mov	ar4,@r0
   0BE0 8A 82              2673 	mov	dpl,r2
   0BE2 8B 83              2674 	mov	dph,r3
   0BE4 8C F0              2675 	mov	b,r4
   0BE6 12s00r00           2676 	lcall	__gptrget
   0BE9 FF                 2677 	mov	r7,a
   0BEA 43 07 02           2678 	orl	ar7,#0x02
   0BED 8A 82              2679 	mov	dpl,r2
   0BEF 8B 83              2680 	mov	dph,r3
   0BF1 8C F0              2681 	mov	b,r4
   0BF3 EF                 2682 	mov	a,r7
   0BF4 12s00r00           2683 	lcall	__gptrput
                           2684 ;	../../../core/net/rime/rudolph2.c:348: send_data(c, RESEND_INTERVAL);
   0BF7 E4                 2685 	clr	a
   0BF8 C0 E0              2686 	push	acc
   0BFA 74 01              2687 	mov	a,#0x01
   0BFC C0 E0              2688 	push	acc
   0BFE E5*00              2689 	mov	a,_bp
   0C00 24 04              2690 	add	a,#0x04
   0C02 F8                 2691 	mov	r0,a
   0C03 86 82              2692 	mov	dpl,@r0
   0C05 08                 2693 	inc	r0
   0C06 86 83              2694 	mov	dph,@r0
   0C08 08                 2695 	inc	r0
   0C09 86 F0              2696 	mov	b,@r0
   0C0B 12s03rC4           2697 	lcall	_send_data
   0C0E 15 81              2698 	dec	sp
   0C10 15 81              2699 	dec	sp
                           2700 ;	../../../core/net/rime/rudolph2.c:349: ctimer_set(&c->t, RESEND_INTERVAL, timed_send, c);
   0C12 E5*00              2701 	mov	a,_bp
   0C14 24 04              2702 	add	a,#0x04
   0C16 F8                 2703 	mov	r0,a
   0C17 74 2B              2704 	mov	a,#0x2B
   0C19 26                 2705 	add	a,@r0
   0C1A FA                 2706 	mov	r2,a
   0C1B E4                 2707 	clr	a
   0C1C 08                 2708 	inc	r0
   0C1D 36                 2709 	addc	a,@r0
   0C1E FB                 2710 	mov	r3,a
   0C1F 08                 2711 	inc	r0
   0C20 86 04              2712 	mov	ar4,@r0
   0C22 E5*00              2713 	mov	a,_bp
   0C24 24 04              2714 	add	a,#0x04
   0C26 F8                 2715 	mov	r0,a
   0C27 E6                 2716 	mov	a,@r0
   0C28 C0 E0              2717 	push	acc
   0C2A 08                 2718 	inc	r0
   0C2B E6                 2719 	mov	a,@r0
   0C2C C0 E0              2720 	push	acc
   0C2E 08                 2721 	inc	r0
   0C2F E6                 2722 	mov	a,@r0
   0C30 C0 E0              2723 	push	acc
   0C32 74r47              2724 	mov	a,#_timed_send
   0C34 C0 E0              2725 	push	acc
   0C36 74s05              2726 	mov	a,#(_timed_send >> 8)
   0C38 C0 E0              2727 	push	acc
   0C3A E4                 2728 	clr	a
   0C3B C0 E0              2729 	push	acc
   0C3D 74 01              2730 	mov	a,#0x01
   0C3F C0 E0              2731 	push	acc
   0C41 8A 82              2732 	mov	dpl,r2
   0C43 8B 83              2733 	mov	dph,r3
   0C45 8C F0              2734 	mov	b,r4
   0C47 12s00r00           2735 	lcall	_ctimer_set
   0C4A E5 81              2736 	mov	a,sp
   0C4C 24 F9              2737 	add	a,#0xf9
   0C4E F5 81              2738 	mov	sp,a
   0C50 80 1D              2739 	sjmp	00132$
   0C52                    2740 00117$:
                           2741 ;	../../../core/net/rime/rudolph2.c:351: } else if(hdr->chunk > c->rcv_nxt) {
   0C52 E5*00              2742 	mov	a,_bp
   0C54 24 0D              2743 	add	a,#0x0d
   0C56 F8                 2744 	mov	r0,a
   0C57 C3                 2745 	clr	c
   0C58 ED                 2746 	mov	a,r5
   0C59 96                 2747 	subb	a,@r0
   0C5A EE                 2748 	mov	a,r6
   0C5B 08                 2749 	inc	r0
   0C5C 96                 2750 	subb	a,@r0
   0C5D 50 10              2751 	jnc	00132$
                           2752 ;	../../../core/net/rime/rudolph2.c:355: send_nack(c);
   0C5F E5*00              2753 	mov	a,_bp
   0C61 24 04              2754 	add	a,#0x04
   0C63 F8                 2755 	mov	r0,a
   0C64 86 82              2756 	mov	dpl,@r0
   0C66 08                 2757 	inc	r0
   0C67 86 83              2758 	mov	dph,@r0
   0C69 08                 2759 	inc	r0
   0C6A 86 F0              2760 	mov	b,@r0
   0C6C 12s04r36           2761 	lcall	_send_nack
                           2762 ;	../../../core/net/rime/rudolph2.c:356: } else if(hdr->chunk < c->rcv_nxt) {
   0C6F                    2763 00132$:
   0C6F 85*00 81           2764 	mov	sp,_bp
   0C72 D0*00              2765 	pop	_bp
   0C74 22                 2766 	ret
                           2767 ;------------------------------------------------------------
                           2768 ;Allocation info for local variables in function 'rudolph2_open'
                           2769 ;------------------------------------------------------------
                           2770 ;channel                   Allocated to stack - offset -4
                           2771 ;cb                        Allocated to stack - offset -7
                           2772 ;c                         Allocated to registers r2 r3 r4 
                           2773 ;------------------------------------------------------------
                           2774 ;	../../../core/net/rime/rudolph2.c:367: rudolph2_open(struct rudolph2_conn *c, uint16_t channel,
                           2775 ;	-----------------------------------------
                           2776 ;	 function rudolph2_open
                           2777 ;	-----------------------------------------
   0C75                    2778 _rudolph2_open:
   0C75 C0*00              2779 	push	_bp
   0C77 85 81*00           2780 	mov	_bp,sp
   0C7A AA 82              2781 	mov	r2,dpl
   0C7C AB 83              2782 	mov	r3,dph
   0C7E AC F0              2783 	mov	r4,b
                           2784 ;	../../../core/net/rime/rudolph2.c:370: polite_open(&c->c, channel, &polite);
   0C80 C0 02              2785 	push	ar2
   0C82 C0 03              2786 	push	ar3
   0C84 C0 04              2787 	push	ar4
   0C86 74r00              2788 	mov	a,#_polite
   0C88 C0 E0              2789 	push	acc
   0C8A 74s00              2790 	mov	a,#(_polite >> 8)
   0C8C C0 E0              2791 	push	acc
   0C8E 74 80              2792 	mov	a,#0x80
   0C90 C0 E0              2793 	push	acc
   0C92 E5*00              2794 	mov	a,_bp
   0C94 24 FC              2795 	add	a,#0xfc
   0C96 F8                 2796 	mov	r0,a
   0C97 E6                 2797 	mov	a,@r0
   0C98 C0 E0              2798 	push	acc
   0C9A 08                 2799 	inc	r0
   0C9B E6                 2800 	mov	a,@r0
   0C9C C0 E0              2801 	push	acc
   0C9E 8A 82              2802 	mov	dpl,r2
   0CA0 8B 83              2803 	mov	dph,r3
   0CA2 8C F0              2804 	mov	b,r4
   0CA4 12s00r00           2805 	lcall	_polite_open
   0CA7 E5 81              2806 	mov	a,sp
   0CA9 24 FB              2807 	add	a,#0xfb
   0CAB F5 81              2808 	mov	sp,a
   0CAD D0 04              2809 	pop	ar4
   0CAF D0 03              2810 	pop	ar3
   0CB1 D0 02              2811 	pop	ar2
                           2812 ;	../../../core/net/rime/rudolph2.c:371: c->cb = cb;
   0CB3 74 28              2813 	mov	a,#0x28
   0CB5 2A                 2814 	add	a,r2
   0CB6 FD                 2815 	mov	r5,a
   0CB7 E4                 2816 	clr	a
   0CB8 3B                 2817 	addc	a,r3
   0CB9 FE                 2818 	mov	r6,a
   0CBA 8C 07              2819 	mov	ar7,r4
   0CBC 8D 82              2820 	mov	dpl,r5
   0CBE 8E 83              2821 	mov	dph,r6
   0CC0 8F F0              2822 	mov	b,r7
   0CC2 E5*00              2823 	mov	a,_bp
   0CC4 24 F9              2824 	add	a,#0xf9
   0CC6 F8                 2825 	mov	r0,a
   0CC7 E6                 2826 	mov	a,@r0
   0CC8 12s00r00           2827 	lcall	__gptrput
   0CCB A3                 2828 	inc	dptr
   0CCC 08                 2829 	inc	r0
   0CCD E6                 2830 	mov	a,@r0
   0CCE 12s00r00           2831 	lcall	__gptrput
   0CD1 A3                 2832 	inc	dptr
   0CD2 08                 2833 	inc	r0
   0CD3 E6                 2834 	mov	a,@r0
   0CD4 12s00r00           2835 	lcall	__gptrput
                           2836 ;	../../../core/net/rime/rudolph2.c:372: c->version = 0;
   0CD7 74 44              2837 	mov	a,#0x44
   0CD9 2A                 2838 	add	a,r2
   0CDA FD                 2839 	mov	r5,a
   0CDB E4                 2840 	clr	a
   0CDC 3B                 2841 	addc	a,r3
   0CDD FE                 2842 	mov	r6,a
   0CDE 8C 07              2843 	mov	ar7,r4
   0CE0 8D 82              2844 	mov	dpl,r5
   0CE2 8E 83              2845 	mov	dph,r6
   0CE4 8F F0              2846 	mov	b,r7
   0CE6 E4                 2847 	clr	a
   0CE7 12s00r00           2848 	lcall	__gptrput
   0CEA A3                 2849 	inc	dptr
   0CEB E4                 2850 	clr	a
   0CEC 12s00r00           2851 	lcall	__gptrput
                           2852 ;	../../../core/net/rime/rudolph2.c:373: c->hops_from_base = HOPS_MAX;
   0CEF 74 46              2853 	mov	a,#0x46
   0CF1 2A                 2854 	add	a,r2
   0CF2 FA                 2855 	mov	r2,a
   0CF3 E4                 2856 	clr	a
   0CF4 3B                 2857 	addc	a,r3
   0CF5 FB                 2858 	mov	r3,a
   0CF6 8A 82              2859 	mov	dpl,r2
   0CF8 8B 83              2860 	mov	dph,r3
   0CFA 8C F0              2861 	mov	b,r4
   0CFC 74 40              2862 	mov	a,#0x40
   0CFE 12s00r00           2863 	lcall	__gptrput
   0D01 D0*00              2864 	pop	_bp
   0D03 22                 2865 	ret
                           2866 ;------------------------------------------------------------
                           2867 ;Allocation info for local variables in function 'rudolph2_close'
                           2868 ;------------------------------------------------------------
                           2869 ;c                         Allocated to registers r2 r3 r4 
                           2870 ;------------------------------------------------------------
                           2871 ;	../../../core/net/rime/rudolph2.c:377: rudolph2_close(struct rudolph2_conn *c)
                           2872 ;	-----------------------------------------
                           2873 ;	 function rudolph2_close
                           2874 ;	-----------------------------------------
   0D04                    2875 _rudolph2_close:
                           2876 ;	../../../core/net/rime/rudolph2.c:379: polite_close(&c->c);
   0D04 02s00r00           2877 	ljmp	_polite_close
                           2878 ;------------------------------------------------------------
                           2879 ;Allocation info for local variables in function 'rudolph2_send'
                           2880 ;------------------------------------------------------------
                           2881 ;send_interval             Allocated to stack - offset -4
                           2882 ;c                         Allocated to stack - offset 1
                           2883 ;len                       Allocated to stack - offset 7
                           2884 ;sloc0                     Allocated to stack - offset 4
                           2885 ;sloc1                     Allocated to stack - offset 7
                           2886 ;------------------------------------------------------------
                           2887 ;	../../../core/net/rime/rudolph2.c:383: rudolph2_send(struct rudolph2_conn *c, clock_time_t send_interval)
                           2888 ;	-----------------------------------------
                           2889 ;	 function rudolph2_send
                           2890 ;	-----------------------------------------
   0D07                    2891 _rudolph2_send:
   0D07 C0*00              2892 	push	_bp
   0D09 85 81*00           2893 	mov	_bp,sp
   0D0C C0 82              2894 	push	dpl
   0D0E C0 83              2895 	push	dph
   0D10 C0 F0              2896 	push	b
   0D12 E5 81              2897 	mov	a,sp
   0D14 24 08              2898 	add	a,#0x08
   0D16 F5 81              2899 	mov	sp,a
                           2900 ;	../../../core/net/rime/rudolph2.c:387: c->hops_from_base = 0;
   0D18 A8*00              2901 	mov	r0,_bp
   0D1A 08                 2902 	inc	r0
   0D1B 74 46              2903 	mov	a,#0x46
   0D1D 26                 2904 	add	a,@r0
   0D1E FD                 2905 	mov	r5,a
   0D1F E4                 2906 	clr	a
   0D20 08                 2907 	inc	r0
   0D21 36                 2908 	addc	a,@r0
   0D22 FE                 2909 	mov	r6,a
   0D23 08                 2910 	inc	r0
   0D24 86 07              2911 	mov	ar7,@r0
   0D26 8D 82              2912 	mov	dpl,r5
   0D28 8E 83              2913 	mov	dph,r6
   0D2A 8F F0              2914 	mov	b,r7
   0D2C E4                 2915 	clr	a
   0D2D 12s00r00           2916 	lcall	__gptrput
                           2917 ;	../../../core/net/rime/rudolph2.c:388: c->version++;
   0D30 A8*00              2918 	mov	r0,_bp
   0D32 08                 2919 	inc	r0
   0D33 74 44              2920 	mov	a,#0x44
   0D35 26                 2921 	add	a,@r0
   0D36 FD                 2922 	mov	r5,a
   0D37 E4                 2923 	clr	a
   0D38 08                 2924 	inc	r0
   0D39 36                 2925 	addc	a,@r0
   0D3A FE                 2926 	mov	r6,a
   0D3B 08                 2927 	inc	r0
   0D3C 86 07              2928 	mov	ar7,@r0
   0D3E 8D 82              2929 	mov	dpl,r5
   0D40 8E 83              2930 	mov	dph,r6
   0D42 8F F0              2931 	mov	b,r7
   0D44 12s00r00           2932 	lcall	__gptrget
   0D47 FA                 2933 	mov	r2,a
   0D48 A3                 2934 	inc	dptr
   0D49 12s00r00           2935 	lcall	__gptrget
   0D4C FB                 2936 	mov	r3,a
   0D4D 0A                 2937 	inc	r2
   0D4E BA 00 01           2938 	cjne	r2,#0x00,00109$
   0D51 0B                 2939 	inc	r3
   0D52                    2940 00109$:
   0D52 8D 82              2941 	mov	dpl,r5
   0D54 8E 83              2942 	mov	dph,r6
   0D56 8F F0              2943 	mov	b,r7
   0D58 EA                 2944 	mov	a,r2
   0D59 12s00r00           2945 	lcall	__gptrput
   0D5C A3                 2946 	inc	dptr
   0D5D EB                 2947 	mov	a,r3
   0D5E 12s00r00           2948 	lcall	__gptrput
                           2949 ;	../../../core/net/rime/rudolph2.c:389: c->snd_nxt = 0;
   0D61 A8*00              2950 	mov	r0,_bp
   0D63 08                 2951 	inc	r0
   0D64 74 40              2952 	mov	a,#0x40
   0D66 26                 2953 	add	a,@r0
   0D67 FA                 2954 	mov	r2,a
   0D68 E4                 2955 	clr	a
   0D69 08                 2956 	inc	r0
   0D6A 36                 2957 	addc	a,@r0
   0D6B FB                 2958 	mov	r3,a
   0D6C 08                 2959 	inc	r0
   0D6D 86 04              2960 	mov	ar4,@r0
   0D6F 8A 82              2961 	mov	dpl,r2
   0D71 8B 83              2962 	mov	dph,r3
   0D73 8C F0              2963 	mov	b,r4
   0D75 E4                 2964 	clr	a
   0D76 12s00r00           2965 	lcall	__gptrput
   0D79 A3                 2966 	inc	dptr
   0D7A E4                 2967 	clr	a
   0D7B 12s00r00           2968 	lcall	__gptrput
                           2969 ;	../../../core/net/rime/rudolph2.c:390: len = RUDOLPH2_DATASIZE;
   0D7E E5*00              2970 	mov	a,_bp
   0D80 24 07              2971 	add	a,#0x07
   0D82 F8                 2972 	mov	r0,a
   0D83 76 40              2973 	mov	@r0,#0x40
   0D85 08                 2974 	inc	r0
   0D86 76 00              2975 	mov	@r0,#0x00
                           2976 ;	../../../core/net/rime/rudolph2.c:391: packetbuf_clear();
   0D88 12s00r00           2977 	lcall	_packetbuf_clear
                           2978 ;	../../../core/net/rime/rudolph2.c:392: for(c->rcv_nxt = 0; len == RUDOLPH2_DATASIZE; c->rcv_nxt++) {
   0D8B A8*00              2979 	mov	r0,_bp
   0D8D 08                 2980 	inc	r0
   0D8E E5*00              2981 	mov	a,_bp
   0D90 24 04              2982 	add	a,#0x04
   0D92 F9                 2983 	mov	r1,a
   0D93 74 42              2984 	mov	a,#0x42
   0D95 26                 2985 	add	a,@r0
   0D96 F7                 2986 	mov	@r1,a
   0D97 E4                 2987 	clr	a
   0D98 08                 2988 	inc	r0
   0D99 36                 2989 	addc	a,@r0
   0D9A 09                 2990 	inc	r1
   0D9B F7                 2991 	mov	@r1,a
   0D9C 08                 2992 	inc	r0
   0D9D 09                 2993 	inc	r1
   0D9E E6                 2994 	mov	a,@r0
   0D9F F7                 2995 	mov	@r1,a
   0DA0 E5*00              2996 	mov	a,_bp
   0DA2 24 04              2997 	add	a,#0x04
   0DA4 F8                 2998 	mov	r0,a
   0DA5 86 82              2999 	mov	dpl,@r0
   0DA7 08                 3000 	inc	r0
   0DA8 86 83              3001 	mov	dph,@r0
   0DAA 08                 3002 	inc	r0
   0DAB 86 F0              3003 	mov	b,@r0
   0DAD E4                 3004 	clr	a
   0DAE 12s00r00           3005 	lcall	__gptrput
   0DB1 A3                 3006 	inc	dptr
   0DB2 E4                 3007 	clr	a
   0DB3 12s00r00           3008 	lcall	__gptrput
   0DB6                    3009 00101$:
   0DB6 E5*00              3010 	mov	a,_bp
   0DB8 24 07              3011 	add	a,#0x07
   0DBA F8                 3012 	mov	r0,a
   0DBB B6 40 06           3013 	cjne	@r0,#0x40,00110$
   0DBE 08                 3014 	inc	r0
   0DBF B6 00 02           3015 	cjne	@r0,#0x00,00110$
   0DC2 80 03              3016 	sjmp	00111$
   0DC4                    3017 00110$:
   0DC4 02s0Er46           3018 	ljmp	00104$
   0DC7                    3019 00111$:
                           3020 ;	../../../core/net/rime/rudolph2.c:393: len = read_data(c, packetbuf_dataptr(), c->rcv_nxt);
   0DC7 E5*00              3021 	mov	a,_bp
   0DC9 24 04              3022 	add	a,#0x04
   0DCB F8                 3023 	mov	r0,a
   0DCC 86 82              3024 	mov	dpl,@r0
   0DCE 08                 3025 	inc	r0
   0DCF 86 83              3026 	mov	dph,@r0
   0DD1 08                 3027 	inc	r0
   0DD2 86 F0              3028 	mov	b,@r0
   0DD4 12s00r00           3029 	lcall	__gptrget
   0DD7 FA                 3030 	mov	r2,a
   0DD8 A3                 3031 	inc	dptr
   0DD9 12s00r00           3032 	lcall	__gptrget
   0DDC FB                 3033 	mov	r3,a
   0DDD C0 02              3034 	push	ar2
   0DDF C0 03              3035 	push	ar3
   0DE1 12s00r00           3036 	lcall	_packetbuf_dataptr
   0DE4 AD 82              3037 	mov	r5,dpl
   0DE6 AE 83              3038 	mov	r6,dph
   0DE8 AC F0              3039 	mov	r4,b
   0DEA C0 05              3040 	push	ar5
   0DEC C0 06              3041 	push	ar6
   0DEE C0 04              3042 	push	ar4
   0DF0 A8*00              3043 	mov	r0,_bp
   0DF2 08                 3044 	inc	r0
   0DF3 86 82              3045 	mov	dpl,@r0
   0DF5 08                 3046 	inc	r0
   0DF6 86 83              3047 	mov	dph,@r0
   0DF8 08                 3048 	inc	r0
   0DF9 86 F0              3049 	mov	b,@r0
   0DFB 12s00r00           3050 	lcall	_read_data
   0DFE AC 82              3051 	mov	r4,dpl
   0E00 AD 83              3052 	mov	r5,dph
   0E02 E5 81              3053 	mov	a,sp
   0E04 24 FB              3054 	add	a,#0xfb
   0E06 F5 81              3055 	mov	sp,a
   0E08 E5*00              3056 	mov	a,_bp
   0E0A 24 07              3057 	add	a,#0x07
   0E0C F8                 3058 	mov	r0,a
   0E0D A6 04              3059 	mov	@r0,ar4
   0E0F 08                 3060 	inc	r0
   0E10 A6 05              3061 	mov	@r0,ar5
                           3062 ;	../../../core/net/rime/rudolph2.c:392: for(c->rcv_nxt = 0; len == RUDOLPH2_DATASIZE; c->rcv_nxt++) {
   0E12 A8*00              3063 	mov	r0,_bp
   0E14 08                 3064 	inc	r0
   0E15 74 42              3065 	mov	a,#0x42
   0E17 26                 3066 	add	a,@r0
   0E18 FC                 3067 	mov	r4,a
   0E19 E4                 3068 	clr	a
   0E1A 08                 3069 	inc	r0
   0E1B 36                 3070 	addc	a,@r0
   0E1C FD                 3071 	mov	r5,a
   0E1D 08                 3072 	inc	r0
   0E1E 86 06              3073 	mov	ar6,@r0
   0E20 8C 82              3074 	mov	dpl,r4
   0E22 8D 83              3075 	mov	dph,r5
   0E24 8E F0              3076 	mov	b,r6
   0E26 12s00r00           3077 	lcall	__gptrget
   0E29 FF                 3078 	mov	r7,a
   0E2A A3                 3079 	inc	dptr
   0E2B 12s00r00           3080 	lcall	__gptrget
   0E2E FA                 3081 	mov	r2,a
   0E2F 0F                 3082 	inc	r7
   0E30 BF 00 01           3083 	cjne	r7,#0x00,00112$
   0E33 0A                 3084 	inc	r2
   0E34                    3085 00112$:
   0E34 8C 82              3086 	mov	dpl,r4
   0E36 8D 83              3087 	mov	dph,r5
   0E38 8E F0              3088 	mov	b,r6
   0E3A EF                 3089 	mov	a,r7
   0E3B 12s00r00           3090 	lcall	__gptrput
   0E3E A3                 3091 	inc	dptr
   0E3F EA                 3092 	mov	a,r2
   0E40 12s00r00           3093 	lcall	__gptrput
   0E43 02s0DrB6           3094 	ljmp	00101$
   0E46                    3095 00104$:
                           3096 ;	../../../core/net/rime/rudolph2.c:395: c->flags = FLAG_LAST_RECEIVED;
   0E46 A8*00              3097 	mov	r0,_bp
   0E48 08                 3098 	inc	r0
   0E49 74 48              3099 	mov	a,#0x48
   0E4B 26                 3100 	add	a,@r0
   0E4C FA                 3101 	mov	r2,a
   0E4D E4                 3102 	clr	a
   0E4E 08                 3103 	inc	r0
   0E4F 36                 3104 	addc	a,@r0
   0E50 FB                 3105 	mov	r3,a
   0E51 08                 3106 	inc	r0
   0E52 86 04              3107 	mov	ar4,@r0
   0E54 8A 82              3108 	mov	dpl,r2
   0E56 8B 83              3109 	mov	dph,r3
   0E58 8C F0              3110 	mov	b,r4
   0E5A 74 02              3111 	mov	a,#0x02
   0E5C 12s00r00           3112 	lcall	__gptrput
                           3113 ;	../../../core/net/rime/rudolph2.c:397: send_data(c, SEND_INTERVAL);
   0E5F 74 40              3114 	mov	a,#0x40
   0E61 C0 E0              3115 	push	acc
   0E63 E4                 3116 	clr	a
   0E64 C0 E0              3117 	push	acc
   0E66 A8*00              3118 	mov	r0,_bp
   0E68 08                 3119 	inc	r0
   0E69 86 82              3120 	mov	dpl,@r0
   0E6B 08                 3121 	inc	r0
   0E6C 86 83              3122 	mov	dph,@r0
   0E6E 08                 3123 	inc	r0
   0E6F 86 F0              3124 	mov	b,@r0
   0E71 12s03rC4           3125 	lcall	_send_data
   0E74 15 81              3126 	dec	sp
   0E76 15 81              3127 	dec	sp
                           3128 ;	../../../core/net/rime/rudolph2.c:398: ctimer_set(&c->t, SEND_INTERVAL, timed_send, c);
   0E78 A8*00              3129 	mov	r0,_bp
   0E7A 08                 3130 	inc	r0
   0E7B 74 2B              3131 	mov	a,#0x2B
   0E7D 26                 3132 	add	a,@r0
   0E7E FA                 3133 	mov	r2,a
   0E7F E4                 3134 	clr	a
   0E80 08                 3135 	inc	r0
   0E81 36                 3136 	addc	a,@r0
   0E82 FB                 3137 	mov	r3,a
   0E83 08                 3138 	inc	r0
   0E84 86 04              3139 	mov	ar4,@r0
   0E86 A8*00              3140 	mov	r0,_bp
   0E88 08                 3141 	inc	r0
   0E89 E6                 3142 	mov	a,@r0
   0E8A C0 E0              3143 	push	acc
   0E8C 08                 3144 	inc	r0
   0E8D E6                 3145 	mov	a,@r0
   0E8E C0 E0              3146 	push	acc
   0E90 08                 3147 	inc	r0
   0E91 E6                 3148 	mov	a,@r0
   0E92 C0 E0              3149 	push	acc
   0E94 74r47              3150 	mov	a,#_timed_send
   0E96 C0 E0              3151 	push	acc
   0E98 74s05              3152 	mov	a,#(_timed_send >> 8)
   0E9A C0 E0              3153 	push	acc
   0E9C 74 40              3154 	mov	a,#0x40
   0E9E C0 E0              3155 	push	acc
   0EA0 E4                 3156 	clr	a
   0EA1 C0 E0              3157 	push	acc
   0EA3 8A 82              3158 	mov	dpl,r2
   0EA5 8B 83              3159 	mov	dph,r3
   0EA7 8C F0              3160 	mov	b,r4
   0EA9 12s00r00           3161 	lcall	_ctimer_set
   0EAC E5 81              3162 	mov	a,sp
   0EAE 24 F9              3163 	add	a,#0xf9
   0EB0 85*00 81           3164 	mov	sp,_bp
   0EB3 D0*00              3165 	pop	_bp
   0EB5 22                 3166 	ret
                           3167 ;------------------------------------------------------------
                           3168 ;Allocation info for local variables in function 'rudolph2_stop'
                           3169 ;------------------------------------------------------------
                           3170 ;c                         Allocated to registers r2 r3 r4 
                           3171 ;------------------------------------------------------------
                           3172 ;	../../../core/net/rime/rudolph2.c:402: rudolph2_stop(struct rudolph2_conn *c)
                           3173 ;	-----------------------------------------
                           3174 ;	 function rudolph2_stop
                           3175 ;	-----------------------------------------
   0EB6                    3176 _rudolph2_stop:
                           3177 ;	../../../core/net/rime/rudolph2.c:404: polite_cancel(&c->c);
   0EB6 AA 82              3178 	mov	r2,dpl
   0EB8 AB 83              3179 	mov	r3,dph
   0EBA AC F0              3180 	mov	r4,b
   0EBC C0 02              3181 	push	ar2
   0EBE C0 03              3182 	push	ar3
   0EC0 C0 04              3183 	push	ar4
   0EC2 12s00r00           3184 	lcall	_polite_cancel
   0EC5 D0 04              3185 	pop	ar4
   0EC7 D0 03              3186 	pop	ar3
   0EC9 D0 02              3187 	pop	ar2
                           3188 ;	../../../core/net/rime/rudolph2.c:405: c->flags |= FLAG_IS_STOPPED;
   0ECB 74 48              3189 	mov	a,#0x48
   0ECD 2A                 3190 	add	a,r2
   0ECE FA                 3191 	mov	r2,a
   0ECF E4                 3192 	clr	a
   0ED0 3B                 3193 	addc	a,r3
   0ED1 FB                 3194 	mov	r3,a
   0ED2 8A 82              3195 	mov	dpl,r2
   0ED4 8B 83              3196 	mov	dph,r3
   0ED6 8C F0              3197 	mov	b,r4
   0ED8 12s00r00           3198 	lcall	__gptrget
   0EDB FD                 3199 	mov	r5,a
   0EDC 43 05 04           3200 	orl	ar5,#0x04
   0EDF 8A 82              3201 	mov	dpl,r2
   0EE1 8B 83              3202 	mov	dph,r3
   0EE3 8C F0              3203 	mov	b,r4
   0EE5 ED                 3204 	mov	a,r5
   0EE6 02s00r00           3205 	ljmp	__gptrput
                           3206 	.area CSEG    (CODE)
                           3207 	.area CONST   (CODE)
   0000                    3208 _polite:
   0000r1Cs07              3209 	.byte _recv,(_recv >> 8)
   0002r45s05              3210 	.byte _sent,(_sent >> 8)
   0004r46s05              3211 	.byte _dropped,(_dropped >> 8)
                           3212 	.area XINIT   (CODE)
                           3213 	.area CABS    (ABS,CODE)
